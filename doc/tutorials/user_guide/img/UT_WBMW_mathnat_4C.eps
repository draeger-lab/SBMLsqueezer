%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UT_WBMW_Einr_eps_7.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Christian Zander
%%CreationDate: 20.10.10
%%BoundingBox: 0 0 1215 143
%%HiResBoundingBox: 0 0 1214.2593 142.3204
%%CropBox: 0 0 1214.2593 142.3204
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 4252 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA8A1A19AFD05A1CAA1CAA1CAA1A1A1A8FFA1A1CAA1CA76A8%A8CAA1FD10FFCAA8FFA1FD0AFFCACAFFA8FFFFFFA8FFA8FFFFFFCAFD09FF%A8CFCAFFCACAFFCFA8FFFFFFCAFD22FF76A876A176A176FD05A176A1A1CA%A1FF76FD06A1A8A1A1FD0FFFA145766F6F6FA8FD08FF76A1A89AFFA1A1CA%76CA76CF7DCA76FF76CAA1A8A8A1A8A1A1A7A1A1A8A7A1CAA1A1A8A1FD21%FFCFCAA8CAA8CAA8CAA7FFA8FFCAA8A8CAA1CAFFFFA7CAA8CAA8CAA8A8A8%FD0FFF70706F766F706FFD08FFA876A1A1FF76A1FFA1FFA1A1A1CAA1A8A1%76A1A1CA76FFA1FFA8CAA8A8A1FFFFCAA1A8A1CAA8FD18FFA1CAFFCAA8CA%A8FFFFA8A8CAA8A8FFFFA8CAA8A8A8FFA1A8CAFFA8A8A8CAA8CAA8A8A1FF%A8CAA8CAA1A8A1CAFD06FFA16F6F7645706F6FA1FD07FFA1A8A1A87DCAA1%A8A1FFA1FFA1CA7DA8FD05A1CAA1A1A8CAA1A1A1CFA1A7A1A8A8A1FD1AFF%A1A1FFFD04A1FFFF76CF76FF70FFFFA1A8A1A1FFA1A1A19BCFA1A8FFA1A1%A8CA76CACACA6FFFA8CA76CAA8FD07FF6F767070709B6FCAFD26FFCAFD1E%FF76A1FFCAA1A86FA1FFA1A8A1FFA176FFA1FF76A1CAA876FF76FF70CAFF%A17DFFA8A1FFFFA176A8FFA8A1FD08FFA8706F7045767070A8FD07FFCAFF%A8FD3BFFA1A1FFA8A8A1FF76A1A1CA76FFCA9AA1CAFFA176CFA89A76CFFF%FF6FFFA1A1FFFF9AFFFFA176A1FFFF9AFD09FFA1766F706F7076FD08FFA1%A8FFA1FFA8FFA1A8A1FFA8CAA1CAA7CAA8FFA1CAA8A7A8A1A8CAA8CFA8FF%A7A8A1FFA7A8A1CAFFA8FFCAFFCAA1CAA1A8A1FFCAA8A8A8A1CAA8FFA8CA%A176A1FFA1A1A1A8FF7676A89AA8FF7676FFFF76A8FFA87DA1A1FFA8A87D%A17CFFA89AFFA87DFF70FFA89AFD0AFFA8A145A176CFFD08FFA176A1CAA8%76CAA1A8A1A8A8A176A1A87C9A7DA8A1A876FF76FF76A1A8767DCAA1A1A1%A8FFCA76A876FF6FFFA1A1A8A1A8A1A7FF7CA1A8FFA7A17DA87DA1FFA1A1%A1FFA1CAFFFFA1FF76FFFFCAA1FFFFA1A1CAA8A1CAA1A8A1A1FFA1A1FFFF%76FFA0CAFFA8A1FF76FD0BFFA86FA8FD0AFFA8A89BA1A876CAA1FFA1CAA1%CA76A1CA9AA1A1FFA1CAA1A8A7A1A8A1CAA7A1A1FF9ACAA1FFA8A1CAFD04%A1A8A1FFA1FFA1CAA8A1A1CAFFCAA1CAA1A1A1FFFFCAFFA8CAA8CAA8FFA8%FFA8FFA8CAFFFFA8FFA8FFFFFFA8FFCAA8A8FFCACAA1FFCAFFFFFFA8FD0E%FFA745A1FD0AFFA1FFA8CAA8FFA1CAA8FFA1CACACAA8CAA8FFA8FFA8CAA1%FFA1CFA8A8A8CAFFCAA7A8FFA8A1CAA7FFA7A8FFCAA1FFFFCACACAA1CAA8%FFA1A8A8CAA8CAA8A8FD04FFA176A1A1A776FFA8A1A89AA1A1A89AFF9AA1%FFA8A1A8A1A1CAA1FF76A7A8A876FFFFA1A8FD0BFFA89A6F706FA8FD4CFF%A8A1FFA8A1A8FFA1FF76A17DFF76FF7670A8FFA1A1A1FFFFFFA876A8FFA1%7676FF7DCFFD0BFF9A456F456F45A1FD08FFA1A1A8FD05FFA8FFCAFFA8FF%A8FFA8CAA8FFA8FD2EFFA1A8FFFF76FFFFA1CAA19AA1CAA1FFA8A89AA8A8%76FFFFFFA1FF76A1A8CAA89AA1CACAFD0BFF767069706F709AFD08FFA1A1%FFA1FFFD04A1CAA8A1CAA89BA1CAA1CF76A8FD2EFFA7A1FFA876FFFF76FF%76FF76A176FFA1FFA8767CA176FFFF76A89AFFFFA1CAFF766FFD0CFFCA6F%706F706FA8FD08FF7DA1A870A1A870FFA1FFA7A1A1FFA1FF7D76FFA1A8FD%2EFFA1A1FFFFA1A1A1CAFF9AA1A8A89AA8A1CAFFA1A1FFA17CA8A1FF76A1%A8A1A1FFFF9ACAFD0DFFA8FFA8FD0AFFA1A8A1A8FD04A1A7A1CAA8A1A8A1%A7A8A1A8A1FD30FFA8FFFFFFA8FFFFFFCAFFFFFFCAFFA8FD06FFCAA8FFFF%FFA8FFCAFD1FFFCAFFA8FFCAFD04FFCFA8FFA8FFA8FFCAFFA8FD2AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">EKUT_WortBildMarke_W_4C</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2010-10-19T18:43:48+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2010-10-19T18:43:48+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2010-10-19T18:43:48+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>32</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAIAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9QRanps1vJcQ3cMlvFX1&#xA;ZkkRkWgqeTA0G2CwyMCDVNx3VleRMsEsVyrJyKq6urI5ZRWnL4WKsPoONqQRzeTnyNcwHTVmv9Ij&#xA;n0qyexuC9wgo0sUkZqqW0JoRKwHLfu3PplRi7P8AMg3Ql6jfL9v48leDyDeXcf1a2uNKnlg0xrCS&#xA;KOZCRK6XaGZjBbRkDldAFePxblqsoJPCg6kDc8X1X/ue8+SZarpUssl6sGv2EHq3EN3FcyXEQlM9&#xA;lAqwRSJHFEnBJwrHvRRtviR5tcJ1VxPKuXed/sQf+Hhb30t7eS6Lcpc3X15bR7pVBiee6kK1aECS&#xA;ouRRm8COmCvcy8WxQ4thXLyHn5JlrvlqaLQ9I9e80+3jsru4uHjvJytq0Ny0hWyWRkqYikgi6D4R&#xA;9kr8BkQwx5QZGgdwOXPbr7+v4tLtV8sahPBcW8uq6WRcytqkqTTgiGSW1ngZIw8T1g4SQhHIBABI&#xA;3pkSPNnDMBvUu77QfnzRws2luYba1n0ho5NVS/Ci+9U7rHGyNA0NJmKB+J5A8+LVw0w4qFni+muX&#xA;6b2/UzyTUdPjWRpLqFFiqZS0igLxpXlU7U5r94yyw4Qie5Ri17Q5ZFii1G1kkchURZo2ZidgAAdz&#xA;jxBJxyHQo7CwYx+ZPmp/LHk++1SEhbsKIbNmoVE0myseW3w7tQ9aU75GRoOTpMPiZBHo+fJfzS/M&#xA;KK0FtLrM4W9T1kYIyTFuTqGjZtxE5B+zwpx6D9qqy74aLCTYjy/Hz+b1j8kfzC1jzHBeaVrbiW/0&#xA;5IpI7kgCSRHqGEgFAWQ0HIDeu++5shK3V9o6WOMiUeRepZN1jEvP19q9rJpL6Vze4tJpb+W2TrPD&#xA;bQsJYKV3LpKeI/mAPbISLlaaMTfF12919Umg1zXy2uoTNHqGsm0k0a34gPbx3atECqyFUDwxQ+rI&#xA;panPau+R4i2nHH090bvzr9fJEaVqGqalqWiLcXt1a3FzFdDV7NWVUjvLH0I2jQcTRGZZG6/EDUex&#xA;5lE4xiJUAaqvcbWaJrevS/4dN/OVtLgah9ZmWRjJJ6QYp6i+mvHiB8NGOAE7LkxxHFXPZB2PmzX4&#xA;tE0S+V3vJEcXOswqzTyPAlrELhVX0oijo05l9MA7rSu9AiTOWCBlIcug+e33VatN5k85yadeWNtG&#xA;x8xtfSTQW1E/dWkcMd2sRLcUILSLbsak7sQCRTHiKBix2Cfor7eX7UXHqNzd3erXlnqN4LNNIi1K&#xA;xhZgAJrn66JEYFa/ugIvg/ZIH0yYmAAAIF8VH4cP7UGNZ8w/XJRZ3c1/fPoguLS1TpDdJbgkTxca&#xA;SCZpFaN6j4wU6ZEEsvDhW4ocX2X+j9qLvNWiS3gm0LWbi/mku9PS4gmkJVRLOFkEjemxhZ0rzSnw&#xA;gVCjDfcWEYb+qNbS+77U20HU9cmvdUieAT+nqLRMGn+CCEW8DfuyYlaQF3enw+1dsIJa8kIgD+r+&#xA;ksnybjOxV2KuxV2KuxVgnkn0YvL/AJtV+KJFrOseoDQBVMrMOXgOBB+WQHIudqd5w/qxY7o+i6+r&#xA;6XqOht6eu6L5Y0RRYyNxhu4pTdetbS/ysTECj9m67Y+YcjJkhuJfTLJPfu5bqer61pevab5tv7eI&#xA;xGRNEjvraZOMsU8d46yRTKR9pKU/syBOxWGOUDAH+lXy6Mi8z3sPk/zkvmL0ybHXbR7O8jQU539o&#xA;jS2fzeaPnEvvTJnY20YYnLj4OsTfwPP5c0Druh3OmjyPaBILjVH1Sae9eavpy3U9rPLcMxAZqF2N&#xA;PagwEM8WQS8Q9OH7LFLfMVwulazp91caLb3y2nly/e+02DgYUEc9qZFj5qQyo1V6VpU07YlcQ4ok&#xA;CRFzjR+El7+W73S/LXlm+0ea31i88u2006WEp+C5tLoAv6DPVkaNKLE5HTY9aY1sEDMJTmJXETPP&#xA;uI7/ANKI0xNH1Xz/AGMkdov6NuvKsEkFrMg+GE3ayRoyGv2dtsevwYz4o4jvuMn6Ex0Cz0lfMnnG&#xA;W5ggEVpf2kwd1UCP09OtpA4NPh4kcq5KhbDLKXBCusT/ALosY8oQQxebEm1TSPRsfOVvJcW4uVgd&#xA;PXil+sRxxqruUDWvp8lZVq0VaZCLkZzeOonfGfP3fffzZV5a03TpPNPm4PaxMIdRs3hqi/Ayafau&#xA;pXbYht8nW7jZpnghv/Cf90WYZJxGNfmN5Un81eT73RLd44rmcwvBNNXgrRTJIa8QxFVUrsO+CQ2c&#xA;nSZxiyCR5PmPV/KXmzTPMWn6Te6SFu7qRvq9uXV2uShNWLA9GJ24la9t98pp6THnxygZCWw+x7N+&#xA;QmgapFDqnmHU7aW3k1D04bVbjkH4RFjIQH+LizEbt3r2oTPGHT9p5Y7Qibp63ljqkl8y+Zo9B+qT&#xA;XFu8tlK7C9nj3NvEqFjMyDdkU0506LVu2RMqbsOHjsA79PPyQk/nazsbTUb3UQotLO8jtYZbZjN6&#xA;kUsMVwJui0VIpi70rRVJFceJkNOZEAcyL+8U1qfnY6dJqiTaTdH9D2zX93Ir2/D6r/pHpyJ+95Ev&#xA;9Uai8aiorTDaYafiqiPUa689vLzRGreaxpss8T2MsrW6WbvweJQTfztbxqC7INpEPKppTAZMYYeL&#xA;r3/YLQM35kaNb2gvbq3ube0awj1KNnVebRvIImQIGPxozryptQggnBxhmNJImgRd0in86Wwu/QSy&#xA;nmjZ7pIZ4fTcS/U4hK5jUNyapJRf8oHHjY/lzV2On2qVn55iuk0Vo7CYfpwsbVjJAUEaBGLcxIVL&#xA;cJC3AfFRH2+HDxJlpyOLf6ff+PwFM/mLpKWN5ezW88dvYXX1K64mKWRZFuJLeRjFC8kgRGiLVZQS&#xA;u4Bx4k/lZWBfMX9lqt356tYWAgs5btJbuOxtZ45IRFM8tsLpCsjOq0dXVVr9pjQY8SI6Ynma2v7a&#xA;RsXmKS5uJFstOnubWG4azku1aIIJYzwchS/MoknwMabEHagrjxMDiobmjVoXSfPGl6nPpcEC0k1O&#xA;1ku+HqRMYFjCHjMEduLH1R+OIkynp5RBJ6GlA/mJo50Wz1eKKV7W8uXs1DGKFkkRXYGT1njVFZYq&#xA;gluhHjg49rT+VlxGPUC/xSvdecJrX66J9Gu0bT7Zr27Je1KrBxnKMCsxLFzbEUA2JFdt8PEiOC6q&#xA;Q3NdfLy81XUPN9npxtzdwSJHNp8+pM4KtxS2MIeOgNWctcoFA648SIYDK67wPnf6ltx5rms0WTUd&#xA;Knsommt4fVlkt+AFyzLyLLIy/uyo5ivcUrjxKMIPI3z7+iEn/MTS4kMiwPLEdQk0yKZZbdYmmS2N&#xA;0repJIiBHRSASftbUx4mY0sj8r699Jpe+VPLl3dSXlxpsM1xJvNVQFmIA4+suyS0oOPMGnbExDVH&#xA;NMCgWLx3nmuLzY0S6Rpy63c6eLiWQXt0YzDDII1i3h41V5DT4abk9zkd7ckxgcf1S4RLuH615Npq&#xA;99r+n6tpFiqC+sbO7PryIblnhSaMycUHNo1mUKvcjqKDH3rvARMZHkT7un6ENceadSu4vL0Fzpdj&#xA;M19eXgg+sXEvCGXSfUdJTI0bNU+gTyI298btkMIHEQTsB0/nf2oifU7XzLeeT2vdJX0dWt572L1p&#xA;pUmtXSJGPD0+IbksgAao2+eJ3piIHGJ1L6TXvW+S9R8r6+zyW2nix1/So5oIrOeSQ/6PJI1JF3Hq&#xA;QzNu54n4uu4GMaK6iE8fM3GX3/rCXaRDpetWWk2lj5ftP0itmbyWFrqdLSztbxynogorMwmEbfue&#xA;ITYk9qgbtmQygZEyNXXLckdfh380y8xXeoaBBqHmm60a0Oo6bFb29rcw3M3CW2mk4NEV4KE9N2Dc&#xA;aEHrscJ23a8UROoCRo306qPmNrHQtNu73W9FS4/TV+ttqyWM883q23otJ6zKQrN6aoQY6fZFBtid&#xA;uacVzkBGX0ja65/jqmusS6Xff4ThtbeDUdIvLtRZXfrSB4WhtJp45onT4mb04XXdupyRFteMSjx2&#xA;SJAb/MBkNjoel2N7eXtpD6VzfuJLyTm59RxsGYMSKgbDwG3TCA48skpAA8gjsLBBa1q9po+lXWqX&#xA;hItrSMyy8aciF7CpUVPTc4CaZ44GchEcy+Z/N35vx6x+YGg+YrbTHjt9GIpbO4Msq+oS9aDih49B&#xA;v88rJvd6TBoODDKBP1Poryj5w0fzVph1DTC4jRzFLFKoWRHABowBYd+xyyMreez4JYpVJO8LSk2v&#xA;S6BbXmn32r6lFYfV2mFvHPNFDFKZI+LhhL9ritfsnImm7EJkERFoG2/L3yukfppEZdNeSWddPcrJ&#xA;bc54lh5KrAkBIl4xgNRQSBtjwhmdVP49/VEweTtNjguYJ5p7uK806LSblZ2Q87aH1QlSiIeVLhwT&#xA;3w0xOolsRtUuL47fqan8m2N1bSw3t1c3jTvaPLPMYWdlsZvXgiIEYQoJKk/DU1NTg4VGoINgAc/t&#xA;2KhJ5U8raedPmunIg01rgabFO49OJJ4iZYVBFWjCRllVieNNtgKDhCfGnK661f61e38l6Xa2mm2t&#xA;nNcWyaVFPFaujqXrcrxeR2dXq9SWB8etcPCg6iRJJo8X6FGPyJpyRW0JvLtobe6N+8ZaELLcGcXH&#xA;qOFiXgRIP91cNiQepx4UnUnc0OVfCq/F2rW/k6zgDKt5dMhvTqCoxhosrXEly6ikYPBpZmO9SOxG&#xA;PCg5yeg5V9lKU/kLRpLO4sYZLi1sLu4a5uLOF1ETFhGCih1f01DQhl9MqVavEjHgCRqZWDsSAjov&#xA;LqQXk09rf3VvBPMbmaxjMXomVqFmHKNpFDsOTKrgEk7bnHhYHLYoge9BP5F05tOsbEXl2ken2c2n&#xA;wyK8fqGG4CK/JjGfi4xgAilMeFn+YNk0Nza8eR9FS8E9vztoRdR3v1GERrbetHA1vUR8DQPG1GAO&#xA;9BjwhH5iVUd9qvrztF3vlyzvJdUklmmH6Ws00+4VSgCwx+rQx1U0b/SH3NfwwkMY5SK/om/u/UhZ&#xA;PJtjOU+u3VzeBLW4seMpiAMF0Iua/u446EG2QqVoQcHCyGoI5ADcH5X+tUPlcyLCt1qt9dCCa3ni&#xA;9VoRQ2zFlB9OJKhy3x13NBvjwo8buAHP7fipXXkuynlaUXl1DI18+ohozCaTSWxtGADxOOHosRQ/&#xA;PHhTHUEdByr7b+9kGSaGOPYal/ysGLUhasdOGmPaNdB46CVp1lA4FvUpxTrx65Gt3IEh4VXvxX9i&#xA;hFaa9o/mXWr23sG1Kx1p4J4zDLFG8E0VutuwlEzR/AwiUhkLH/Jx3tkZRnCIJoxv77SPUPJmpU8p&#xA;x3emR6xb2FxfXOsWymFoq3qSHiq3LRhwkk23steuRrk3Q1A9dHhsAD4V3e5vy75X8y6Te+WVmt5L&#xA;m0039J82M0Uj20N0w+qwFnZWkKItGK7DoKjEA7LlzQkJVsTw/GuZRFt5I1C48u6bMgOkea9HaY6f&#xA;dkpItJJGYxTCNmDwyqQGHUdR7ojt5sTqAJkfVCXP8d6l5f8ALvmry2dM1KG0W+aXTLew1vS4pY0l&#xA;WS2LvHLA8hSJ6eq6lWdfEHCAQnLlhkuN16iQff3obzF5Y8y6tpPm0xafMsuryWQ06wuLiIlUhaNp&#xA;jQSyQxhmVm2bfAYndlizQjKG/wBN2a/ZabnRp0GmDTPLp0y0ttXF3LaI9qn7v6q0Ty+nHIY1q8n2&#xA;UJJoT1OGvJq8TnxS4jw1171KPyNqGl+bNJm0aRF8rR3k19daaxp9VuHtLiHlbeEUrXFWT9ltxsTh&#xA;qin8yJY5CX11V94sHf5M5yThOxVB6zpNnq+mXGnXqCS2uF4yIehoQw/EYCLZ45mJsc3iDf8AOMUz&#xA;O5/TKDgEMLGIsXfbn6gJ4qu3wgA++Q4S7r+Wf6L1T8vvI1v5O0VtOjujeSSSGSScoIh0oFWNSwUd&#xA;T8zkoxp1eq1JzS4qpk+ScZjvm7StT1K50JLFpoRbXzzXN5B6BaGNrK5gDcbjkrVedQQEbauAuRgn&#xA;GIlfUefeD09zG7/QPN08mv3T2fr2/mGxurQaWWhDWrW6sliSzTGJhMpZm4U4swrWlRCi5EcuMcIv&#xA;6SDfffPp0b0ny1rGny6PcXGi/WL7Srh5Lu/ha29S6SW1eFXHORSrRngrR14qAPTJUABAPcieaMuI&#xA;CW0hy323/H6URpXlaay1S1Nxoa3Fncae1tdhfqpjja5vTPJFIrupdUWQluKkNTauIiiea4mpb359&#xA;BSXr5L15dBh03SbGPRLsXFzqE94Fh4yPb3MklhA4glVjX1FcE1VQtCN6Y8Jpn+YjxcUjxCgPmPUd&#xA;wn/lzy3DF5nvtYm0KLTnntrRoJONsXS4Im+sqGiZ25fvQGbo3icIG7RlykwEeK9z3+VMuybiuxV2&#xA;KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29EA7EEF082068118A91922273224FE2</stEvt:instanceID>
                  <stEvt:when>2010-10-19T18:43:48+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:89D63062348CDF11938FC449556742DA</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8AD63062348CDF11938FC449556742DA</stRef:instanceID>
            <stRef:documentID>uuid:89D63062348CDF11938FC449556742DA</stRef:documentID>
            <stRef:originalDocumentID>uuid:89D63062348CDF11938FC449556742DA</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:InstanceID>xmp.iid:29EA7EEF082068118A91922273224FE2</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:29EA7EEF082068118A91922273224FE2</xmpMM:DocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>428.363690</stDim:w>
            <stDim:h>50.207444</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -142.32 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 142.32 li
1214.26 142.32 li
1214.26 0 li
cp
clp
[1 0 0 1 0 0 ]ct
217.817 37.979 mo
219.711 37.957 223.877 37.6426 227.217 41.0444 cv
230.557 44.4463 230.745 48.667 230.745 50.7461 cv
230.745 56.5415 225.985 60.8809 219.874 60.8809 cv
217.35 60.8809 214.563 60.4512 213.643 59.8989 cv
213.334 59.7144 213.211 59.4688 213.211 59.1616 cv
213.211 39.084 li
213.211 38.7158 213.397 38.4707 213.704 38.3477 cv
214.319 38.1631 215.975 38 217.817 37.979 cv
217.817 37.979 li
cp
394.562 38.6284 mo
402.29 38.7524 li
408.175 38.875 409.647 40.2876 409.83 42.1309 cv
409.892 42.8066 li
409.955 43.666 410.08 43.8506 410.397 43.8506 cv
410.647 43.8506 410.833 43.6055 410.833 43.0522 cv
410.833 42.3765 411.023 38.1377 411.023 36.2944 cv
411.023 35.9263 411.023 35.5576 410.708 35.5576 cv
410.458 35.5576 409.892 35.7417 408.973 35.8643 cv
407.992 36.0488 406.58 36.1719 404.62 36.1719 cv
381.599 36.1719 li
380.863 36.1719 378.529 36.0488 376.749 35.8643 cv
375.09 35.7417 374.473 35.1274 374.044 35.1274 cv
373.796 35.1274 373.552 35.9263 373.429 36.2944 cv
373.307 36.7856 372.078 42.0688 372.078 42.6836 cv
372.078 43.0522 372.201 43.2368 372.384 43.2368 cv
372.631 43.2368 372.815 43.1143 373 42.6221 cv
373.183 42.1924 373.37 41.7622 374.044 40.7183 cv
375.028 39.2437 376.502 38.8135 380.311 38.7524 cv
389.403 38.6284 li
389.403 64.6152 li
389.403 70.5127 389.403 75.3652 389.095 77.9453 cv
388.849 79.7285 388.542 81.0801 387.312 81.3242 cv
386.761 81.4473 386.023 81.5703 385.47 81.5703 cv
385.102 81.5703 384.978 81.7559 384.978 81.9395 cv
384.978 82.3086 385.287 82.4316 385.962 82.4316 cv
387.804 82.4316 391.675 82.2461 391.982 82.2461 cv
392.29 82.2461 396.157 82.4316 399.529 82.4316 cv
400.205 82.4316 400.509 82.2461 400.509 81.9395 cv
400.509 81.7559 400.388 81.5703 400.022 81.5703 cv
399.469 81.5703 398.12 81.4473 397.259 81.3242 cv
395.419 81.0801 395.052 79.7285 394.87 77.9453 cv
394.562 75.3652 394.562 70.5127 394.562 64.6152 cv
394.562 38.6284 li
394.562 38.6284 li
cp
318.856 38.6284 mo
326.58 38.7524 li
332.466 38.875 333.94 40.2876 334.124 42.1309 cv
334.183 42.8066 li
334.249 43.666 334.374 43.8506 334.687 43.8506 cv
334.937 43.8506 335.127 43.6055 335.127 43.0522 cv
335.127 42.3765 335.315 38.1377 335.315 36.2944 cv
335.315 35.9263 335.315 35.5576 335 35.5576 cv
334.75 35.5576 334.183 35.7417 333.263 35.8643 cv
332.283 36.0488 330.874 36.1719 328.911 36.1719 cv
305.89 36.1719 li
305.154 36.1719 302.82 36.0488 301.04 35.8643 cv
299.381 35.7417 298.765 35.1274 298.335 35.1274 cv
298.09 35.1274 297.844 35.9263 297.72 36.2944 cv
297.598 36.7856 296.37 42.0688 296.37 42.6836 cv
296.37 43.0522 296.492 43.2368 296.675 43.2368 cv
296.921 43.2368 297.107 43.1143 297.291 42.6221 cv
297.477 42.1924 297.661 41.7622 298.335 40.7183 cv
299.319 39.2437 300.792 38.8135 304.602 38.7524 cv
313.694 38.6284 li
313.694 64.6152 li
313.694 70.5127 313.694 75.3652 313.386 77.9453 cv
313.14 79.7285 312.833 81.0801 311.606 81.3242 cv
311.052 81.4473 310.315 81.5703 309.761 81.5703 cv
309.392 81.5703 309.272 81.7559 309.272 81.9395 cv
309.272 82.3086 309.578 82.4316 310.253 82.4316 cv
312.098 82.4316 315.966 82.2461 316.273 82.2461 cv
316.58 82.2461 320.447 82.4316 323.82 82.4316 cv
324.496 82.4316 324.8 82.2461 324.8 81.9395 cv
324.8 81.7559 324.679 81.5703 324.312 81.5703 cv
323.759 81.5703 322.411 81.4473 321.552 81.3242 cv
319.712 81.0801 319.344 79.7285 319.161 77.9453 cv
318.856 75.3652 318.856 70.5127 318.856 64.6152 cv
318.856 38.6284 li
318.856 38.6284 li
cp
287.138 53.8032 mo
287.138 44.2192 287.138 42.499 287.261 40.5332 cv
287.385 38.3833 287.877 37.3389 289.536 37.0322 cv
290.272 36.9087 290.64 36.8477 291.07 36.8477 cv
291.316 36.8477 291.562 36.7246 291.562 36.4795 cv
291.562 36.1099 291.253 35.9873 290.578 35.9873 cv
288.736 35.9873 284.867 36.1719 284.558 36.1719 cv
284.252 36.1719 280.381 35.9873 278.356 35.9873 cv
277.679 35.9873 277.371 36.1099 277.371 36.4795 cv
277.371 36.7246 277.617 36.8477 277.863 36.8477 cv
278.292 36.8477 279.091 36.9087 279.767 37.0933 cv
281.12 37.4009 281.732 38.4448 281.856 40.5332 cv
281.978 42.499 281.978 44.2192 281.978 53.8032 cv
281.978 64.6152 li
281.978 70.5127 281.978 75.3652 281.671 77.9453 cv
281.425 79.7285 281.12 81.0801 279.888 81.3242 cv
279.337 81.4473 278.599 81.5703 278.046 81.5703 cv
277.679 81.5703 277.557 81.7559 277.557 81.9395 cv
277.557 82.3086 277.863 82.4316 278.54 82.4316 cv
280.381 82.4316 284.252 82.2461 284.558 82.2461 cv
284.867 82.2461 288.736 82.4316 292.115 82.4316 cv
292.791 82.4316 293.098 82.2461 293.098 81.9395 cv
293.098 81.7559 292.974 81.5703 292.606 81.5703 cv
292.052 81.5703 290.703 81.4473 289.841 81.3242 cv
287.999 81.0801 287.631 79.7285 287.445 77.9453 cv
287.138 75.3652 287.138 70.5127 287.138 64.6152 cv
287.138 53.8032 li
287.138 53.8032 li
cp
255.165 83.291 mo
258.48 83.291 261.797 82.5527 264.439 80.7109 cv
268.678 77.6992 269.66 73.0313 269.66 70.5127 cv
269.66 65.5977 267.939 61.7891 260.691 56.0762 cv
258.971 54.7246 li
253.075 50.1172 251.477 47.9048 251.477 44.4038 cv
251.477 39.9194 254.795 37.2778 259.033 37.2778 cv
264.686 37.2778 266.344 39.8574 266.713 40.5332 cv
267.08 41.209 267.449 42.8677 267.512 43.6055 cv
267.572 44.0962 267.635 44.4038 268.002 44.4038 cv
268.311 44.4038 268.434 43.9736 268.434 42.9902 cv
268.434 38.8135 268.678 36.7856 268.678 36.4795 cv
268.678 36.1719 268.555 36.0488 268.063 36.0488 cv
267.572 36.0488 267.08 35.9873 265.914 35.7417 cv
264.377 35.373 262.596 35.1274 260.201 35.1274 cv
252.399 35.1274 247.485 39.6118 247.485 46.1851 cv
247.485 50.3628 248.959 54.1714 255.471 59.5161 cv
258.234 61.7891 li
263.518 66.1504 265.299 68.6074 265.299 72.8477 cv
265.299 76.7793 262.412 81.0176 256.514 81.0176 cv
252.399 81.0176 248.344 79.2969 247.422 74.752 cv
247.239 73.8906 247.239 73.0313 247.239 72.4785 cv
247.239 71.9863 247.176 71.8027 246.809 71.8027 cv
246.5 71.8027 246.377 72.1113 246.317 72.7852 cv
246.256 73.7695 246.01 76.2246 246.01 79.2969 cv
246.01 80.957 246.073 81.2031 246.932 81.6328 cv
249.45 82.8613 252.276 83.291 255.165 83.291 cv
255.165 83.291 li
cp
175.229 64.6152 mo
175.229 70.5127 175.229 75.3652 174.923 77.9453 cv
174.677 79.7285 174.37 81.0801 173.141 81.3242 cv
172.588 81.4473 171.851 81.5703 171.298 81.5703 cv
170.93 81.5703 170.807 81.7559 170.807 81.9395 cv
170.807 82.3086 171.113 82.4316 171.789 82.4316 cv
172.71 82.4316 174.124 82.3086 175.352 82.3086 cv
176.643 82.2461 177.687 82.2461 177.81 82.2461 cv
178.731 82.2461 180.206 82.3086 182.602 82.4316 cv
184.998 82.4922 188.376 82.6152 192.983 82.6152 cv
195.379 82.6152 195.871 82.6152 196.301 81.0176 cv
196.608 79.7285 197.099 75.5508 197.099 75.0586 cv
197.099 74.6289 197.099 74.1367 196.731 74.1367 cv
196.423 74.1367 196.301 74.3828 196.178 75.0586 cv
195.748 77.5781 195.011 78.8066 193.414 79.4824 cv
191.816 80.1582 189.114 80.1582 187.517 80.1582 cv
181.496 80.1582 180.574 79.3594 180.39 75.1211 cv
180.329 73.8301 180.39 66.7031 180.39 64.6152 cv
180.39 59.209 li
180.39 58.9634 180.513 58.7788 180.82 58.7788 cv
181.864 58.7788 187.946 58.9014 189.605 59.0859 cv
192.001 59.3315 192.554 60.376 192.8 61.2363 cv
193.045 62.0352 193.045 62.6484 193.045 63.2637 cv
193.045 63.5703 193.168 63.8164 193.476 63.8164 cv
193.905 63.8164 193.905 63.1406 193.905 62.6484 cv
193.905 62.2188 194.027 59.9458 194.15 58.7178 cv
194.335 56.6899 194.643 55.646 194.643 55.2773 cv
194.643 54.9082 194.52 54.7852 194.335 54.7852 cv
194.089 54.7852 193.844 55.0928 193.414 55.584 cv
192.86 56.1992 192.001 56.3218 190.526 56.4443 cv
189.114 56.5674 181.558 56.5674 180.759 56.5674 cv
180.451 56.5674 180.39 56.3828 180.39 55.9531 cv
180.39 38.998 li
180.39 38.5679 180.513 38.3833 180.759 38.3833 cv
181.435 38.3833 188.13 38.4448 189.175 38.5679 cv
192.492 38.936 193.106 39.6738 193.536 40.6563 cv
193.844 41.394 193.905 42.438 193.905 42.8677 cv
193.905 43.3599 194.027 43.666 194.397 43.666 cv
194.643 43.666 194.765 43.2979 194.826 42.9902 cv
194.949 42.2534 195.073 39.5503 195.134 38.936 cv
195.318 37.2163 195.625 36.4795 195.625 36.0488 cv
195.625 35.7417 195.564 35.4961 195.379 35.4961 cv
195.073 35.4961 194.826 35.7417 194.52 35.8032 cv
194.027 35.9263 193.045 36.0488 191.878 36.1099 cv
190.465 36.1719 178.24 36.1719 177.81 36.1719 cv
175.292 36.0488 li
173.939 35.9873 172.281 35.9873 170.868 35.9873 cv
170.192 35.9873 169.885 36.1099 169.885 36.4795 cv
169.885 36.7246 170.131 36.8477 170.376 36.8477 cv
170.93 36.8477 171.974 36.9087 172.465 37.0322 cv
174.493 37.4614 174.984 38.4448 175.106 40.5332 cv
175.229 42.499 175.229 44.2192 175.229 53.8032 cv
175.229 64.6152 li
175.229 64.6152 li
cp
132.678 43.4824 mo
131.757 41.0864 131.019 39.1816 131.019 38.3833 cv
131.019 37.9536 131.142 37.4614 131.818 37.1553 cv
132.371 36.9087 133.477 36.8477 134.153 36.8477 cv
134.582 36.8477 134.767 36.7246 134.767 36.4175 cv
134.767 36.1099 134.214 35.9873 133.108 35.9873 cv
130.773 35.9873 128.009 36.1719 127.395 36.1719 cv
126.658 36.1719 123.156 35.9873 120.208 35.9873 cv
119.224 35.9873 118.61 36.0488 118.61 36.4175 cv
118.61 36.6631 118.733 36.8477 119.101 36.8477 cv
119.471 36.8477 120.515 36.8477 121.437 37.0933 cv
123.586 37.707 124.508 38.3833 125.859 41.8232 cv
140.91 79.4824 li
142.077 82.4316 142.384 83.291 143.122 83.291 cv
143.735 83.291 143.981 82.3086 145.701 78.6211 cv
147.115 75.6113 149.879 68.9766 153.627 60.0078 cv
156.76 52.4512 159.832 45.0796 160.507 43.3599 cv
162.166 39.1816 163.087 38.1377 163.886 37.5845 cv
165.053 36.8477 166.404 36.8477 166.834 36.8477 cv
167.326 36.8477 167.571 36.7246 167.571 36.4175 cv
167.571 36.1099 167.203 35.9873 166.527 35.9873 cv
164.746 35.9873 162.104 36.1719 161.735 36.1719 cv
160.999 36.1719 158.172 35.9873 155.715 35.9873 cv
154.732 35.9873 154.364 36.1099 154.364 36.4795 cv
154.364 36.7856 154.671 36.8477 155.04 36.8477 cv
155.715 36.8477 156.637 36.8477 157.374 37.0933 cv
157.988 37.4009 158.172 38.0146 158.172 38.5059 cv
158.172 39.0591 157.927 39.9194 157.619 40.8408 cv
156.269 45.2637 148.036 66.7031 144.473 74.9355 cv
132.678 43.4824 li
132.678 43.4824 li
cp
339.006 75.6738 mo
337.898 78.7441 336.671 81.0801 333.844 81.4473 cv
333.353 81.5098 332.495 81.5703 332.062 81.5703 cv
331.756 81.5703 331.509 81.6934 331.509 81.9395 cv
331.509 82.3086 331.878 82.4316 332.677 82.4316 cv
335.565 82.4316 338.944 82.2461 339.62 82.2461 cv
340.294 82.2461 342.937 82.4316 344.411 82.4316 cv
344.965 82.4316 345.332 82.3086 345.332 81.9395 cv
345.332 81.6934 345.148 81.5703 344.719 81.5703 cv
344.103 81.5703 li
343.058 81.5703 341.769 81.0176 341.769 79.7891 cv
341.769 78.6836 342.076 77.209 342.631 75.6738 cv
346.316 64.7988 li
346.44 64.4922 346.624 64.3066 346.929 64.3066 cv
360.138 64.3066 li
360.445 64.3066 360.569 64.4316 360.69 64.6768 cv
366.404 79.7891 li
366.772 80.7715 366.404 81.3242 366.036 81.4473 cv
365.79 81.5098 365.606 81.6328 365.606 81.877 cv
365.606 82.2461 366.282 82.2461 367.447 82.3086 cv
371.687 82.4316 376.171 82.4316 377.094 82.4316 cv
377.767 82.4316 378.322 82.3086 378.322 81.9395 cv
378.322 81.6328 378.076 81.5703 377.707 81.5703 cv
377.094 81.5703 376.171 81.5098 375.25 81.2031 cv
373.958 80.834 372.177 79.8496 369.966 74.3828 cv
366.219 65.0449 356.574 39.6738 355.653 37.3389 cv
354.916 35.4351 354.671 35.1274 354.3 35.1274 cv
353.933 35.1274 353.687 35.4961 352.951 37.5234 cv
339.006 75.6738 li
339.006 75.6738 li
cp
347.606 62.0957 mo
347.421 62.0957 347.298 61.9727 347.421 61.666 cv
352.828 45.0796 li
353.134 44.1582 353.441 44.1582 353.749 45.0796 cv
359.583 61.666 li
359.647 61.9121 359.647 62.0957 359.34 62.0957 cv
347.606 62.0957 li
347.606 62.0957 li
cp
362.519 41.6953 mo
364.179 41.6953 365.223 40.4668 365.223 38.8691 cv
365.223 37.334 364.057 36.4126 362.582 36.4126 cv
360.677 36.4126 359.94 37.9478 359.94 39.0537 cv
359.94 40.2212 360.677 41.6953 362.519 41.6953 cv
362.519 41.6953 li
cp
346.759 41.6953 mo
348.417 41.6953 349.462 40.4668 349.462 38.8691 cv
349.462 37.334 348.294 36.4126 346.82 36.4126 cv
344.916 36.4126 344.179 37.9478 344.179 39.0537 cv
344.179 40.2212 344.916 41.6953 346.759 41.6953 cv
346.759 41.6953 li
cp
111.326 53.8032 mo
111.326 44.2192 111.326 42.499 111.449 40.5332 cv
111.572 38.3833 112.063 37.3389 113.721 37.0322 cv
114.459 36.9087 114.828 36.8477 115.258 36.8477 cv
115.503 36.8477 115.749 36.7246 115.749 36.4795 cv
115.749 36.1099 115.441 35.9873 114.766 35.9873 cv
112.923 35.9873 109.053 36.1719 108.746 36.1719 cv
108.438 36.1719 104.568 35.9873 102.542 35.9873 cv
101.865 35.9873 101.558 36.1099 101.558 36.4795 cv
101.558 36.7246 101.804 36.8477 102.049 36.8477 cv
102.479 36.8477 103.278 36.9087 103.954 37.0933 cv
105.306 37.4009 105.919 38.4448 106.042 40.5332 cv
106.165 42.499 106.165 44.2192 106.165 53.8032 cv
106.165 64.6152 li
106.165 70.5127 106.165 75.3652 105.859 77.9453 cv
105.613 79.7285 105.306 81.0801 104.077 81.3242 cv
103.523 81.4473 102.787 81.5703 102.234 81.5703 cv
101.865 81.5703 101.743 81.7559 101.743 81.9395 cv
101.743 82.3086 102.049 82.4316 102.725 82.4316 cv
104.568 82.4316 108.438 82.2461 108.746 82.2461 cv
109.053 82.2461 112.923 82.4316 116.302 82.4316 cv
116.978 82.4316 117.284 82.2461 117.284 81.9395 cv
117.284 81.7559 117.162 81.5703 116.793 81.5703 cv
116.24 81.5703 114.889 81.4473 114.029 81.3242 cv
112.186 81.0801 111.817 79.7285 111.633 77.9453 cv
111.326 75.3652 111.326 70.5127 111.326 64.6152 cv
111.326 53.8032 li
111.326 53.8032 li
cp
55.4888 44.6494 mo
57.4546 46.8608 64.3843 54.6016 71.499 62.2813 cv
78 69.2832 86.8311 78.3145 87.5059 78.9297 cv
90.77 82.1855 91.5132 82.8613 92.0083 82.8613 cv
92.4424 82.8613 92.5659 82.5527 92.5659 78.498 cv
92.6885 42.499 li
92.6885 38.8135 92.9341 37.4614 94.9619 37.0322 cv
95.6987 36.8477 96.1289 36.8477 96.4365 36.8477 cv
96.8657 36.8477 97.1123 36.6631 97.1123 36.4175 cv
97.1123 36.0488 96.6821 35.9873 96.0059 35.9873 cv
93.4873 35.9873 91.4512 36.1719 90.77 36.1719 cv
90.0884 36.1719 87.1377 35.9873 84.3779 35.9873 cv
83.6421 35.9873 83.1519 36.0488 83.1519 36.4175 cv
83.1519 36.6631 83.2129 36.8477 83.6421 36.8477 cv
84.1333 36.8477 85.543 36.9087 86.6475 37.1553 cv
88.5483 37.6465 88.9775 38.998 89.0396 42.9902 cv
89.7173 74.1992 li
87.7515 72.1719 81.0664 64.6768 74.9946 58.1646 cv
65.5498 48.0278 56.4121 38.1377 55.4888 37.0933 cv
54.8691 36.4795 53.8164 35.1274 53.3218 35.1274 cv
52.8267 35.1274 52.6411 35.8032 52.6411 38.1992 cv
52.5791 73.4004 li
52.5791 78.9902 52.272 80.7715 50.7354 81.2031 cv
49.814 81.5098 48.7085 81.5703 48.2168 81.5703 cv
47.9102 81.5703 47.7256 81.6934 47.7256 81.9395 cv
47.7256 82.3691 48.0938 82.4316 48.7085 82.4316 cv
51.4731 82.4316 54.0649 82.2461 54.6216 82.2461 cv
55.1787 82.2461 57.6382 82.4316 61.1348 82.4316 cv
61.8706 82.4316 62.2378 82.3086 62.2378 81.9395 cv
62.2378 81.6934 62.0542 81.5703 61.7476 81.5703 cv
61.1953 81.5703 59.8467 81.5098 58.6816 81.2031 cv
57.0254 80.7109 56.4121 79.1133 56.2896 74.0762 cv
55.4888 44.6494 li
55.4888 44.6494 li
cp
5.34424 62.7715 mo
5.34424 71.7402 7.6792 76.041 10.689 78.9297 cv
15.0503 83.0449 21.2549 83.291 23.3438 83.291 cv
26.9683 83.291 31.5757 82.6777 35.999 78.7441 cv
40.9136 74.3828 41.6504 67.0107 41.6504 60.376 cv
41.6504 53.8032 li
41.6504 44.2192 41.6504 42.499 41.7734 40.5332 cv
41.896 38.3833 42.3882 37.4009 44.0464 37.0322 cv
44.7832 36.9087 45.1528 36.8477 45.582 36.8477 cv
45.8286 36.8477 46.0742 36.7246 46.0742 36.4795 cv
46.0742 36.1099 45.7666 35.9873 45.0908 35.9873 cv
43.248 35.9873 40.3608 36.1719 39.9307 36.1719 cv
39.562 36.1719 36.1831 35.9873 33.4185 35.9873 cv
32.7427 35.9873 32.436 36.1099 32.436 36.4795 cv
32.436 36.7246 32.6816 36.8477 32.9272 36.8477 cv
33.4805 36.8477 34.5244 36.9087 35.0156 37.0322 cv
37.0435 37.4614 37.5347 38.4448 37.6572 40.5332 cv
37.7803 42.499 37.7803 44.2192 37.7803 53.8032 cv
37.7803 61.4824 li
37.7803 67.8096 37.0435 73.0313 34.2173 76.5332 cv
32.0059 79.1738 28.3203 80.957 24.5723 80.957 cv
21.0713 80.957 18.3062 80.4023 15.2964 77.5781 cv
12.6548 75.0586 10.689 71.25 10.689 62.4033 cv
10.689 53.8032 li
10.689 44.2192 10.689 42.499 10.812 40.5332 cv
10.9346 38.3833 11.4258 37.2778 13.085 37.0322 cv
13.8218 36.9087 14.1909 36.8477 14.6201 36.8477 cv
14.8657 36.8477 15.1123 36.7246 15.1123 36.4795 cv
15.1123 36.1099 14.8047 35.9873 14.1289 35.9873 cv
12.2861 35.9873 8.60059 36.1719 8.04736 36.1719 cv
7.49414 36.1719 3.74658 35.9873 .982422 35.9873 cv
.306641 35.9873 0 36.1099 0 36.4795 cv
0 36.7246 .245605 36.8477 .491211 36.8477 cv
1.04443 36.8477 2.08838 36.9087 2.57959 37.0322 cv
4.60742 37.4614 5.09814 38.4448 5.22119 40.5332 cv
5.34424 42.499 5.34424 44.2192 5.34424 53.8032 cv
5.34424 62.7715 li
5.34424 62.7715 li
cp
224.932 61.4629 mo
231.342 59.7051 235.659 54.3535 235.659 47.0923 cv
235.659 43.7529 233.895 40.9185 232.508 39.5957 cv
231.5 38.6509 228.665 36.0044 220.792 36.0044 cv
217.893 36.0044 212.547 36.1982 210.879 36.1982 cv
210.157 36.1982 206.703 36.0142 203.941 36.0142 cv
203.266 36.0142 202.959 36.1367 202.959 36.5059 cv
202.959 36.7515 203.205 36.874 203.45 36.874 cv
204.003 36.874 205.046 36.9351 205.538 37.0586 cv
207.565 37.4878 208.055 38.4707 208.178 40.5576 cv
208.301 42.5225 208.301 44.2417 208.301 53.8203 cv
208.301 64.627 li
208.301 70.5215 208.301 75.373 207.995 77.9492 cv
207.749 79.7324 207.44 81.082 206.213 81.3281 cv
205.66 81.4512 204.924 81.5742 204.371 81.5742 cv
204.003 81.5742 203.88 81.7578 203.88 81.9414 cv
203.88 82.3105 204.187 82.4336 204.862 82.4336 cv
206.703 82.4336 210.573 82.248 210.633 82.248 cv
210.94 82.248 214.809 82.4336 218.186 82.4336 cv
218.862 82.4336 219.168 82.248 219.168 81.9414 cv
219.168 81.7578 219.045 81.5742 218.676 81.5742 cv
218.124 81.5742 216.774 81.4512 215.915 81.3281 cv
214.073 81.082 213.704 79.7324 213.52 77.9492 cv
213.211 75.373 213.211 70.5215 213.211 64.627 cv
213.211 63.1523 li
213.211 62.8457 213.334 62.6621 213.643 62.6621 cv
219.6 62.7539 li
219.969 62.7539 220.293 62.8984 220.411 63.1523 cv
221.344 65.1924 222.635 68.6377 224.491 72.4434 cv
227.026 77.6406 227.465 79.9453 230.106 81.3574 cv
231.702 82.2168 233.375 82.4336 236.813 82.4336 cv
239.772 82.4336 li
240.877 82.4336 241.247 82.3105 241.247 81.9414 cv
241.247 81.7578 241 81.5645 240.694 81.5742 cv
240.086 81.5898 239.069 81.418 237.905 81.2129 cv
236.909 81.0371 234.002 80.332 232.209 76.9688 cv
229.965 72.7637 227.381 66.6445 224.932 61.4629 cv
224.932 61.4629 li
cp
107.713 98.127 mo
107.713 96.4707 106.487 95.4297 104.894 95.4297 cv
103.362 95.4297 102.443 96.5938 102.443 98.0645 cv
102.443 99.9648 103.975 100.697 105.078 100.697 cv
106.242 100.697 107.713 99.9648 107.713 98.127 cv
107.713 98.127 li
cp
107.713 110.441 mo
107.713 108.785 106.487 107.744 104.894 107.744 cv
103.362 107.744 102.443 108.908 102.443 110.381 cv
102.443 112.279 103.975 113.016 105.078 113.016 cv
106.242 113.016 107.713 112.279 107.713 110.441 cv
107.713 110.441 li
cp
85.8101 121.268 mo
85.8101 130.213 88.1387 134.502 91.1411 137.381 cv
95.4912 141.486 101.68 141.73 103.763 141.73 cv
107.378 141.73 111.973 141.119 116.385 137.197 cv
121.287 132.848 122.022 125.494 122.022 118.877 cv
122.022 112.322 li
122.022 102.764 122.022 101.049 122.145 99.0859 cv
122.267 96.9414 122.757 95.9629 124.412 95.5957 cv
125.146 95.4727 125.515 95.4102 125.943 95.4102 cv
126.188 95.4102 126.434 95.2891 126.434 95.043 cv
126.434 94.6758 126.127 94.5527 125.453 94.5527 cv
123.615 94.5527 120.735 94.7363 120.306 94.7363 cv
119.938 94.7363 116.568 94.5527 113.811 94.5527 cv
113.137 94.5527 112.831 94.6758 112.831 95.043 cv
112.831 95.2891 113.076 95.4102 113.321 95.4102 cv
113.873 95.4102 114.915 95.4727 115.404 95.5957 cv
117.426 96.0234 117.917 97.0039 118.039 99.0859 cv
118.162 101.049 118.162 102.764 118.162 112.322 cv
118.162 119.98 li
118.162 126.291 117.426 131.5 114.608 134.992 cv
112.402 137.627 108.726 139.402 104.988 139.402 cv
101.496 139.402 98.7383 138.854 95.7363 136.033 cv
93.1016 133.521 91.1411 129.723 91.1411 120.898 cv
91.1411 112.322 li
91.1411 102.764 91.1411 101.049 91.2632 99.0859 cv
91.3857 96.9414 91.876 95.8398 93.5308 95.5957 cv
94.2656 95.4727 94.6338 95.4102 95.062 95.4102 cv
95.3071 95.4102 95.5527 95.2891 95.5527 95.043 cv
95.5527 94.6758 95.2461 94.5527 94.5723 94.5527 cv
92.7339 94.5527 89.0581 94.7363 88.5063 94.7363 cv
87.9546 94.7363 84.2168 94.5527 81.4595 94.5527 cv
80.7856 94.5527 80.48 94.6758 80.48 95.043 cv
80.48 95.2891 80.7251 95.4102 80.9697 95.4102 cv
81.5215 95.4102 82.563 95.4727 83.0527 95.5957 cv
85.0752 96.0234 85.5649 97.0039 85.6875 99.0859 cv
85.8101 101.049 85.8101 102.764 85.8101 112.322 cv
85.8101 121.268 li
85.8101 121.268 li
cp
60.0176 97.1934 mo
67.7231 97.3164 li
73.5947 97.4395 75.0625 98.8477 75.2456 100.686 cv
75.3076 101.359 li
75.3701 102.219 75.4956 102.4 75.8086 102.4 cv
76.0591 102.4 76.2471 102.156 76.2471 101.604 cv
76.2471 100.932 76.4351 96.7031 76.4351 94.8652 cv
76.4351 94.498 76.4351 94.1309 76.1216 94.1309 cv
75.8711 94.1309 75.3076 94.3145 74.3892 94.4355 cv
73.4111 94.6191 72.0044 94.7422 70.0474 94.7422 cv
47.0884 94.7422 li
46.3535 94.7422 44.0254 94.6191 42.248 94.4355 cv
40.5942 94.3145 39.981 93.7012 39.5527 93.7012 cv
39.3071 93.7012 39.062 94.498 38.9395 94.8652 cv
38.8169 95.3555 37.5913 100.625 37.5913 101.236 cv
37.5913 101.604 37.7139 101.789 37.8979 101.789 cv
38.1431 101.789 38.3271 101.666 38.5103 101.176 cv
38.6943 100.748 38.8789 100.318 39.5527 99.2773 cv
40.5327 97.8066 42.0034 97.377 45.8018 97.3164 cv
54.8706 97.1934 li
54.8706 123.109 li
54.8706 128.994 54.8706 133.834 54.564 136.406 cv
54.3193 138.186 54.0127 139.531 52.7866 139.777 cv
52.2363 139.898 51.5005 140.021 50.9487 140.021 cv
50.5811 140.021 50.459 140.207 50.459 140.391 cv
50.459 140.758 50.7656 140.881 51.4395 140.881 cv
53.2778 140.881 57.1372 140.695 57.4438 140.695 cv
57.7505 140.695 61.6069 140.881 64.9707 140.881 cv
65.644 140.881 65.9497 140.695 65.9497 140.391 cv
65.9497 140.207 65.8271 140.021 65.4609 140.021 cv
64.9102 140.021 63.5645 139.898 62.708 139.777 cv
60.873 139.531 60.5063 138.186 60.3232 136.406 cv
60.0176 133.834 60.0176 128.994 60.0176 123.109 cv
60.0176 97.1934 li
60.0176 97.1934 li
cp
331.897 103.197 mo
333.857 105.402 340.769 113.125 347.865 120.781 cv
354.349 127.768 363.157 136.775 363.83 137.387 cv
367.085 140.635 367.826 141.309 368.32 141.309 cv
368.753 141.309 368.877 141.004 368.877 136.959 cv
369 101.053 li
369 97.377 369.245 96.0293 371.267 95.6016 cv
372.002 95.416 372.432 95.416 372.738 95.416 cv
373.166 95.416 373.411 95.2324 373.411 94.9883 cv
373.411 94.6191 372.982 94.5586 372.308 94.5586 cv
369.796 94.5586 367.765 94.7422 367.085 94.7422 cv
366.407 94.7422 363.462 94.5586 360.71 94.5586 cv
359.977 94.5586 359.488 94.6191 359.488 94.9883 cv
359.488 95.2324 359.548 95.416 359.977 95.416 cv
360.466 95.416 361.874 95.4785 362.973 95.7227 cv
364.87 96.2129 365.296 97.5605 365.359 101.543 cv
366.036 132.67 li
364.076 130.646 357.407 123.174 351.352 116.678 cv
341.932 106.566 332.819 96.7031 331.897 95.6621 cv
331.279 95.0488 330.228 93.7012 329.734 93.7012 cv
329.242 93.7012 329.057 94.375 329.057 96.7656 cv
328.995 131.873 li
328.995 137.449 328.687 139.227 327.157 139.654 cv
326.236 139.961 325.134 140.021 324.642 140.021 cv
324.337 140.021 324.153 140.145 324.153 140.391 cv
324.153 140.818 324.522 140.881 325.134 140.881 cv
327.89 140.881 330.477 140.695 331.032 140.695 cv
331.587 140.695 334.041 140.881 337.528 140.881 cv
338.261 140.881 338.627 140.758 338.627 140.391 cv
338.627 140.145 338.445 140.021 338.138 140.021 cv
337.587 140.021 336.245 139.961 335.08 139.654 cv
333.429 139.166 332.819 137.57 332.695 132.549 cv
331.897 103.197 li
331.897 103.197 li
cp
296.124 123.109 mo
296.124 128.994 296.124 133.834 295.816 136.406 cv
295.572 138.186 295.265 139.531 294.04 139.777 cv
293.488 139.898 292.752 140.021 292.201 140.021 cv
291.833 140.021 291.71 140.207 291.71 140.391 cv
291.71 140.758 292.017 140.881 292.691 140.881 cv
293.609 140.881 295.019 140.758 296.245 140.758 cv
297.532 140.695 298.574 140.695 298.697 140.695 cv
299.615 140.695 301.085 140.758 303.477 140.881 cv
305.865 140.939 309.234 141.063 313.83 141.063 cv
316.219 141.063 316.71 141.063 317.138 139.471 cv
317.445 138.186 317.936 134.018 317.936 133.527 cv
317.936 133.1 317.936 132.607 317.569 132.607 cv
317.261 132.607 317.138 132.854 317.015 133.527 cv
316.587 136.039 315.852 137.266 314.259 137.939 cv
312.666 138.613 309.97 138.613 308.377 138.613 cv
302.374 138.613 301.453 137.816 301.269 133.59 cv
301.208 132.303 301.269 125.193 301.269 123.109 cv
301.269 117.719 li
301.269 117.475 301.392 117.291 301.697 117.291 cv
302.74 117.291 308.807 117.412 310.46 117.598 cv
312.849 117.842 313.403 118.883 313.647 119.74 cv
313.892 120.537 313.892 121.15 313.892 121.764 cv
313.892 122.068 314.013 122.314 314.32 122.314 cv
314.749 122.314 314.749 121.641 314.749 121.15 cv
314.749 120.723 314.871 118.453 314.995 117.229 cv
315.177 115.207 315.484 114.166 315.484 113.799 cv
315.484 113.43 315.363 113.307 315.177 113.307 cv
314.933 113.307 314.687 113.613 314.259 114.104 cv
313.707 114.719 312.849 114.84 311.378 114.963 cv
309.97 115.086 302.433 115.086 301.636 115.086 cv
301.33 115.086 301.269 114.9 301.269 114.473 cv
301.269 97.5605 li
301.269 97.1328 301.392 96.9492 301.636 96.9492 cv
302.312 96.9492 308.99 97.0098 310.032 97.1328 cv
313.34 97.5 313.953 98.2363 314.381 99.2148 cv
314.687 99.9512 314.749 100.992 314.749 101.42 cv
314.749 101.91 314.871 102.219 315.24 102.219 cv
315.484 102.219 315.607 101.85 315.667 101.543 cv
315.791 100.809 315.915 98.1113 315.974 97.5 cv
316.158 95.7852 316.465 95.0488 316.465 94.6191 cv
316.465 94.3145 316.404 94.0684 316.219 94.0684 cv
315.915 94.0684 315.667 94.3145 315.363 94.375 cv
314.871 94.498 313.892 94.6191 312.728 94.6816 cv
311.319 94.7422 299.125 94.7422 298.697 94.7422 cv
296.183 94.6191 li
294.835 94.5586 293.182 94.5586 291.772 94.5586 cv
291.098 94.5586 290.792 94.6816 290.792 95.0488 cv
290.792 95.2949 291.037 95.416 291.282 95.416 cv
291.833 95.416 292.875 95.4785 293.365 95.6016 cv
295.386 96.0293 295.877 97.0098 296 99.0938 cv
296.124 101.053 296.124 102.77 296.124 112.326 cv
296.124 123.109 li
296.124 123.109 li
cp
276.943 135.668 mo
276.943 136.709 276.514 137.383 275.719 137.813 cv
274.125 138.73 270.939 139.1 268.734 139.1 cv
263.098 139.1 257.521 137.262 252.682 132.543 cv
250.536 130.459 246.186 124.211 246.186 115.57 cv
246.186 108.402 248.698 102.826 252.252 100.008 cv
256.908 96.332 261.504 95.9648 265.363 95.9648 cv
273.268 95.9648 278.23 98.5977 279.763 100.928 cv
280.682 102.396 280.988 104.111 281.048 104.971 cv
281.109 105.521 281.171 105.891 281.478 105.891 cv
281.907 105.891 282.029 105.584 282.029 104.604 cv
282.029 98.4766 282.458 96.7617 282.458 95.9023 cv
282.458 95.6563 282.335 95.4121 281.723 95.3496 cv
280.191 95.291 278.046 95.0449 276.76 94.7383 cv
275.596 94.4941 271.246 93.6973 267.385 93.6973 cv
262.668 93.6973 256.602 94.127 251.088 97.5566 cv
245.635 100.988 240.856 107.91 240.856 117.715 cv
240.856 125.375 244.409 131.93 248.147 135.178 cv
254.948 141.119 263.648 141.732 268.305 141.732 cv
271.859 141.732 277.374 141.061 281.294 138.977 cv
282.029 138.547 282.09 138.424 282.09 135.668 cv
282.09 128.805 li
282.09 126.23 282.09 124.395 282.212 122.434 cv
282.335 120.289 282.826 119.246 284.48 118.939 cv
285.215 118.818 285.583 118.756 286.011 118.756 cv
286.256 118.756 286.502 118.635 286.502 118.389 cv
286.502 118.021 286.198 117.898 285.522 117.898 cv
283.683 117.898 279.824 118.082 279.517 118.082 cv
279.21 118.082 275.352 117.898 272.594 117.898 cv
271.92 117.898 271.613 118.021 271.613 118.389 cv
271.613 118.635 271.859 118.756 272.104 118.756 cv
272.654 118.756 273.697 118.818 274.188 118.939 cv
276.637 119.613 276.943 120.289 276.943 125.252 cv
276.943 135.668 li
276.943 135.668 li
cp
195.759 103.197 mo
197.72 105.402 204.632 113.125 211.727 120.781 cv
218.211 127.768 227.02 136.775 227.692 137.387 cv
230.948 140.635 231.69 141.309 232.182 141.309 cv
232.616 141.309 232.739 141.004 232.739 136.959 cv
232.862 101.053 li
232.862 97.377 233.106 96.0293 235.129 95.6016 cv
235.864 95.416 236.293 95.416 236.6 95.416 cv
237.028 95.416 237.274 95.2324 237.274 94.9883 cv
237.274 94.6191 236.844 94.5586 236.17 94.5586 cv
233.659 94.5586 231.627 94.7422 230.948 94.7422 cv
230.268 94.7422 227.325 94.5586 224.573 94.5586 cv
223.838 94.5586 223.35 94.6191 223.35 94.9883 cv
223.35 95.2324 223.411 95.416 223.838 95.416 cv
224.329 95.416 225.735 95.4785 226.836 95.7227 cv
228.733 96.2129 229.161 97.5605 229.223 101.543 cv
229.897 132.67 li
227.938 130.646 221.27 123.174 215.213 116.678 cv
205.794 106.566 196.68 96.7031 195.759 95.6621 cv
195.141 95.0488 194.091 93.7012 193.597 93.7012 cv
193.104 93.7012 192.919 94.375 192.919 96.7656 cv
192.857 131.873 li
192.857 137.449 192.55 139.227 191.018 139.654 cv
190.099 139.961 188.997 140.021 188.506 140.021 cv
188.2 140.021 188.016 140.145 188.016 140.391 cv
188.016 140.818 188.383 140.881 188.997 140.881 cv
191.754 140.881 194.339 140.695 194.894 140.695 cv
195.45 140.695 197.903 140.881 201.39 140.881 cv
202.124 140.881 202.491 140.758 202.491 140.391 cv
202.491 140.145 202.307 140.021 202.001 140.021 cv
201.451 140.021 200.105 139.961 198.943 139.654 cv
197.292 139.166 196.68 137.57 196.558 132.549 cv
195.759 103.197 li
195.759 103.197 li
cp
177.204 112.326 mo
177.204 102.77 177.204 101.053 177.327 99.0938 cv
177.45 96.9492 177.939 95.9063 179.593 95.6016 cv
180.329 95.4785 180.696 95.416 181.125 95.416 cv
181.371 95.416 181.616 95.2949 181.616 95.0488 cv
181.616 94.6816 181.309 94.5586 180.635 94.5586 cv
178.797 94.5586 174.938 94.7422 174.631 94.7422 cv
174.324 94.7422 170.464 94.5586 168.442 94.5586 cv
167.768 94.5586 167.462 94.6816 167.462 95.0488 cv
167.462 95.2949 167.707 95.416 167.952 95.416 cv
168.381 95.416 169.177 95.4785 169.851 95.6621 cv
171.2 95.9688 171.812 97.0098 171.934 99.0938 cv
172.057 101.053 172.057 102.77 172.057 112.326 cv
172.057 123.109 li
172.057 128.994 172.057 133.834 171.751 136.406 cv
171.506 138.186 171.2 139.531 169.974 139.777 cv
169.422 139.898 168.688 140.021 168.136 140.021 cv
167.768 140.021 167.646 140.207 167.646 140.391 cv
167.646 140.758 167.952 140.881 168.625 140.881 cv
170.464 140.881 174.324 140.695 174.631 140.695 cv
174.938 140.695 178.797 140.881 182.167 140.881 cv
182.841 140.881 183.147 140.695 183.147 140.391 cv
183.147 140.207 183.024 140.021 182.657 140.021 cv
182.105 140.021 180.758 139.898 179.9 139.777 cv
178.062 139.531 177.694 138.186 177.51 136.406 cv
177.204 133.834 177.204 128.994 177.204 123.109 cv
177.204 112.326 li
177.204 112.326 li
cp
136.265 123.109 mo
136.265 128.994 136.265 133.834 135.959 136.406 cv
135.714 138.186 135.407 139.531 134.182 139.777 cv
133.63 139.898 132.895 140.021 132.343 140.021 cv
131.976 140.021 131.854 140.207 131.854 140.391 cv
131.854 140.758 132.159 140.881 132.833 140.881 cv
133.752 140.881 135.162 140.758 136.387 140.758 cv
137.674 140.695 138.716 140.695 138.838 140.695 cv
139.083 140.695 140.799 140.758 142.576 140.881 cv
144.353 140.939 146.313 141.063 146.987 141.063 cv
157.465 141.063 162.612 134.264 162.612 127.707 cv
162.612 120.537 156.546 116.188 152.012 114.777 cv
154.891 111.775 157.771 108.773 157.771 103.75 cv
157.771 100.686 155.565 94.5586 145.517 94.5586 cv
142.699 94.5586 140.309 94.7422 138.838 94.7422 cv
138.532 94.7422 134.671 94.5586 131.914 94.5586 cv
131.24 94.5586 130.935 94.6816 130.935 95.0488 cv
130.935 95.2949 131.18 95.416 131.424 95.416 cv
131.976 95.416 133.018 95.4785 133.507 95.6016 cv
135.53 96.0293 136.02 97.0098 136.142 99.0938 cv
136.265 101.053 136.265 102.77 136.265 112.326 cv
136.265 123.109 li
136.265 123.109 li
cp
141.167 97.2539 mo
141.167 96.8867 141.351 96.7031 141.902 96.5801 cv
142.882 96.3359 144.169 96.2734 144.843 96.2734 cv
150.848 96.2734 153.115 101.729 153.115 106.813 cv
153.115 109.324 152.196 111.531 150.909 113.002 cv
149.622 114.473 148.765 114.596 145.333 114.596 cv
143.066 114.596 141.963 114.41 141.596 114.35 cv
141.289 114.227 141.167 114.104 141.167 113.676 cv
141.167 97.2539 li
141.167 97.2539 li
cp
141.167 116.678 mo
141.167 116.371 141.289 116.248 141.535 116.248 cv
142.454 116.248 145.517 116.248 146.313 116.371 cv
147.784 116.557 149.316 116.738 151.399 118.148 cv
156.117 121.396 157.343 126.727 157.343 130.402 cv
157.343 137.326 152.012 139.104 148.703 139.104 cv
147.601 139.104 144.966 138.98 143.311 138.186 cv
141.411 137.266 141.411 136.406 141.228 133.404 cv
141.167 132.484 141.167 124.889 141.167 120.17 cv
141.167 116.678 li
141.167 116.678 li
cp
112.615 14.7051 mo
112.615 17.6465 112.615 20.0664 112.462 21.353 cv
112.34 22.2417 112.186 22.916 111.573 23.0381 cv
111.297 23.0996 110.93 23.1606 110.654 23.1606 cv
110.471 23.1606 110.409 23.2529 110.409 23.3442 cv
110.409 23.5288 110.563 23.5898 110.899 23.5898 cv
111.359 23.5898 112.064 23.5288 112.676 23.5288 cv
113.32 23.498 113.841 23.498 113.902 23.498 cv
114.361 23.498 115.097 23.5288 116.292 23.5898 cv
117.486 23.6201 119.171 23.6816 121.469 23.6816 cv
122.664 23.6816 122.909 23.6816 123.123 22.8848 cv
123.276 22.2417 123.521 20.1587 123.521 19.9131 cv
123.521 19.6992 123.521 19.4536 123.338 19.4536 cv
123.184 19.4536 123.123 19.5762 123.062 19.9131 cv
122.847 21.1694 122.48 21.7822 121.683 22.1191 cv
120.887 22.4565 119.539 22.4565 118.742 22.4565 cv
115.74 22.4565 115.28 22.0581 115.188 19.9443 cv
115.158 19.3008 115.188 15.7466 115.188 14.7051 cv
115.188 12.0093 li
115.188 11.8867 115.25 11.7949 115.403 11.7949 cv
115.924 11.7949 118.957 11.856 119.784 11.9482 cv
120.979 12.0708 121.254 12.5913 121.377 13.0205 cv
121.5 13.4189 121.5 13.7251 121.5 14.0313 cv
121.5 14.1846 121.561 14.3071 121.714 14.3071 cv
121.928 14.3071 121.928 13.9697 121.928 13.7251 cv
121.928 13.5103 121.989 12.377 122.051 11.7646 cv
122.143 10.7534 122.296 10.2324 122.296 10.0488 cv
122.296 9.86475 122.235 9.80322 122.143 9.80322 cv
122.021 9.80322 121.898 9.95654 121.683 10.2017 cv
121.408 10.5083 120.979 10.5693 120.244 10.6309 cv
119.539 10.6919 115.771 10.6919 115.373 10.6919 cv
115.219 10.6919 115.188 10.6001 115.188 10.3857 cv
115.188 1.93018 li
115.188 1.71582 115.25 1.62354 115.373 1.62354 cv
115.709 1.62354 119.049 1.6543 119.569 1.71582 cv
121.224 1.89941 121.53 2.26709 121.745 2.75732 cv
121.898 3.125 121.928 3.646 121.928 3.85986 cv
121.928 4.10547 121.989 4.2583 122.174 4.2583 cv
122.296 4.2583 122.357 4.07471 122.388 3.92139 cv
122.449 3.55371 122.511 2.20557 122.541 1.89941 cv
122.633 1.0415 122.786 .674316 122.786 .459473 cv
122.786 .306152 122.755 .183594 122.664 .183594 cv
122.511 .183594 122.388 .306152 122.235 .336914 cv
121.989 .398438 121.5 .459473 120.917 .490234 cv
120.213 .520996 114.116 .520996 113.902 .520996 cv
112.646 .459473 li
111.972 .428711 111.145 .428711 110.44 .428711 cv
110.103 .428711 109.95 .490234 109.95 .674316 cv
109.95 .796875 110.072 .85791 110.195 .85791 cv
110.471 .85791 110.991 .888184 111.236 .950195 cv
112.248 1.16406 112.492 1.6543 112.554 2.6958 cv
112.615 3.67627 112.615 4.53418 112.615 9.31348 cv
112.615 14.7051 li
112.615 14.7051 li
cp
76.1816 14.7051 mo
76.1816 17.6465 76.1816 20.0664 76.0288 21.353 cv
75.9063 22.2417 75.7529 22.916 75.1401 23.0381 cv
74.8643 23.0996 74.4966 23.1606 74.2207 23.1606 cv
74.0371 23.1606 73.9761 23.2529 73.9761 23.3442 cv
73.9761 23.5288 74.1289 23.5898 74.4658 23.5898 cv
74.9253 23.5898 75.6304 23.5288 76.2427 23.5288 cv
76.8862 23.498 77.4072 23.498 77.4683 23.498 cv
77.9277 23.498 78.6631 23.5288 79.8579 23.5898 cv
81.0527 23.6201 82.7378 23.6816 85.0352 23.6816 cv
86.23 23.6816 86.4756 23.6816 86.6895 22.8848 cv
86.8428 22.2417 87.0879 20.1587 87.0879 19.9131 cv
87.0879 19.6992 87.0879 19.4536 86.9043 19.4536 cv
86.751 19.4536 86.6895 19.5762 86.6284 19.9131 cv
86.4136 21.1694 86.0464 21.7822 85.25 22.1191 cv
84.4531 22.4565 83.1055 22.4565 82.3091 22.4565 cv
79.3066 22.4565 78.8472 22.0581 78.7549 19.9443 cv
78.7246 19.3008 78.7549 15.7466 78.7549 14.7051 cv
78.7549 12.0093 li
78.7549 11.8867 78.8164 11.7949 78.9692 11.7949 cv
79.4902 11.7949 82.5229 11.856 83.3506 11.9482 cv
84.5454 12.0708 84.8213 12.5913 84.9438 13.0205 cv
85.0659 13.4189 85.0659 13.7251 85.0659 14.0313 cv
85.0659 14.1846 85.1274 14.3071 85.2808 14.3071 cv
85.4946 14.3071 85.4946 13.9697 85.4946 13.7251 cv
85.4946 13.5103 85.5562 12.377 85.6172 11.7646 cv
85.7095 10.7534 85.8628 10.2324 85.8628 10.0488 cv
85.8628 9.86475 85.8013 9.80322 85.7095 9.80322 cv
85.5869 9.80322 85.4644 9.95654 85.25 10.2017 cv
84.9741 10.5083 84.5454 10.5693 83.8101 10.6309 cv
83.1055 10.6919 79.3374 10.6919 78.939 10.6919 cv
78.7856 10.6919 78.7549 10.6001 78.7549 10.3857 cv
78.7549 1.93018 li
78.7549 1.71582 78.8164 1.62354 78.939 1.62354 cv
79.2759 1.62354 82.6152 1.6543 83.1362 1.71582 cv
84.7905 1.89941 85.0967 2.26709 85.311 2.75732 cv
85.4644 3.125 85.4946 3.646 85.4946 3.85986 cv
85.4946 4.10547 85.5562 4.2583 85.7402 4.2583 cv
85.8628 4.2583 85.9238 4.07471 85.9541 3.92139 cv
86.0156 3.55371 86.0771 2.20557 86.1074 1.89941 cv
86.1997 1.0415 86.3525 .674316 86.3525 .459473 cv
86.3525 .306152 86.3223 .183594 86.23 .183594 cv
86.0771 .183594 85.9541 .306152 85.8013 .336914 cv
85.5562 .398438 85.0659 .459473 84.4839 .490234 cv
83.7793 .520996 77.6831 .520996 77.4683 .520996 cv
76.2124 .459473 li
75.5381 .428711 74.7114 .428711 74.0063 .428711 cv
73.6694 .428711 73.5166 .490234 73.5166 .674316 cv
73.5166 .796875 73.6387 .85791 73.7612 .85791 cv
74.0371 .85791 74.5581 .888184 74.8027 .950195 cv
75.814 1.16406 76.0591 1.6543 76.1201 2.6958 cv
76.1816 3.67627 76.1816 4.53418 76.1816 9.31348 cv
76.1816 14.7051 li
76.1816 14.7051 li
cp
93.6338 14.7051 mo
93.6338 17.6465 93.6338 20.0664 93.481 21.353 cv
93.3584 22.2417 93.2051 22.916 92.5923 23.0381 cv
92.3164 23.0996 91.9492 23.1606 91.6733 23.1606 cv
91.4897 23.1606 91.4287 23.2529 91.4287 23.3442 cv
91.4287 23.5288 91.5811 23.5898 91.9185 23.5898 cv
92.3779 23.5898 93.083 23.5288 93.6953 23.5288 cv
94.3389 23.498 94.8594 23.498 94.9209 23.498 cv
95.0435 23.498 95.9009 23.5288 96.7896 23.5898 cv
97.6782 23.6201 98.6582 23.6816 98.9951 23.6816 cv
104.234 23.6816 106.808 20.2813 106.808 17.0029 cv
106.808 13.4189 103.775 11.2437 101.507 10.5386 cv
102.947 9.0376 104.388 7.53662 104.388 5.02441 cv
104.388 3.49268 103.284 .428711 98.2598 .428711 cv
96.8511 .428711 95.6563 .520996 94.9209 .520996 cv
94.7676 .520996 92.8374 .428711 91.459 .428711 cv
91.1216 .428711 90.9688 .490234 90.9688 .674316 cv
90.9688 .796875 91.0913 .85791 91.2139 .85791 cv
91.4897 .85791 92.0103 .888184 92.2554 .950195 cv
93.2666 1.16406 93.5117 1.6543 93.5728 2.6958 cv
93.6338 3.67627 93.6338 4.53418 93.6338 9.31348 cv
93.6338 14.7051 li
93.6338 14.7051 li
cp
96.085 1.77686 mo
96.085 1.59326 96.1768 1.50098 96.4526 1.43994 cv
96.9424 1.31738 97.5864 1.28662 97.9229 1.28662 cv
100.925 1.28662 102.059 4.01318 102.059 6.55615 cv
102.059 7.8125 101.6 8.91504 100.956 9.65039 cv
100.313 10.3857 99.8838 10.4473 98.1685 10.4473 cv
97.0347 10.4473 96.4829 10.355 96.2993 10.3247 cv
96.146 10.2627 96.085 10.2017 96.085 9.9873 cv
96.085 1.77686 li
96.085 1.77686 li
cp
96.085 11.4888 mo
96.085 11.3354 96.146 11.2739 96.269 11.2739 cv
96.7285 11.2739 98.2598 11.2739 98.6582 11.3354 cv
99.3936 11.4272 100.16 11.519 101.201 12.2241 cv
103.56 13.8477 104.173 16.5127 104.173 18.3511 cv
104.173 21.813 101.507 22.7012 99.853 22.7012 cv
99.3018 22.7012 97.9844 22.6401 97.1572 22.2417 cv
96.2075 21.7822 96.2075 21.353 96.1157 19.8521 cv
96.085 19.3926 96.085 15.5938 96.085 13.2344 cv
96.085 11.4888 li
96.085 11.4888 li
cp
166.893 9.31348 mo
166.893 4.53418 166.893 3.67627 166.954 2.6958 cv
167.015 1.62354 167.261 1.10303 168.087 .950195 cv
168.455 .888184 168.639 .85791 168.853 .85791 cv
168.976 .85791 169.099 .796875 169.099 .674316 cv
169.099 .490234 168.945 .428711 168.608 .428711 cv
167.689 .428711 165.759 .520996 165.606 .520996 cv
165.453 .520996 163.522 .428711 162.144 .428711 cv
161.807 .428711 161.654 .490234 161.654 .674316 cv
161.654 .796875 161.776 .85791 161.899 .85791 cv
162.175 .85791 162.696 .888184 162.94 .950195 cv
163.952 1.16406 164.197 1.6543 164.258 2.6958 cv
164.319 3.67627 164.319 4.53418 164.319 9.31348 cv
164.319 9.95654 li
164.319 10.1099 164.228 10.1406 164.135 10.1406 cv
151.146 10.1406 li
151.054 10.1406 150.962 10.1099 150.962 9.95654 cv
150.962 9.31348 li
150.962 4.53418 150.962 3.67627 151.023 2.6958 cv
151.084 1.62354 151.33 1.10303 152.157 .950195 cv
152.524 .888184 152.708 .85791 152.923 .85791 cv
153.045 .85791 153.168 .796875 153.168 .674316 cv
153.168 .490234 153.014 .428711 152.677 .428711 cv
151.758 .428711 149.829 .520996 149.675 .520996 cv
149.522 .520996 147.592 .428711 146.213 .428711 cv
145.876 .428711 145.724 .490234 145.724 .674316 cv
145.724 .796875 145.846 .85791 145.968 .85791 cv
146.244 .85791 146.765 .888184 147.01 .950195 cv
148.021 1.16406 148.266 1.6543 148.327 2.6958 cv
148.388 3.67627 148.388 4.53418 148.388 9.31348 cv
148.388 14.7051 li
148.388 17.6465 148.388 20.0664 148.235 21.353 cv
148.113 22.2417 147.959 22.916 147.347 23.0381 cv
147.071 23.0996 146.704 23.1606 146.428 23.1606 cv
146.244 23.1606 146.183 23.2529 146.183 23.3442 cv
146.183 23.5288 146.336 23.5898 146.673 23.5898 cv
147.592 23.5898 149.522 23.498 149.675 23.498 cv
149.829 23.498 151.758 23.5898 153.443 23.5898 cv
153.781 23.5898 153.934 23.498 153.934 23.3442 cv
153.934 23.2529 153.872 23.1606 153.688 23.1606 cv
153.413 23.1606 152.739 23.0996 152.31 23.0381 cv
151.391 22.916 151.207 22.2417 151.115 21.353 cv
150.962 20.0664 150.962 17.6465 150.962 14.7051 cv
150.962 11.4888 li
150.962 11.3354 151.054 11.3047 151.146 11.3047 cv
164.135 11.3047 li
164.228 11.3047 164.319 11.3662 164.319 11.4888 cv
164.319 14.7051 li
164.319 17.6465 164.319 20.0664 164.166 21.353 cv
164.043 22.2417 163.891 22.916 163.278 23.0381 cv
163.002 23.0996 162.634 23.1606 162.358 23.1606 cv
162.175 23.1606 162.114 23.2529 162.114 23.3442 cv
162.114 23.5288 162.267 23.5898 162.604 23.5898 cv
163.522 23.5898 165.453 23.498 165.606 23.498 cv
165.759 23.498 167.689 23.5898 169.375 23.5898 cv
169.711 23.5898 169.864 23.498 169.864 23.3442 cv
169.864 23.2529 169.803 23.1606 169.619 23.1606 cv
169.343 23.1606 168.669 23.0996 168.241 23.0381 cv
167.322 22.916 167.138 22.2417 167.046 21.353 cv
166.893 20.0664 166.893 17.6465 166.893 14.7051 cv
166.893 9.31348 li
166.893 9.31348 li
cp
205.009 13.127 mo
208.208 12.2495 210.36 9.57959 210.36 5.95654 cv
210.36 4.29004 209.481 2.87598 208.79 2.21582 cv
208.286 1.74463 206.872 .423828 202.942 .423828 cv
201.497 .423828 198.829 .520508 197.998 .520508 cv
197.637 .520508 195.914 .428711 194.535 .428711 cv
194.198 .428711 194.045 .490234 194.045 .674316 cv
194.045 .796875 194.168 .85791 194.29 .85791 cv
194.566 .85791 195.087 .888184 195.332 .950195 cv
196.343 1.16406 196.588 1.6543 196.649 2.6958 cv
196.71 3.67627 196.71 4.53418 196.71 9.31348 cv
196.71 14.7051 li
196.71 17.6465 196.71 20.0664 196.558 21.353 cv
196.435 22.2417 196.282 22.916 195.669 23.0381 cv
195.393 23.0996 195.025 23.1606 194.75 23.1606 cv
194.566 23.1606 194.505 23.2529 194.505 23.3442 cv
194.505 23.5288 194.658 23.5898 194.995 23.5898 cv
195.914 23.5898 197.844 23.498 197.875 23.498 cv
198.027 23.498 199.958 23.5898 201.643 23.5898 cv
201.98 23.5898 202.133 23.498 202.133 23.3442 cv
202.133 23.2529 202.072 23.1606 201.888 23.1606 cv
201.612 23.1606 200.938 23.0996 200.509 23.0381 cv
199.59 22.916 199.407 22.2417 199.314 21.353 cv
199.161 20.0664 199.161 17.6465 199.161 14.7051 cv
199.161 13.9697 li
199.161 13.8169 199.222 13.7251 199.375 13.7251 cv
202.349 13.771 li
202.532 13.771 202.695 13.8433 202.753 13.9697 cv
203.218 14.9878 203.862 16.7065 204.789 18.605 cv
206.054 21.1992 206.272 22.3486 207.59 23.0527 cv
208.385 23.4819 209.221 23.5898 210.938 23.5898 cv
212.415 23.5898 li
212.965 23.5898 213.149 23.5288 213.149 23.3442 cv
213.149 23.2529 213.026 23.1567 212.874 23.1606 cv
212.571 23.1689 212.063 23.0835 211.481 22.981 cv
210.985 22.8931 209.536 22.541 208.639 20.8633 cv
207.52 18.7651 206.231 15.7124 205.009 13.127 cv
205.009 13.127 li
cp
201.458 1.40918 mo
202.404 1.39844 204.483 1.24121 206.148 2.93848 cv
207.815 4.63623 207.909 6.74219 207.909 7.7793 cv
207.909 10.6709 205.534 12.8364 202.485 12.8364 cv
201.226 12.8364 199.835 12.6221 199.375 12.3462 cv
199.222 12.2544 199.161 12.1318 199.161 11.9785 cv
199.161 1.96094 li
199.161 1.77686 199.253 1.6543 199.407 1.59326 cv
199.713 1.50098 200.54 1.41943 201.458 1.40918 cv
201.458 1.40918 li
cp
219.215 8.82324 mo
219.215 6.46436 219.215 3.33936 219.247 2.29785 cv
219.247 1.96094 219.338 1.80762 219.614 1.68506 cv
219.86 1.5625 220.993 1.4707 221.606 1.4707 cv
225.25 1.4707 228.743 1.89941 231.624 4.93213 cv
232.879 6.24951 234.565 8.76172 234.565 12.6528 cv
234.565 15.4712 233.706 18.4121 232.114 19.9746 cv
230.305 21.7822 227.67 22.8237 224.823 22.8237 cv
221.208 22.8237 220.012 22.1807 219.614 21.5986 cv
219.37 21.2612 219.307 20.0356 219.278 19.27 cv
219.247 18.688 219.215 15.8696 219.215 12.6221 cv
219.215 8.82324 li
219.215 8.82324 li
cp
216.643 14.7051 mo
216.643 17.6465 216.643 20.0664 216.489 21.353 cv
216.368 22.2417 216.213 22.916 215.6 23.0381 cv
215.325 23.0996 214.958 23.1606 214.682 23.1606 cv
214.499 23.1606 214.436 23.2529 214.436 23.3442 cv
214.436 23.5288 214.59 23.5898 214.926 23.5898 cv
215.385 23.5898 216.09 23.5288 216.704 23.5288 cv
217.346 23.498 217.868 23.498 217.928 23.498 cv
218.083 23.498 219.124 23.5898 220.471 23.6816 cv
221.79 23.7734 223.413 23.8652 224.731 23.8652 cv
229.938 23.8652 232.696 21.7207 234.012 20.3423 cv
235.727 18.5347 237.321 15.563 237.321 11.7031 cv
237.321 8.05762 235.881 5.51465 234.35 3.92139 cv
230.704 .15332 225.098 .428711 222.065 .428711 cv
220.227 .428711 218.297 .520996 217.928 .520996 cv
217.776 .520996 215.844 .428711 214.467 .428711 cv
214.129 .428711 213.977 .490234 213.977 .674316 cv
213.977 .796875 214.1 .85791 214.221 .85791 cv
214.499 .85791 215.018 .888184 215.264 .950195 cv
216.274 1.16406 216.52 1.6543 216.581 2.6958 cv
216.643 3.67627 216.643 4.53418 216.643 9.31348 cv
216.643 14.7051 li
216.643 14.7051 li
cp
137.104 13.127 mo
140.302 12.2495 142.456 9.57959 142.456 5.95654 cv
142.456 4.29004 141.576 2.87598 140.885 2.21582 cv
140.382 1.74463 138.967 .423828 135.038 .423828 cv
133.592 .423828 130.924 .520508 130.093 .520508 cv
129.732 .520508 128.009 .428711 126.63 .428711 cv
126.293 .428711 126.141 .490234 126.141 .674316 cv
126.141 .796875 126.263 .85791 126.386 .85791 cv
126.661 .85791 127.182 .888184 127.427 .950195 cv
128.438 1.16406 128.683 1.6543 128.745 2.6958 cv
128.806 3.67627 128.806 4.53418 128.806 9.31348 cv
128.806 14.7051 li
128.806 17.6465 128.806 20.0664 128.653 21.353 cv
128.53 22.2417 128.377 22.916 127.764 23.0381 cv
127.488 23.0996 127.121 23.1606 126.845 23.1606 cv
126.661 23.1606 126.6 23.2529 126.6 23.3442 cv
126.6 23.5288 126.753 23.5898 127.09 23.5898 cv
128.009 23.5898 129.939 23.498 129.97 23.498 cv
130.123 23.498 132.053 23.5898 133.738 23.5898 cv
134.075 23.5898 134.228 23.498 134.228 23.3442 cv
134.228 23.2529 134.167 23.1606 133.983 23.1606 cv
133.708 23.1606 133.033 23.0996 132.604 23.0381 cv
131.686 22.916 131.502 22.2417 131.41 21.353 cv
131.257 20.0664 131.257 17.6465 131.257 14.7051 cv
131.257 13.9697 li
131.257 13.8169 131.318 13.7251 131.471 13.7251 cv
134.444 13.771 li
134.628 13.771 134.791 13.8433 134.848 13.9697 cv
135.313 14.9878 135.958 16.7065 136.884 18.605 cv
138.149 21.1992 138.368 22.3486 139.686 23.0527 cv
140.482 23.4819 141.317 23.5898 143.033 23.5898 cv
144.509 23.5898 li
145.061 23.5898 145.245 23.5288 145.245 23.3442 cv
145.245 23.2529 145.122 23.1567 144.969 23.1606 cv
144.666 23.1689 144.158 23.0835 143.577 22.981 cv
143.08 22.8931 141.63 22.541 140.735 20.8633 cv
139.616 18.7651 138.327 15.7124 137.104 13.127 cv
137.104 13.127 li
cp
133.554 1.40918 mo
134.5 1.39844 136.579 1.24121 138.244 2.93848 cv
139.911 4.63623 140.004 6.74219 140.004 7.7793 cv
140.004 10.6709 137.629 12.8364 134.581 12.8364 cv
133.321 12.8364 131.931 12.6221 131.471 12.3462 cv
131.318 12.2544 131.257 12.1318 131.257 11.9785 cv
131.257 1.96094 li
131.257 1.77686 131.349 1.6543 131.502 1.59326 cv
131.808 1.50098 132.635 1.41943 133.554 1.40918 cv
133.554 1.40918 li
cp
178.475 13.4492 mo
178.383 13.4492 178.322 13.3877 178.383 13.2344 cv
181.08 4.96338 li
181.232 4.50391 181.386 4.50391 181.539 4.96338 cv
184.449 13.2344 li
184.48 13.3574 184.48 13.4492 184.327 13.4492 cv
178.475 13.4492 li
178.475 13.4492 li
cp
174.187 20.2197 mo
173.635 21.7515 173.022 22.916 171.613 23.0996 cv
171.368 23.1304 170.939 23.1606 170.724 23.1606 cv
170.571 23.1606 170.449 23.2217 170.449 23.3442 cv
170.449 23.5288 170.633 23.5898 171.031 23.5898 cv
172.471 23.5898 174.155 23.498 174.493 23.498 cv
174.83 23.498 176.147 23.5898 176.882 23.5898 cv
177.158 23.5898 177.342 23.5288 177.342 23.3442 cv
177.342 23.2217 177.25 23.1606 177.036 23.1606 cv
176.729 23.1606 li
176.208 23.1606 175.565 22.8848 175.565 22.2725 cv
175.565 21.7207 175.718 20.9854 175.994 20.2197 cv
177.832 14.7974 li
177.893 14.644 177.985 14.5518 178.138 14.5518 cv
184.725 14.5518 li
184.878 14.5518 184.939 14.6138 185 14.7358 cv
187.85 22.2725 li
188.034 22.7627 187.85 23.0381 187.666 23.0996 cv
187.544 23.1304 187.452 23.1914 187.452 23.314 cv
187.452 23.498 187.789 23.498 188.371 23.5288 cv
190.484 23.5898 192.721 23.5898 193.18 23.5898 cv
193.518 23.5898 193.793 23.5288 193.793 23.3442 cv
193.793 23.1914 193.671 23.1606 193.487 23.1606 cv
193.18 23.1606 192.721 23.1304 192.261 22.9771 cv
191.618 22.7935 190.729 22.3027 189.626 19.5762 cv
187.758 14.9199 182.948 2.26709 182.488 1.10303 cv
182.121 .15332 181.999 0 181.814 0 cv
181.631 0 181.508 .183594 181.141 1.19482 cv
174.187 20.2197 li
174.187 20.2197 li
cp
272.764 13.4492 mo
272.672 13.4492 272.611 13.3877 272.672 13.2344 cv
275.369 4.96338 li
275.521 4.50342 275.676 4.50342 275.828 4.96338 cv
278.738 13.2344 li
278.769 13.3574 278.769 13.4492 278.615 13.4492 cv
272.764 13.4492 li
272.764 13.4492 li
cp
271.172 23.5898 mo
271.447 23.5898 271.631 23.5283 271.631 23.3442 cv
271.631 23.2217 271.539 23.1606 271.324 23.1606 cv
271.018 23.1606 li
270.498 23.1606 269.854 22.8848 269.854 22.2725 cv
269.854 21.7207 270.008 20.9854 270.283 20.2197 cv
272.121 14.7974 li
272.184 14.644 272.273 14.5518 272.428 14.5518 cv
279.013 14.5518 li
279.167 14.5518 279.228 14.6133 279.29 14.7358 cv
282.138 22.2725 li
282.323 22.7622 282.138 23.0381 281.955 23.0996 cv
281.833 23.1304 281.74 23.1914 281.74 23.314 cv
281.74 23.4976 282.078 23.4976 282.661 23.5283 cv
284.773 23.5898 287.01 23.5898 287.469 23.5898 cv
287.807 23.5898 288.082 23.5283 288.082 23.3442 cv
288.082 23.1914 287.958 23.1606 287.778 23.1606 cv
287.469 23.1606 287.01 23.1304 286.55 22.9771 cv
285.907 22.7935 285.017 22.3027 283.916 19.5762 cv
282.046 14.9199 277.238 2.26709 276.777 1.10254 cv
276.41 .15332 276.287 0 276.104 0 cv
275.92 0 275.797 .183594 275.43 1.19482 cv
268.477 20.2197 li
268.018 21.4907 267.518 22.5083 266.557 22.9233 cv
265.758 22.6543 264.963 22.0469 263.951 20.9121 cv
261.648 18.3247 256.863 12.2178 255.727 10.6621 cv
256.372 9.89551 261.736 4.65625 262.502 3.92139 cv
263.881 2.604 264.555 1.83789 265.813 1.28662 cv
266.424 1.01123 267.068 .85791 267.527 .85791 cv
267.771 .85791 267.834 .796875 267.834 .643555 cv
267.834 .490234 267.711 .428711 267.373 .428711 cv
266.607 .428711 264.586 .520996 264.434 .520996 cv
263.697 .520996 262.748 .428711 262.135 .428711 cv
261.922 .428711 261.768 .490234 261.768 .643555 cv
261.768 .765625 261.889 .827148 262.043 .888184 cv
262.289 .980469 262.441 1.16406 262.441 1.53174 cv
262.441 2.05273 261.645 2.84912 260.787 3.7373 cv
259.684 4.93213 254.139 10.5693 253.62 11.1514 cv
253.497 9.31348 li
253.497 4.53418 253.497 3.67627 253.557 2.6958 cv
253.62 1.62354 253.864 1.10254 254.69 .949707 cv
255.059 .888184 255.243 .85791 255.458 .85791 cv
255.581 .85791 255.702 .796875 255.702 .674316 cv
255.702 .490234 255.549 .428711 255.211 .428711 cv
254.293 .428711 252.516 .520996 252.241 .520996 cv
252.057 .520996 250.249 .428711 248.87 .428711 cv
248.534 .428711 248.379 .490234 248.379 .674316 cv
248.379 .796875 248.502 .85791 248.625 .85791 cv
248.901 .85791 249.422 .888184 249.667 .949707 cv
250.678 1.16406 250.922 1.6543 250.985 2.6958 cv
251.045 3.67627 251.045 4.53418 251.045 9.31348 cv
251.045 14.7051 li
251.045 17.6465 251.045 20.0664 250.893 21.353 cv
250.77 22.2417 250.618 22.9155 250.002 23.0381 cv
249.727 23.0996 249.36 23.1606 249.084 23.1606 cv
248.901 23.1606 248.84 23.2529 248.84 23.3442 cv
248.84 23.5283 248.993 23.5898 249.331 23.5898 cv
250.249 23.5898 252.026 23.4976 252.272 23.4976 cv
252.516 23.4976 254.293 23.5898 255.793 23.5898 cv
256.131 23.5898 256.284 23.4976 256.284 23.3442 cv
256.284 23.2529 256.223 23.1606 256.04 23.1606 cv
255.764 23.1606 255.272 23.0996 254.844 23.0381 cv
253.926 22.9155 253.743 22.2417 253.649 21.353 cv
253.497 20.0664 253.497 17.6465 253.497 14.7051 cv
253.512 11.7256 li
254.202 12.6807 257.035 16.4609 258.91 18.8325 cv
260.539 20.896 261.758 22.3564 263.066 23.0757 cv
263.623 23.3813 263.91 23.5962 265.332 23.5962 cv
265.332 23.5962 267.346 23.4932 268.418 23.4932 cv
269.438 23.4932 270.436 23.5898 271.172 23.5898 cv
271.172 23.5898 li
cp
330.256 24.0186 mo
331.911 24.0186 333.565 23.6514 334.882 22.7319 cv
336.996 21.2305 337.486 18.9028 337.486 17.6465 cv
337.486 15.1958 336.628 13.2964 333.013 10.4473 cv
332.157 9.77295 li
329.215 7.47559 328.417 6.37207 328.417 4.62598 cv
328.417 2.38965 330.072 1.07275 332.187 1.07275 cv
335.006 1.07275 335.832 2.35889 336.015 2.6958 cv
336.199 3.0332 336.382 3.85986 336.415 4.22803 cv
336.445 4.47266 336.477 4.62598 336.661 4.62598 cv
336.812 4.62598 336.874 4.41162 336.874 3.92139 cv
336.874 1.83838 336.996 .827148 336.996 .674316 cv
336.996 .520996 336.936 .459473 336.69 .459473 cv
336.445 .459473 336.199 .428711 335.617 .306152 cv
334.852 .122559 333.962 0 332.767 0 cv
328.877 0 326.425 2.23633 326.425 5.51465 cv
326.425 7.59766 327.162 9.49707 330.411 12.1626 cv
331.79 13.2964 li
334.421 15.4712 335.311 16.6968 335.311 18.8105 cv
335.311 20.771 333.871 22.8848 330.929 22.8848 cv
328.877 22.8848 326.856 22.0273 326.397 19.7603 cv
326.304 19.3311 326.304 18.9028 326.304 18.627 cv
326.304 18.3813 326.273 18.2896 326.09 18.2896 cv
325.937 18.2896 325.875 18.4434 325.844 18.7798 cv
325.815 19.27 325.691 20.4951 325.691 22.0273 cv
325.691 22.8545 325.723 22.9771 326.15 23.1914 cv
327.407 23.8037 328.816 24.0186 330.256 24.0186 cv
330.256 24.0186 li
cp
314.661 9.31348 mo
314.661 4.53418 314.661 3.67627 314.723 2.6958 cv
314.783 1.62354 315.028 1.10303 315.916 .950195 cv
316.286 .888184 316.712 .85791 316.927 .85791 cv
317.05 .85791 317.171 .796875 317.171 .674316 cv
317.171 .490234 317.019 .428711 316.683 .428711 cv
315.763 .428711 313.528 .520996 313.374 .520996 cv
313.22 .520996 311.29 .428711 309.912 .428711 cv
309.574 .428711 309.421 .490234 309.421 .674316 cv
309.421 .796875 309.542 .85791 309.666 .85791 cv
309.944 .85791 310.462 .888184 310.708 .950195 cv
311.719 1.16406 311.965 1.6543 312.025 2.6958 cv
312.087 3.67627 312.087 4.53418 312.087 9.31348 cv
312.087 14.7051 li
312.087 17.6465 312.087 20.0664 311.933 21.353 cv
311.812 22.2417 311.658 22.916 311.044 23.0381 cv
310.769 23.0996 310.403 23.1606 310.127 23.1606 cv
309.944 23.1606 309.881 23.2529 309.881 23.3442 cv
309.881 23.5288 310.036 23.5898 310.371 23.5898 cv
310.83 23.5898 311.506 23.5591 312.117 23.5288 cv
312.73 23.5288 313.252 23.498 313.374 23.498 cv
314.261 23.498 315.212 23.5288 316.499 23.5898 cv
317.786 23.6201 319.378 23.6816 321.583 23.6816 cv
323.207 23.6816 323.3 23.5591 323.513 22.8545 cv
323.759 21.9658 323.973 20.1279 323.973 19.7905 cv
323.973 19.4536 323.944 19.3311 323.79 19.3311 cv
323.606 19.3311 323.544 19.4844 323.513 19.7295 cv
323.421 20.3115 323.115 21.0776 322.716 21.5674 cv
321.982 22.4565 320.634 22.4868 319.009 22.4868 cv
316.621 22.4868 315.824 22.2725 315.333 21.7822 cv
314.783 21.2305 314.661 19.27 314.661 14.7666 cv
314.661 9.31348 li
314.661 9.31348 li
cp
299.541 13.127 mo
302.738 12.2495 304.892 9.57959 304.892 5.95654 cv
304.892 4.29004 304.011 2.87598 303.32 2.21582 cv
302.819 1.74463 301.403 .423828 297.474 .423828 cv
296.028 .423828 293.361 .520508 292.529 .520508 cv
292.167 .520508 290.445 .428711 289.066 .428711 cv
288.73 .428711 288.576 .490234 288.576 .674316 cv
288.576 .796875 288.699 .85791 288.823 .85791 cv
289.098 .85791 289.62 .888184 289.863 .950195 cv
290.875 1.16406 291.12 1.6543 291.182 2.6958 cv
291.242 3.67627 291.242 4.53418 291.242 9.31348 cv
291.242 14.7051 li
291.242 17.6465 291.242 20.0664 291.09 21.353 cv
290.966 22.2417 290.812 22.916 290.201 23.0381 cv
289.923 23.0996 289.557 23.1606 289.282 23.1606 cv
289.098 23.1606 289.036 23.2529 289.036 23.3442 cv
289.036 23.5288 289.19 23.5898 289.528 23.5898 cv
290.445 23.5898 292.375 23.498 292.407 23.498 cv
292.558 23.498 294.488 23.5898 296.173 23.5898 cv
296.511 23.5898 296.665 23.498 296.665 23.3442 cv
296.665 23.2529 296.603 23.1606 296.419 23.1606 cv
296.142 23.1606 295.469 23.0996 295.041 23.0381 cv
294.121 22.916 293.937 22.2417 293.845 21.353 cv
293.694 20.0664 293.694 17.6465 293.694 14.7051 cv
293.694 13.9697 li
293.694 13.8169 293.753 13.7251 293.907 13.7251 cv
296.881 13.771 li
297.065 13.771 297.227 13.8433 297.286 13.9697 cv
297.75 14.9878 298.394 16.7065 299.32 18.605 cv
300.585 21.1992 300.804 22.3486 302.121 23.0527 cv
302.917 23.4819 303.752 23.5898 305.469 23.5898 cv
306.945 23.5898 li
307.496 23.5898 307.682 23.5288 307.682 23.3442 cv
307.682 23.2529 307.558 23.1567 307.404 23.1606 cv
307.102 23.1689 306.594 23.0835 306.013 22.981 cv
305.515 22.8931 304.066 22.541 303.171 20.8633 cv
302.05 18.7651 300.763 15.7124 299.541 13.127 cv
299.541 13.127 li
cp
295.99 1.40918 mo
296.936 1.39844 299.013 1.24121 300.679 2.93848 cv
302.348 4.63623 302.44 6.74219 302.44 7.7793 cv
302.44 10.6709 300.066 12.8364 297.017 12.8364 cv
295.757 12.8364 294.367 12.6221 293.907 12.3462 cv
293.753 12.2544 293.694 12.1318 293.694 11.9785 cv
293.694 1.96094 li
293.694 1.77686 293.786 1.6543 293.937 1.59326 cv
294.245 1.50098 295.07 1.41943 295.99 1.40918 cv
295.99 1.40918 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.35 1 .7 .1 cmyk
ef
531.582 59.772 mo
531.597 60.2246 531.695 60.5938 531.845 60.9121 cv
531.646 61.4824 531.55 61.9707 531.474 62.6895 cv
531.332 64.0234 531.408 64.8301 531.796 66.1152 cv
532.557 64.4883 li
532.626 61.9531 li
533.333 62.6543 534.203 63.2637 534.57 64.5586 cv
534.892 65.6992 534.751 67.1426 534.175 68.6309 cv
531.974 68.4883 530.462 67.748 529.818 65.8926 cv
529.281 64.3438 529.638 60.998 531.582 59.772 cv
531.582 59.772 li
cp
501.69 59.3374 mo
503.411 57.9917 506.381 58.0688 507.724 59.8413 cv
506.33 59.9009 504.923 60.6777 504.136 61.2285 cv
503.302 59.5356 li
501.69 59.3374 li
501.69 59.3374 li
cp
501.824 65.541 mo
500.265 64.2734 499.835 62.3105 500.724 60.5078 cv
502.046 60.8672 li
503.357 61.873 li
502.384 62.8359 501.944 64 501.824 65.541 cv
501.824 65.541 li
cp
510.671 13.0884 mo
511.582 14.3467 512.228 15.9009 512.824 17.7109 cv
511.414 16.9326 510.153 16.3403 508.911 15.9014 cv
510.671 13.0884 li
510.671 13.0884 li
cp
502.756 9.4248 mo
505.455 9.59131 507.371 10.208 508.807 11.2222 cv
508.97 12.5981 li
508.97 12.5981 508.259 14.4121 507.724 15.5269 cv
506.912 15.3008 506.09 15.1362 505.22 15.0239 cv
505.022 14.5215 504.8 14.0156 504.502 13.7007 cv
503.822 12.9849 503.345 12.6382 502.453 12.2124 cv
502.609 10.7764 li
502.756 9.4248 li
502.756 9.4248 li
cp
494.324 12.0757 mo
496.24 10.5498 498.561 9.50732 501.205 9.396 cv
500.986 10.5313 500.48 12.2529 500.249 12.791 cv
500.384 12.9312 501.041 14.0879 501.219 14.8335 cv
500.157 14.8491 499.187 14.9048 498.275 15.0103 cv
497.263 14.251 495.246 12.7568 494.324 12.0757 cv
494.324 12.0757 li
cp
490.259 16.9355 mo
491.062 15.5015 492.101 14.1113 493.353 12.9229 cv
494.023 13.2695 494.495 13.5962 495.157 14.1577 cv
495.661 14.585 495.966 14.8857 496.335 15.3286 cv
494.326 15.7661 492.5 16.5244 490.397 17.7349 cv
490.388 17.5977 490.37 17.46 490.337 17.2886 cv
490.259 16.9355 li
490.259 16.9355 li
cp
523.937 13.9067 mo
524.371 14.1914 524.585 14.4746 524.742 14.9658 cv
522.078 16.3384 520.453 17.6685 518.333 20.1289 cv
518.234 18.27 517.912 16.2373 518.841 14.1641 cv
519.263 13.9858 519.675 13.9155 520.23 13.9067 cv
520.906 13.8965 522.25 13.7354 522.587 13.5977 cv
523.087 13.3945 523.486 13.6108 523.937 13.9067 cv
523.937 13.9067 li
cp
526.521 9.2915 mo
527.106 9.24707 527.708 9.23486 528.326 9.24902 cv
531.447 9.32324 533.455 10.1416 535.738 12.271 cv
533.708 12.2476 532.087 12.3726 530.511 12.7275 cv
528.283 12.1611 li
526.521 9.2915 li
526.521 9.2915 li
cp
521.403 10.9785 mo
522.404 10.25 523.562 9.78564 524.837 9.52246 cv
525.324 9.88379 525.849 10.5479 526.13 10.8276 cv
526.796 11.4897 527.222 12.041 527.207 12.979 cv
527.201 13.3237 527.154 13.6118 527.054 13.875 cv
526.182 14.2642 li
525.775 13.7085 525.365 13.3491 524.695 12.9277 cv
524.215 12.6255 522.215 11.4546 521.403 10.9785 cv
521.403 10.9785 li
cp
527.606 24.0903 mo
526.275 24.5742 525.046 25.2114 523.91 26.0093 cv
523.462 24.4326 523.257 22.7876 523.62 22.6216 cv
524.537 22.4951 525.121 22.5718 525.976 22.9307 cv
526.705 23.2363 527.142 23.5425 527.606 24.0903 cv
527.606 24.0903 li
cp
533.025 22.9854 mo
531.583 23.0894 530.238 23.311 528.976 23.6548 cv
528.986 23.2212 528.978 22.8457 528.953 22.3125 cv
528.884 20.9629 528.783 20.1978 528.488 18.8794 cv
529.398 19.4219 529.89 19.7769 530.691 20.4702 cv
531.72 21.3608 532.32 21.998 533.025 22.9854 cv
533.025 22.9854 li
cp
540.851 23.7832 mo
539.44 23.3145 537.933 23.0439 536.287 22.9517 cv
536.298 22.3813 536.296 22.0078 536.283 21.3916 cv
536.257 20.4102 536.224 19.8564 536.128 18.8794 cv
536.888 19.0522 537.316 19.229 537.976 19.6455 cv
538.837 20.1899 539.25 20.6523 539.826 21.4946 cv
540.382 22.3096 540.638 22.876 540.851 23.7832 cv
540.851 23.7832 li
cp
544.759 18.6152 mo
547.812 21.2817 549.492 25.1929 548.326 28.8584 cv
546.837 27.272 545.345 26.0322 543.763 25.1055 cv
543.304 24.3193 543.134 23.6665 543.103 22.6733 cv
543.05 20.9624 543.566 19.6885 544.759 18.6152 cv
544.759 18.6152 li
cp
538.15 15.4014 mo
538.995 15.5918 539.837 15.8442 540.682 16.1646 cv
541.832 16.6016 542.912 17.1978 543.884 17.9146 cv
543.05 18.686 542.466 19.1655 541.474 19.9028 cv
541.031 20.2329 540.778 20.4131 540.318 20.7222 cv
539.392 19.5391 538.978 18.7412 538.542 17.3027 cv
538.32 16.5649 538.215 16.0776 538.15 15.4014 cv
538.15 15.4014 li
cp
527.724 15.9897 mo
530.568 15.0352 533.734 14.6602 536.97 15.1743 cv
536.271 15.4858 535.767 15.8613 535.14 16.501 cv
534.515 17.1387 534.273 17.606 533.851 18.3926 cv
533.507 19.0322 533.343 19.4136 533.115 20.1025 cv
531.759 19.1011 li
530.712 18.3291 530.083 17.9419 529.072 17.126 cv
528.525 16.686 528.177 16.3936 527.724 15.9897 cv
527.724 15.9897 li
cp
518.312 24.3447 mo
518.783 22.5342 519.667 20.8848 521.072 19.7026 cv
522.609 18.4072 524.451 17.2793 526.495 16.4468 cv
526.503 17.3433 526.597 17.9541 526.851 18.9019 cv
527.013 19.5049 527.191 19.8184 527.384 20.4121 cv
527.654 21.2451 527.792 21.7207 528.009 22.5698 cv
526.66 22.0913 525.875 21.874 524.474 21.5908 cv
523.519 21.3979 522.974 21.3145 522.005 21.2144 cv
521.955 21.6187 521.955 21.855 522.005 22.2598 cv
522.113 23.104 522.791 23.4297 522.83 24.2793 cv
522.851 24.7607 522.812 25.0469 522.654 25.502 cv
518.312 24.3447 li
518.312 24.3447 li
cp
518.476 32.0938 mo
518.146 30.9497 517.941 29.6787 517.896 28.3813 cv
519.34 28.7715 li
519.315 28.2852 519.294 28.0112 519.25 27.5269 cv
519.171 26.6558 519.107 26.1655 518.962 25.3027 cv
520.058 25.585 520.679 25.7314 521.785 25.9668 cv
522.462 26.1113 522.888 26.1973 523.496 26.3096 cv
521.576 27.7495 519.923 29.666 518.476 32.0938 cv
518.476 32.0938 li
cp
485.907 55.3657 mo
487.098 56.2729 487.82 56.731 489.15 57.4233 cv
490.351 58.0503 491.065 58.354 492.348 58.7896 cv
491.109 59.2368 490.34 59.3745 489.022 59.3853 cv
488.4 59.3892 488.046 59.3638 487.432 59.27 cv
487.432 59.27 485.937 57.5513 485.907 55.3657 cv
485.907 55.3657 li
cp
546.376 41.9702 mo
547.59 44.5278 547.748 47.5122 546.406 50.0493 cv
545.667 48.3149 544.312 46.0024 542.398 44.3364 cv
546.376 41.9702 li
546.376 41.9702 li
cp
539.271 36.2373 mo
539.705 36.3408 540.138 36.4702 540.574 36.6265 cv
542.634 37.3657 544.345 38.7744 545.533 40.5063 cv
545.304 40.8857 545.068 41.1851 544.701 41.583 cv
543.785 42.582 543.009 43.1563 541.771 43.8286 cv
541.576 43.6846 541.378 43.5474 541.175 43.4185 cv
541.156 42.4678 541.138 41.5552 540.923 40.604 cv
540.517 38.8042 540.109 37.7041 539.271 36.2373 cv
539.271 36.2373 li
cp
524.125 49.5415 mo
522.769 51.5688 521.69 53.8892 520.966 56.3423 cv
521.128 53.5444 521.638 50.9302 522.432 48.5688 cv
524.125 49.5415 li
524.125 49.5415 li
cp
530.648 43.4282 mo
528.32 44.6372 526.23 46.5718 524.529 48.9546 cv
522.833 47.4546 li
523.8 44.9517 525.091 42.7676 526.617 40.9922 cv
530.648 43.4282 li
530.648 43.4282 li
cp
538.992 42.4404 mo
536.84 41.8589 534.734 41.9463 532.757 42.5581 cv
532.199 41.8389 530.787 41.1919 530.787 41.1919 cv
530.246 40.9063 528.548 40.2314 527.607 39.9272 cv
529.12 38.4355 530.816 37.3169 532.625 36.6455 cv
533.087 36.873 533.433 37.1191 533.896 37.5244 cv
534.515 38.0693 534.822 38.4487 535.228 39.1675 cv
535.537 38.5103 535.699 38.1333 535.965 37.458 cv
536.203 36.8516 536.351 36.4399 536.521 35.9204 cv
536.953 35.917 537.388 35.9385 537.824 35.9863 cv
538.39 37.1675 539.08 38.8726 539.08 38.8726 cv
540.382 42.9707 li
539.94 42.751 539.476 42.5713 538.992 42.4404 cv
538.992 42.4404 li
cp
524.863 40.0093 mo
524.125 40.9531 523.517 41.9478 523.029 42.938 cv
522.495 44.02 522.019 45.1431 521.595 46.2544 cv
519.207 44.3462 li
519.871 43.1011 li
521.363 42.459 li
520.562 41.2144 li
521.261 40.7686 521.691 40.5581 522.47 40.2793 cv
523.136 40.042 523.529 39.7412 524.23 39.8364 cv
524.488 39.8721 524.66 39.917 524.863 40.0093 cv
524.863 40.0093 li
cp
545.164 37.2969 mo
544.646 36.894 li
543.843 36.2905 543.039 35.7915 542.226 35.3921 cv
542.182 34.7661 542.068 34.27 541.83 33.5684 cv
541.58 32.8389 541.384 32.437 540.96 31.7925 cv
540.748 32.5601 540.617 32.9902 540.363 33.7456 cv
540.076 34.5684 li
537.234 33.7803 534.278 34.1138 531.065 35.3643 cv
528.488 36.3662 526.517 37.9702 525.046 39.7803 cv
524.539 39.4834 524.238 39.2412 523.804 38.791 cv
523.238 38.2041 522.966 37.8032 522.63 37.0591 cv
523.5 36.7334 524.019 36.6025 524.937 36.4785 cv
525.628 36.3857 526.025 36.3662 526.72 36.3901 cv
526.667 35.8105 526.644 35.4829 526.609 34.9019 cv
526.572 34.3047 526.557 33.9673 526.537 33.3691 cv
527.388 33.3335 527.876 33.3633 528.716 33.502 cv
529.46 33.625 529.878 33.7339 530.587 33.9893 cv
530.808 33.4976 531.275 30.6753 531.316 30.3042 cv
531.712 30.6245 534.687 33.0337 535.25 33.1919 cv
535.246 32.5928 535.271 32.252 535.361 31.6597 cv
535.525 30.5942 535.707 29.9912 536.164 29.0151 cv
536.599 29.4746 536.826 29.7568 537.182 30.2817 cv
537.613 30.9175 538.279 32.5376 538.337 32.8823 cv
538.962 32.229 539.31 31.8564 539.919 31.1899 cv
540.515 30.5376 540.849 30.1665 541.429 29.502 cv
542.095 29.9868 543.222 31.4023 543.603 32.1318 cv
544.09 33.0649 545.021 36.7339 545.164 37.2969 cv
545.164 37.2969 li
cp
549.484 33.2695 mo
549.865 34.022 550.205 34.8223 550.511 35.6675 cv
551.824 39.2798 552.076 41.7109 549.837 45.4985 cv
549.466 43.2041 548.812 41.4341 547.687 39.8818 cv
547.705 39.124 547.792 38.418 547.965 37.48 cv
548.201 36.1899 548.908 34.5674 549.484 33.2695 cv
549.484 33.2695 li
cp
543.935 27.4595 mo
545.962 28.498 547.486 29.9814 548.671 31.8354 cv
548.465 32.2476 548.226 32.645 547.965 33.0151 cv
547.39 33.8262 546.974 34.2422 546.162 34.8135 cv
546.197 34.082 545.843 33.4243 545.636 32.7222 cv
545.382 31.8618 545.201 31.7495 544.849 30.9238 cv
544.296 29.6226 544.066 28.7656 543.935 27.4595 cv
543.935 27.4595 li
cp
535.841 25.6738 mo
537.578 25.6514 539.416 25.9087 541.41 26.4761 cv
541.984 26.6514 li
542.763 27.3447 li
541.904 27.8735 541.445 28.2285 540.716 28.9263 cv
539.966 29.645 539.583 30.104 539.007 30.9683 cv
538.269 29.8818 537.871 29.2554 537.205 28.1245 cv
536.638 27.1655 536.294 26.5518 535.841 25.6738 cv
535.841 25.6738 li
cp
518.476 41.2021 mo
518.517 40.8247 518.566 40.4434 518.62 40.0581 cv
519.039 37.0024 522.138 31.9326 525.403 29.4473 cv
525.861 29.54 526.234 29.6553 526.763 29.8564 cv
527.557 30.1577 527.992 30.3833 528.695 30.8574 cv
528.728 30.1572 528.724 29.7588 528.671 29.0591 cv
528.628 28.4614 528.583 28.0708 528.49 27.5645 cv
529.337 27.1348 530.19 26.7734 531.054 26.4854 cv
531.451 26.6694 531.787 26.875 532.23 27.1899 cv
532.884 27.6553 533.226 27.9727 533.74 28.5894 cv
534.843 25.7178 li
535.25 25.6919 li
535.351 26.9648 535.318 27.7754 535.117 29.1035 cv
534.976 30.0454 534.853 30.5747 534.565 31.4824 cv
530.83 28.7715 li
530.117 32.5229 li
529.164 32.2939 528.62 32.1865 527.65 32.0361 cv
526.658 31.8818 526.093 31.8184 525.093 31.748 cv
525.106 32.4243 525.125 32.8062 525.182 33.48 cv
525.238 34.1489 525.283 34.5259 525.386 35.1899 cv
524.515 35.6924 523.986 35.9268 523.029 36.2354 cv
522.201 36.5024 521.712 36.6108 520.849 36.7222 cv
520.671 37.1206 521.187 37.3247 521.785 37.7236 cv
522.205 38.0034 522.289 38.3696 522.565 38.8135 cv
522.539 39.0659 522.611 39.3296 522.382 39.438 cv
521.541 39.8364 521.138 40.0083 520.341 40.3682 cv
518.476 41.2021 li
518.476 41.2021 li
cp
518.363 49.3843 mo
518.265 47.9536 518.215 46.5405 518.236 45.105 cv
518.925 45.3325 519.34 45.5854 519.898 46.105 cv
520.292 46.4731 520.492 46.7212 520.761 47.1899 cv
520.484 47.6411 520.292 47.8813 519.919 48.2573 cv
519.384 48.7964 518.984 49.0913 518.363 49.3843 cv
518.363 49.3843 li
cp
518.849 54.3696 mo
518.673 52.8687 518.519 51.4302 518.408 50.0142 cv
520.356 49.811 li
519.746 51.6997 519.267 53.3345 518.849 54.3696 cv
518.849 54.3696 li
cp
541.705 65.875 mo
540.09 67.8574 538.367 69.5273 537.072 70.582 cv
538.599 68.2617 539.246 66.7344 539.845 64.0215 cv
540.111 62.8223 540.278 61.6777 540.345 60.5977 cv
540.951 61.0547 541.296 61.5664 541.562 62.3711 cv
541.833 63.1836 541.587 63.7109 541.628 64.5664 cv
541.654 65.082 541.675 65.4688 541.705 65.875 cv
541.705 65.875 li
cp
546.486 55.9302 mo
546.453 56.3716 546.392 56.8228 546.298 57.2847 cv
545.851 59.5054 544.658 61.7988 543.205 63.8906 cv
543.017 62.998 542.644 61.584 541.932 60.2793 cv
541.465 59.4233 540.856 59.0015 540.357 58.7251 cv
540.335 58.3052 540.296 57.896 540.238 57.4985 cv
541.312 56.6548 542.169 56.2759 543.583 55.9917 cv
544.705 55.7661 545.433 55.7466 546.486 55.9302 cv
546.486 55.9302 li
cp
533.375 44.354 mo
534.3 44.144 535.294 44.0513 536.361 44.0942 cv
538.265 44.1704 540.292 45.0269 541.896 46.2935 cv
541.984 46.8501 542.091 47.2505 541.859 48.021 cv
541.587 48.9116 541.429 49.5728 540.9 50.5034 cv
540.523 49.2808 539.937 47.4077 539.638 47.394 cv
539.197 47.3735 536.968 48.1978 536.128 48.3345 cv
536.197 48.7368 536.279 49.1548 536.384 49.6567 cv
536.88 49.5054 538.507 48.979 539.05 48.7935 cv
539.33 49.5464 540.076 51.9595 540.12 52.9116 cv
540.699 52.6001 540.722 52.5845 541.378 52.5376 cv
541.757 52.5103 542.447 52.5825 542.822 52.6489 cv
542.599 53.1362 542.548 53.729 542.307 54.2085 cv
541.875 55.064 541.492 55.5474 540.761 56.1685 cv
540.513 56.3794 540.332 56.5044 540.08 56.6245 cv
539.988 56.2358 li
539.216 53.2505 537.261 51.8433 534.462 51.2417 cv
534.562 49.8853 534.521 49.0483 534.292 47.6597 cv
534.076 46.3237 533.857 45.522 533.375 44.354 cv
533.375 44.354 li
cp
522.9 55.7563 mo
523.356 54.2876 524.039 52.6997 524.966 51.2222 cv
526.815 48.2729 529.076 45.8423 532.097 44.7329 cv
532.363 45.7759 533.341 48.353 533.341 48.353 cv
533.3 48.8159 533.267 50.2271 533.283 51.0669 cv
530.304 50.8657 528.158 52.6558 526.013 55.0444 cv
525.646 55.4556 525.326 55.8979 525.046 56.354 cv
524.482 56.4448 524.009 56.3599 523.427 56.0806 cv
523.207 55.9731 523.068 55.8911 522.9 55.7563 cv
522.9 55.7563 li
cp
523.134 61.3203 mo
522.632 60.3789 522.153 59.7866 522.263 58.7251 cv
522.33 58.0854 522.462 57.3579 522.666 56.5825 cv
522.843 56.7603 523.015 56.8931 523.273 57.0591 cv
523.685 57.3267 524 57.4731 524.404 57.5718 cv
523.763 58.9731 523.417 60.3691 523.134 61.3203 cv
523.134 61.3203 li
cp
492.96 18.8628 mo
494.826 17.7656 496.661 17.0786 498.05 17.0361 cv
496.322 18.5024 494.937 19.9551 493.746 21.437 cv
493.715 21.0815 493.669 20.7769 493.585 20.3467 cv
493.529 20.0659 493.22 19.418 492.96 18.8628 cv
492.96 18.8628 li
cp
487.107 23.8491 mo
488.226 22.4614 489.631 21.1675 491.106 20.0884 cv
491.148 20.3228 491.21 20.5576 491.302 20.8462 cv
491.445 21.2925 492.072 22.4336 492.469 23.1318 cv
491.679 24.2461 490.966 25.3848 490.265 26.5645 cv
489.664 25.9878 489.25 25.5986 488.572 24.9746 cv
488.326 24.748 487.536 24.1846 487.107 23.8491 cv
487.107 23.8491 li
cp
484.319 33.2778 mo
483.932 30.7817 484.341 28.312 485.802 25.7466 cv
485.927 25.5249 486.062 25.3037 486.207 25.084 cv
486.421 25.6187 486.65 26.0078 487.046 26.5488 cv
487.407 27.04 488.598 27.751 489.32 28.2432 cv
488.539 29.7217 487.973 31.0713 487.539 32.4648 cv
484.319 33.2778 li
484.319 33.2778 li
cp
486.298 38.7603 mo
485.495 37.269 484.89 35.8154 484.539 34.3765 cv
484.87 34.2407 485.161 34.1621 485.585 34.083 cv
486.183 33.9722 486.607 33.9434 487.115 33.9971 cv
486.772 35.4253 486.525 36.9575 486.298 38.7603 cv
486.298 38.7603 li
cp
498.525 59.6831 mo
497.877 60.8281 497.533 62.125 497.517 63.4902 cv
496.617 62.7344 495.941 61.5742 495.528 60.2266 cv
498.525 59.6831 li
498.525 59.6831 li
cp
502.856 56.0513 mo
502.724 56.0962 502.598 56.147 502.476 56.1997 cv
501.337 56.7075 500.384 57.3862 499.627 58.1919 cv
495.19 58.7583 li
494.886 56.8413 495.065 54.7319 495.807 52.937 cv
497.377 53.0981 498.356 53.3804 499.848 54.0825 cv
501.131 54.687 501.874 55.1665 502.856 56.0513 cv
502.856 56.0513 li
cp
511.49 58.3345 mo
511.002 57.7739 510.427 57.312 509.807 56.939 cv
509.39 55.519 508.759 53.9185 508.532 53.4751 cv
508.173 52.7739 507.782 52.3921 507.283 51.9321 cv
506.657 52.2661 506.238 52.4751 505.699 53.0161 cv
505.337 53.3755 504.457 54.1138 504.219 54.5649 cv
503.933 54.0063 503.745 53.7017 503.367 53.1987 cv
502.603 52.1763 502.052 51.6558 500.99 50.9497 cv
500.667 51.2388 500.522 51.479 500.412 51.8979 cv
500.33 52.2124 500.322 52.4106 500.381 52.731 cv
499.587 52.6704 499.128 52.5415 498.417 52.186 cv
497.75 51.8501 497.32 51.5415 496.898 51.0591 cv
497.261 50.605 497.679 50.1978 498.157 49.854 cv
505.536 44.52 511.667 51.561 511.49 58.3345 cv
511.49 58.3345 li
cp
506.166 25.4453 mo
505.449 25.3521 504.701 25.2993 503.916 25.2847 cv
502.947 25.2671 502.009 25.3481 501.106 25.5156 cv
502.583 22.9688 li
503.353 21.9878 li
504.061 22.5527 504.429 22.9219 504.995 23.6284 cv
505.529 24.2983 505.833 24.7617 506.166 25.4453 cv
506.166 25.4453 li
cp
515.84 24.8525 mo
516.745 27.1567 516.892 29.6953 516.361 31.8447 cv
513.962 28.4751 511.224 26.5142 507.671 25.7104 cv
509.117 20.4106 li
510.32 21.3501 510.927 22.0181 511.752 23.3022 cv
512.302 24.1606 513.22 26.1182 513.904 27.8354 cv
514.021 27.4624 514.187 27.0933 514.417 26.6606 cv
514.849 25.8589 515.216 25.3809 515.84 24.8525 cv
515.84 24.8525 li
cp
510.594 19.187 mo
512.625 20.1221 514.12 21.6162 515.117 23.3501 cv
514.996 23.5371 514.87 23.7119 514.693 23.936 cv
514.443 24.2583 514.289 24.4331 514.001 24.7241 cv
513.679 24.5112 513.511 24.3608 513.263 24.064 cv
512.687 23.3735 511.606 20.9507 511.175 20.2563 cv
510.923 19.8521 510.746 19.5293 510.594 19.187 cv
510.594 19.187 li
cp
497.324 20.5684 mo
499.703 18.9819 502.375 18.1563 505.552 18.1563 cv
506.638 18.1563 507.638 18.2739 508.557 18.4902 cv
508.572 19.1099 li
508.416 20.1309 508.245 20.708 507.816 21.6479 cv
507.507 22.3271 507.291 22.6973 506.853 23.3022 cv
506.492 22.9902 503.006 20.3857 502.533 20.3789 cv
502.205 21.3667 500.835 24.8047 500.173 25.7212 cv
499.923 25.7876 li
499.666 24.8276 499.348 24.2515 498.662 23.481 cv
498.094 22.8433 497.687 22.5313 496.925 22.1475 cv
497.182 21.3916 li
497.324 20.5684 li
497.324 20.5684 li
cp
492.675 25.0078 mo
493.723 23.687 494.796 22.5537 495.936 21.6079 cv
496.121 22.1987 496.259 22.7026 496.365 23.2065 cv
498.356 25.1348 li
498.978 26.085 li
497.433 26.6294 496.011 27.4263 494.736 28.397 cv
494.365 27.8384 493.749 26.9204 493.673 26.583 cv
493.599 26.249 493.131 25.4165 492.695 25.0171 cv
492.675 25.0078 li
492.675 25.0078 li
cp
488.752 36.1289 mo
488.789 32.0195 489.615 29.2529 491.826 26.1392 cv
492.444 26.3398 li
492.565 26.9722 492.69 27.3281 492.99 27.8979 cv
493.263 28.418 493.474 28.7173 493.853 29.1128 cv
491.585 31.0801 489.841 33.5923 488.752 36.1289 cv
488.752 36.1289 li
cp
509.742 40.6865 mo
509.194 40.3887 508.631 40.1602 508.054 39.9795 cv
507.861 39.3203 507.761 38.8262 507.657 38.0513 cv
507.548 37.2671 507.522 36.8174 507.528 36.0259 cv
507.98 36.2515 508.228 36.4019 508.636 36.6997 cv
508.945 36.9253 509.113 37.0645 509.392 37.3271 cv
510.028 37.0532 510.453 36.9829 511.142 37.0386 cv
511.679 37.082 511.992 37.168 512.476 37.4067 cv
511.705 38.0034 511.307 38.4028 510.708 39.1738 cv
510.273 39.7358 510.032 40.1104 509.742 40.6865 cv
509.742 40.6865 li
cp
513.349 44.2681 mo
512.457 42.8125 511.478 41.8115 510.437 41.1079 cv
511.226 40.2754 511.749 39.7886 512.667 39.0137 cv
513.382 38.4121 513.802 38.0898 514.566 37.5518 cv
514.427 38.9312 514.318 39.7075 514.066 41.0708 cv
513.83 42.3452 513.658 43.1201 513.349 44.2681 cv
513.349 44.2681 li
cp
517.162 50.0825 mo
517.222 52.4058 517.269 54.7563 517.215 57.6763 cv
516.794 54.6147 516.283 52.0806 515.693 49.978 cv
517.162 50.0825 li
517.162 50.0825 li
cp
517.017 41.8574 mo
517.031 42.2563 517.037 42.6641 517.037 43.0801 cv
517.037 45.1089 517.078 46.8755 517.123 48.5933 cv
515.003 47.8081 li
514.748 47.0981 514.48 46.4487 514.201 45.8569 cv
514.292 45.3013 514.4 44.8784 514.597 44.2505 cv
514.892 43.314 515.115 42.7954 515.591 41.9365 cv
517.017 41.8574 li
517.017 41.8574 li
cp
510.87 28.6367 mo
512.892 29.7964 514.408 31.4927 515.429 33.7842 cv
515.312 34.1147 515.126 34.4219 514.853 34.7568 cv
514.662 34.9941 514.533 35.1172 514.291 35.3022 cv
512.218 33.4878 li
512.333 32.8335 512.218 32.3618 511.816 31.8335 cv
511.5 31.4175 511.212 31.2212 510.708 31.0776 cv
510.648 30.498 510.648 30.1631 510.708 29.584 cv
510.75 29.2061 510.794 28.9307 510.87 28.6367 cv
510.87 28.6367 li
cp
500.263 29.418 mo
497.667 29.3589 495.574 30.1753 493.73 31.2222 cv
495.154 29.1396 497.444 27.7476 500.113 27.1328 cv
500.259 27.5029 500.32 27.8179 500.348 28.2827 cv
500.375 28.7329 500.356 29.0532 500.263 29.418 cv
500.263 29.418 li
cp
504.05 30.2461 mo
503.566 29.9849 503.046 29.7842 502.511 29.6758 cv
502.12 29.5957 501.736 29.5356 501.363 29.4932 cv
501.455 29.0688 501.478 28.6855 501.457 28.1543 cv
501.437 27.6592 501.39 27.3071 501.282 26.917 cv
501.882 26.832 502.502 26.7842 503.128 26.7749 cv
504.219 27.8657 li
504.397 28.564 504.397 29.0137 504.219 29.7119 cv
504.167 29.9204 504.115 30.0884 504.05 30.2461 cv
504.05 30.2461 li
cp
501.523 31.562 mo
503.12 31.4824 504.742 31.6729 506.298 32.1646 cv
505.999 31.7661 505.617 31.3667 505.177 31.0054 cv
505.199 29.4556 li
505.328 28.9263 505.39 28.6255 505.488 28.0903 cv
505.572 27.6353 505.621 27.3379 505.673 26.9429 cv
505.874 26.9736 li
506.356 27.0498 506.822 27.1421 507.272 27.25 cv
507.587 27.9678 508.154 29.2095 508.476 29.584 cv
508.738 29.8901 508.894 30.0566 509.182 30.3398 cv
509.182 30.3398 508.522 31.521 508.411 32.0532 cv
508.183 33.145 508.3 34.1724 508.732 34.9814 cv
506.632 33.4854 li
506.449 34.0801 506.259 34.6753 506.322 34.9814 cv
506.57 36.1831 506.69 36.8921 506.598 38.1152 cv
506.552 38.7046 506.496 39.0947 506.377 39.5845 cv
504.311 39.2515 502.197 39.4556 500.408 40.1733 cv
500.312 39.5249 500.319 39.0415 500.412 38.3076 cv
500.522 37.4541 500.9 37.0386 501.022 36.1865 cv
501.113 35.5474 500.986 35.1699 501.085 34.5322 cv
501.158 34.0654 501.341 32.4917 501.523 31.562 cv
501.523 31.562 li
cp
494.238 34.0435 mo
495.888 32.8677 497.857 32.0737 499.927 31.7329 cv
499.712 33.1167 499.58 34.0186 499.367 35.5127 cv
499.111 37.3594 li
498.162 37.2632 li
497.615 36.9146 497.315 36.7051 496.796 36.3145 cv
495.715 35.499 495.08 34.9404 494.238 34.0435 cv
494.238 34.0435 li
cp
489.759 40.0391 mo
490.587 38.0518 491.757 36.2715 492.789 35.2578 cv
492.936 36.0425 493.057 36.6201 493.296 37.5195 cv
493.583 38.5952 493.789 39.1943 494.226 40.2183 cv
493.566 40.0908 493.179 40.062 492.507 40.0903 cv
491.908 40.1152 491.582 40.3511 490.982 40.3145 cv
490.486 40.2847 490.144 40.2114 489.759 40.0391 cv
489.759 40.0391 li
cp
487.812 48.0142 mo
487.911 46.8325 488.142 45.9966 488.682 44.7876 cv
488.682 43.4858 488.996 42.084 489.484 40.7441 cv
491.529 44.2251 li
490.662 46.2114 li
489.957 46.5962 489.566 46.8306 488.892 47.27 cv
488.455 47.5552 488.171 47.7505 487.812 48.0142 cv
487.812 48.0142 li
cp
489.117 54.5308 mo
488.286 53.1226 487.833 51.4946 487.772 49.6665 cv
488.603 50.1577 489.12 50.6079 489.811 51.4165 cv
490.465 52.1841 490.778 52.688 491.175 53.6157 cv
490.863 53.8413 490.671 53.9526 490.322 54.1157 cv
489.877 54.3228 489.502 54.4556 489.117 54.5308 cv
489.117 54.5308 li
cp
494.897 50.7925 mo
493.769 53.2876 493.322 56.1431 493.447 58.4761 cv
491.908 57.6704 490.673 56.6655 489.756 55.4731 cv
490.183 55.356 490.537 55.2388 491.042 55.0532 cv
491.759 54.7915 492.157 54.6226 492.841 54.2856 cv
492.738 53.2271 492.55 52.6118 492.046 51.6743 cv
491.719 51.0649 491.25 50.8823 491.015 50.231 cv
490.863 49.8071 490.819 49.5415 490.822 49.0903 cv
491.423 48.9985 491.794 49.0239 492.375 49.1997 cv
492.881 49.3521 493.124 49.5542 493.572 49.8306 cv
494.125 50.1694 494.455 50.4067 494.897 50.7925 cv
494.897 50.7925 li
cp
496.486 48.1431 mo
496.324 48.3481 496.167 48.5591 496.019 48.7759 cv
494.515 46.9165 li
493.022 46.2759 li
493.24 45.7251 493.74 44.729 494.074 44.3501 cv
493.458 44.0806 492.697 42.4766 492.412 41.6479 cv
493.208 41.7773 493.679 41.792 494.482 41.7119 cv
495.022 41.6587 495.326 41.6016 495.848 41.4556 cv
494.417 36.4106 li
495.705 36.7959 496.417 37.1211 497.552 37.8403 cv
498.499 38.439 499.34 38.6147 499.786 39.6411 cv
499.9 39.9111 499.96 40.1035 499.999 40.3496 cv
498.349 41.1069 497.019 42.3262 496.326 43.9868 cv
496.228 44.7046 496.205 45.1167 496.219 45.8403 cv
496.238 46.7544 496.298 47.3091 496.486 48.1431 cv
496.486 48.1431 li
cp
514.712 52.1079 mo
515.031 53.8931 515.126 55.8716 514.957 58.0308 cv
514.153 56.0942 513.263 54.1147 512.253 52.2983 cv
514.712 52.1079 li
514.712 52.1079 li
cp
511.287 44.6704 mo
512.859 46.4243 514.035 48.7681 514.623 51.6411 cv
514.134 51.2114 513.65 50.9595 512.925 50.7251 cv
512.25 50.5063 511.745 50.4263 511.15 50.4663 cv
510.695 49.7964 li
510.923 49.1089 511.048 48.5298 511.175 47.6733 cv
511.348 46.4927 511.382 45.7114 511.287 44.6704 cv
511.287 44.6704 li
cp
506.099 41.3843 mo
507.682 41.8389 509.142 42.6479 510.407 43.7866 cv
510.24 44.5278 510.087 45.2993 510.002 45.9692 cv
509.867 47.0181 509.807 47.7417 509.798 48.6196 cv
508.359 46.8794 506.71 45.5835 504.787 45.0776 cv
506.099 41.3843 li
506.099 41.3843 li
cp
499.037 42.0723 mo
500.683 41.188 502.492 40.7583 504.647 41.0718 cv
504.822 41.0986 li
504.37 41.874 503.988 42.3994 503.335 43.1738 cv
502.849 43.7495 502.554 44.0591 502.002 44.5708 cv
501.417 44.0396 501.082 43.7461 500.476 43.2378 cv
499.912 42.7642 499.546 42.4673 499.037 42.0723 cv
499.037 42.0723 li
cp
497.582 42.9902 mo
497.907 42.7568 498.232 42.5391 498.566 42.3394 cv
498.789 42.6519 498.923 42.8857 499.111 43.27 cv
499.519 44.1079 499.705 44.7075 499.782 45.5239 cv
498.966 45.8853 498.236 46.3755 497.587 46.9614 cv
497.384 46.5054 497.292 46.1431 497.226 45.5806 cv
497.106 44.5571 497.197 43.8271 497.582 42.9902 cv
497.582 42.9902 li
cp
529.751 54.0347 mo
530.789 53.4478 531.908 53.1118 533.033 53.106 cv
532.691 53.4927 532.441 53.8989 532.162 54.4741 cv
531.968 54.8774 531.878 55.1167 531.759 55.5474 cv
531.441 55.0483 531.185 54.7915 530.687 54.4741 cv
530.351 54.2612 530.06 54.1196 529.751 54.0347 cv
529.751 54.0347 li
cp
533.703 53.1421 mo
533.957 53.1714 534.21 53.2183 534.462 53.2837 cv
535.986 53.6802 537.041 54.8872 537.664 56.479 cv
536.745 56.9038 536.15 57.3452 535.367 58.1519 cv
535.085 58.4409 534.896 58.6577 534.703 58.9185 cv
534.312 58.6079 533.863 58.3696 533.353 58.2231 cv
533.062 58.1411 532.763 58.0825 532.458 58.0474 cv
532.501 56.811 532.653 56.0132 533.058 54.7603 cv
533.271 54.1011 533.445 53.6567 533.703 53.1421 cv
533.703 53.1421 li
cp
538.248 58.8462 mo
538.595 61.5527 538.054 64.666 536.736 66.8672 cv
537.035 65.0156 536.932 62.8691 536.261 61.1582 cv
537.015 60.7793 537.474 60.3203 537.925 59.521 cv
538.065 59.2759 538.169 59.0601 538.248 58.8462 cv
538.248 58.8462 li
cp
524.736 61.8203 mo
524.978 59.645 525.951 57.6021 527.32 56.0415 cv
528.035 56.2368 528.578 56.52 529.281 57.0337 cv
529.794 57.4087 530.121 57.7036 530.455 58.1235 cv
528.13 58.5308 525.82 59.979 524.736 61.8203 cv
524.736 61.8203 li
cp
546.779 62.2988 mo
542.265 69.9746 536.349 73.7266 533.441 73.6738 cv
533.974 72.8516 534.15 71.7207 534.099 71.0586 cv
531.495 71.1074 529.742 69.832 528.432 67.5996 cv
527.376 65.8027 527.682 62.3086 527.682 62.3086 cv
525.307 61.9746 523.937 64.4121 523.937 66.6621 cv
523.937 89.082 li
523.937 90.7695 524.121 91.8926 524.73 93.0781 cv
527.166 97.832 532.603 100.742 537.148 100.145 cv
535.144 102.35 533.123 103.883 529.894 104.229 cv
528.062 104.424 526.937 104.285 525.205 103.66 cv
527.437 105.688 529.669 106.729 532.708 106.182 cv
535.815 105.625 537.583 102.879 539.187 102.434 cv
540.164 102.16 541.013 102.316 542.146 102.535 cv
540.736 102.691 539.718 103.467 539.019 104.395 cv
538.44 105.16 538.292 106.518 538.251 107.334 cv
539.271 107.576 540.394 107.639 541.623 107.166 cv
542.544 106.813 543.05 106.465 543.71 105.729 cv
545.106 106.643 546.021 108.994 546.021 108.994 cv
544.671 108.428 543.242 108.377 541.978 108.807 cv
538.125 110.117 536.562 112.604 529.224 111.313 cv
526.005 110.744 524.98 108.457 522.376 108.061 cv
523.25 108.584 523.767 109.326 524.142 110.41 cv
524.417 111.209 524.474 111.725 524.373 112.563 cv
528.562 111.535 531.144 113.938 533.937 114.117 cv
537.66 114.359 538.121 111.117 544.041 111.186 cv
545.89 111.207 548.5 112.5 549.308 114.535 cv
547.333 113.604 544.414 113.875 542.851 114.309 cv
540.427 114.979 538.98 115.785 537.267 117.666 cv
539.017 118.354 540.138 118.551 542.021 118.494 cv
543.611 118.447 544.537 118.262 546.021 117.688 cv
543.933 119.684 541.923 120.791 538.653 121.904 cv
536.46 122.65 535.015 122.395 532.771 121.916 cv
533.433 121.561 533.791 120.91 533.791 120.91 cv
530.462 120.336 530.167 118.336 527.476 117.785 cv
526.761 117.643 526.349 117.588 525.623 117.541 cv
528.332 122.619 534.496 125.541 539.396 124.395 cv
541.75 123.846 544.845 122.859 547.228 120.395 cv
546.515 123.893 545.205 125.729 542.333 127 cv
538.496 128.697 535.521 128.994 531.583 127.516 cv
533.33 129.059 535.333 129.701 538 130.182 cv
539.75 130.494 540.789 130.533 542.558 130.35 cv
538 133.119 530.537 131.641 525.623 127.988 cv
522.123 125.391 520.185 122.787 518.683 118.518 cv
519.228 123.166 520.251 128.221 524.896 131.145 cv
527.085 132.521 529.183 133.436 531.207 133.184 cv
529.517 134.35 527.082 134.646 525.12 134.646 cv
521.205 134.646 517.56 130.979 515.871 126.662 cv
516.226 131.492 514.322 134.646 510.945 134.646 cv
509.041 134.646 508.058 133.813 506.23 133.791 cv
505.083 133.777 504.263 134.027 503.103 134.494 cv
503.642 133.303 503.874 132.51 504.833 131.619 cv
506.811 129.791 510.599 129.775 511.996 126.684 cv
512.894 124.697 512.75 123.334 512.478 121.119 cv
511.061 125.1 508.478 126.936 504.08 128.951 cv
501.677 130.057 500.457 132.416 499.912 134.434 cv
499.703 131.73 499.849 129.928 501.267 127.619 cv
502.957 124.867 507.019 124.082 508.687 121.244 cv
509.982 119.047 510.275 117.445 510.273 114.895 cv
509.392 117.896 508.08 120.061 506.517 121.143 cv
503.158 123.467 499.583 124.438 497.937 127.313 cv
496.601 129.645 496.525 131.451 496.98 134.076 cv
495.182 132.381 494.541 130.525 494.914 128.082 cv
495.234 125.98 496.058 124.67 497.812 123.475 cv
495.324 123.727 493.591 125.133 492.833 127.516 cv
492.22 129.443 492.458 130.988 493.624 132.646 cv
489.392 131.535 489.699 125.656 492.374 122.77 cv
496.96 117.813 505.085 118.182 501.686 109.119 cv
501.287 112.521 500.703 114.514 498.147 116.313 cv
494.083 119.166 487.815 118.873 486.683 125.625 cv
486.356 120.438 487.947 118.754 490.957 115.912 cv
492.815 114.16 496.332 113.309 496.101 108.291 cv
494.936 111.041 493.287 112.145 490.999 113.143 cv
488.349 114.297 486.726 113.77 484.541 116.541 cv
484.436 114.518 485.128 112.629 487.041 111.492 cv
488.792 110.453 490.664 110.684 491.996 108.688 cv
491.996 108.688 490.482 108.102 488.289 108.951 cv
490.377 106.326 491.912 107 493.978 106 cv
495.25 105.387 495.765 104.85 496.687 103.893 cv
494.874 103.684 493.164 103.656 491.312 104.102 cv
489.127 104.625 486.789 106.475 486.789 106.475 cv
488.124 102.73 493.359 99.5762 498.517 98.1191 cv
505.511 96.1445 508.348 95.4336 509.654 93.0137 cv
510.548 91.3555 510.708 90.8105 510.708 86.9805 cv
510.708 64.8203 li
510.708 62.291 506.694 63.0703 505.511 64.252 cv
504.444 65.3203 504.095 66.6133 504.923 68.3242 cv
499.89 68.3906 498.544 64.4277 498.544 64.4277 cv
498.511 64.8672 498.503 65.3223 498.507 65.7988 cv
496.723 64.9297 495.775 64.0664 494.745 62.3691 cv
494.094 61.2969 493.826 60.5977 493.591 59.3657 cv
492.025 60.6074 487.871 61.0059 487.201 60.5156 cv
485.5 59.2739 484.513 56.1021 484.076 52.9331 cv
483.671 50.0054 483.848 48.186 484.808 45.3911 cv
482.417 41.1167 481.89 36.1909 481.89 31.1831 cv
481.89 26.9995 484.441 21.6665 487.933 18.2666 cv
489.351 11.2729 496.9 7.08643 502.417 7.08643 cv
507.658 7.08643 511.982 10.0923 514.548 15.6914 cv
516.933 10.1782 522.62 7.08643 528.433 7.08643 cv
533.87 7.08643 537.642 9.14551 540.751 13.6045 cv
543.294 14.1377 544.892 14.7495 546.69 16.6265 cv
549.072 19.1157 550.779 21.4268 550.886 25.6045 cv
550.916 26.7578 550.386 27.3701 549.765 28.3423 cv
551.84 31.2827 552.755 33.4731 552.755 37.0718 cv
552.755 40.752 552.421 42.6499 550.779 45.6763 cv
550.957 46.0259 551.037 46.2378 551.134 46.6177 cv
551.275 47.1646 551.308 47.4946 551.278 48.0581 cv
550.095 48.4487 548.792 48.3687 548.468 49.5688 cv
548.183 50.6177 550.406 55.7739 546.779 62.2988 cv
546.779 62.2988 li
cp
504.066 117.826 mo
506.96 115 507.798 111.604 506.554 107.754 cv
505.789 105.387 504.787 104.049 502.732 102.646 cv
503.322 102 503.679 101.65 504.341 101.076 cv
504.9 100.594 505.228 100.334 505.832 99.9082 cv
506.554 101.852 li
507.48 104.336 508.89 105.865 508.957 108.213 cv
509.076 112.408 506.462 115.939 504.066 117.826 cv
504.066 117.826 li
cp
508.5 131.822 mo
509.682 131.559 510.351 131.252 511.324 130.527 cv
512.72 129.49 513.392 128.568 513.951 126.924 cv
514.148 128.881 513.828 130.75 512.066 131.703 cv
510.841 132.365 509.753 132.217 508.5 131.822 cv
508.5 131.822 li
cp
ef
814.176 116.49 mo
818.794 116.574 li
822.322 116.658 823.122 117.457 823.247 118.549 cv
823.289 118.926 li
823.33 119.43 823.414 119.557 823.582 119.557 cv
823.75 119.557 823.917 119.389 823.917 119.094 cv
823.917 118.674 824.044 116.111 824.044 115.02 cv
824.044 114.811 824.044 114.6 823.876 114.6 cv
823.709 114.6 823.373 114.684 822.826 114.768 cv
822.239 114.852 821.398 114.936 820.181 114.936 cv
806.236 114.936 li
805.816 114.936 804.388 114.895 803.338 114.768 cv
802.33 114.643 801.953 114.348 801.701 114.348 cv
801.574 114.348 801.406 114.811 801.322 115.02 cv
801.281 115.314 800.526 118.506 800.526 118.885 cv
800.526 119.094 800.693 119.178 800.777 119.178 cv
800.945 119.178 801.07 119.137 801.155 118.842 cv
801.281 118.59 801.322 118.338 801.743 117.709 cv
802.289 116.867 803.171 116.615 805.48 116.574 cv
810.814 116.49 li
810.814 131.484 li
810.814 134.928 810.814 137.742 810.647 139.213 cv
810.522 140.262 810.31 140.977 809.555 141.145 cv
809.218 141.229 808.798 141.313 808.463 141.313 cv
808.251 141.313 808.167 141.438 808.167 141.564 cv
808.167 141.773 808.335 141.857 808.757 141.857 cv
809.849 141.857 812.41 141.732 812.578 141.732 cv
812.789 141.732 815.141 141.857 817.156 141.857 cv
817.576 141.857 817.744 141.732 817.744 141.564 cv
817.744 141.438 817.703 141.27 817.451 141.27 cv
817.115 141.27 816.276 141.186 815.772 141.102 cv
814.636 140.934 814.468 140.262 814.343 139.213 cv
814.176 137.742 814.176 134.928 814.176 131.484 cv
814.176 116.49 li
814.176 116.49 li
cp
784.943 111.701 mo
786.076 111.701 786.791 110.861 786.791 109.77 cv
786.791 108.721 785.993 108.09 784.984 108.09 cv
783.684 108.09 783.18 109.141 783.18 109.896 cv
783.18 110.693 783.684 111.701 784.943 111.701 cv
784.943 111.701 li
cp
793.384 111.701 mo
794.519 111.701 795.232 110.861 795.232 109.77 cv
795.232 108.721 794.435 108.09 793.427 108.09 cv
792.125 108.09 791.622 109.141 791.622 109.896 cv
791.622 110.693 792.125 111.701 793.384 111.701 cv
793.384 111.701 li
cp
784.859 130.434 mo
784.732 130.434 784.691 130.35 784.732 130.182 cv
788.177 120.396 li
788.386 119.85 788.597 119.85 788.806 120.396 cv
792.46 130.182 li
792.501 130.35 792.501 130.434 792.334 130.434 cv
784.859 130.434 li
784.859 130.434 li
cp
779.526 137.91 mo
778.81 139.717 778.097 140.977 776.416 141.186 cv
776.123 141.229 775.576 141.27 775.324 141.27 cv
775.156 141.27 774.989 141.396 774.989 141.564 cv
774.989 141.773 775.24 141.857 775.703 141.857 cv
777.214 141.857 779.063 141.732 779.441 141.732 cv
779.861 141.732 781.876 141.857 782.759 141.857 cv
783.095 141.857 783.305 141.773 783.305 141.564 cv
783.305 141.396 783.22 141.27 782.927 141.27 cv
782.592 141.27 li
781.96 141.27 781.33 141.018 781.33 140.305 cv
781.33 139.674 781.541 138.793 781.876 137.91 cv
783.976 132.197 li
784.06 131.988 784.188 131.904 784.355 131.904 cv
792.88 131.904 li
793.092 131.904 793.132 131.945 793.217 132.113 cv
796.535 140.305 li
796.787 140.893 796.408 141.186 796.199 141.27 cv
796.031 141.354 795.947 141.354 795.947 141.521 cv
795.947 141.732 796.535 141.732 797.248 141.773 cv
799.81 141.857 802.541 141.857 803.085 141.857 cv
803.507 141.857 803.927 141.773 803.927 141.564 cv
803.927 141.354 803.676 141.27 803.464 141.27 cv
803.085 141.27 802.541 141.229 801.994 141.061 cv
801.197 140.809 800.189 140.346 798.845 137.154 cv
796.576 131.736 790.655 116.994 789.982 115.482 cv
789.605 114.684 789.478 114.18 789.101 114.18 cv
788.849 114.18 788.681 114.391 788.218 115.566 cv
779.526 137.91 li
779.526 137.91 li
cp
766.757 116.49 mo
771.376 116.574 li
774.905 116.658 775.703 117.457 775.828 118.549 cv
775.872 118.926 li
775.912 119.43 775.997 119.557 776.164 119.557 cv
776.332 119.557 776.5 119.389 776.5 119.094 cv
776.5 118.674 776.626 116.111 776.626 115.02 cv
776.626 114.811 776.626 114.6 776.459 114.6 cv
776.291 114.6 775.955 114.684 775.408 114.768 cv
774.82 114.852 773.98 114.936 772.763 114.936 cv
758.818 114.936 li
758.398 114.936 756.971 114.895 755.921 114.768 cv
754.912 114.643 754.535 114.348 754.284 114.348 cv
754.156 114.348 753.989 114.811 753.905 115.02 cv
753.864 115.314 753.107 118.506 753.107 118.885 cv
753.107 119.094 753.276 119.178 753.359 119.178 cv
753.527 119.178 753.652 119.137 753.736 118.842 cv
753.864 118.59 753.905 118.338 754.324 117.709 cv
754.872 116.867 755.751 116.615 758.063 116.574 cv
763.397 116.49 li
763.397 131.484 li
763.397 134.928 763.397 137.742 763.228 139.213 cv
763.103 140.262 762.892 140.977 762.136 141.145 cv
761.801 141.229 761.38 141.313 761.044 141.313 cv
760.834 141.313 760.75 141.438 760.75 141.564 cv
760.75 141.773 760.917 141.857 761.338 141.857 cv
762.431 141.857 764.993 141.732 765.16 141.732 cv
765.372 141.732 767.722 141.857 769.739 141.857 cv
770.158 141.857 770.326 141.732 770.326 141.564 cv
770.326 141.438 770.285 141.27 770.033 141.27 cv
769.697 141.27 768.857 141.186 768.353 141.102 cv
767.218 140.934 767.051 140.262 766.926 139.213 cv
766.757 137.742 766.757 134.928 766.757 131.484 cv
766.757 116.49 li
766.757 116.49 li
cp
741.892 125.184 mo
741.892 119.641 741.892 118.633 741.935 117.498 cv
742.019 116.238 742.228 115.691 743.32 115.482 cv
743.74 115.439 744.287 115.398 744.539 115.398 cv
744.664 115.398 744.832 115.271 744.832 115.146 cv
744.832 114.936 744.623 114.852 744.244 114.852 cv
743.111 114.852 740.338 114.936 740.171 114.936 cv
739.96 114.936 737.651 114.852 735.971 114.852 cv
735.551 114.852 735.382 114.936 735.382 115.146 cv
735.382 115.271 735.551 115.439 735.677 115.439 cv
736.013 115.439 736.642 115.482 736.938 115.523 cv
738.155 115.691 738.365 116.279 738.449 117.498 cv
738.534 118.633 738.534 119.641 738.534 125.184 cv
738.534 131.484 li
738.534 134.928 738.534 137.742 738.322 139.213 cv
738.155 140.262 738.07 140.934 737.357 141.102 cv
737.022 141.186 736.559 141.27 736.222 141.27 cv
736.013 141.27 735.93 141.438 735.93 141.564 cv
735.93 141.773 736.138 141.857 736.517 141.857 cv
737.105 141.857 737.902 141.816 738.659 141.773 cv
739.373 141.732 740.001 141.732 740.171 141.732 cv
741.263 141.732 742.523 141.773 744.203 141.816 cv
745.926 141.9 747.982 141.941 750.628 141.941 cv
752.603 141.941 752.728 141.816 752.98 140.977 cv
753.276 139.926 753.527 137.783 753.527 137.406 cv
753.527 137.027 753.443 136.859 753.276 136.859 cv
753.064 136.859 752.939 137.07 752.897 137.322 cv
752.772 138.035 752.476 138.793 752.016 139.338 cv
751.132 140.389 749.494 140.43 747.563 140.43 cv
744.664 140.43 743.236 140.178 742.648 139.59 cv
741.976 138.961 741.892 136.818 741.892 131.568 cv
741.892 125.184 li
741.892 125.184 li
cp
705.898 130.434 mo
705.898 135.643 707.326 138.119 709.132 139.801 cv
711.736 142.236 715.601 142.32 716.818 142.32 cv
719.001 142.32 721.859 142.025 724.546 139.717 cv
727.486 137.195 727.99 132.869 727.99 129.006 cv
727.99 125.184 li
727.99 119.641 727.949 118.633 728.034 117.498 cv
728.118 116.322 728.326 115.734 729.334 115.523 cv
729.796 115.439 730.007 115.439 730.259 115.439 cv
730.427 115.439 730.552 115.271 730.552 115.146 cv
730.552 114.936 730.384 114.852 729.964 114.852 cv
728.873 114.852 727.109 114.936 726.857 114.936 cv
726.647 114.936 724.503 114.852 722.868 114.852 cv
722.447 114.852 722.28 114.936 722.28 115.146 cv
722.28 115.271 722.405 115.439 722.572 115.439 cv
722.909 115.439 723.539 115.482 723.832 115.523 cv
725.051 115.691 725.261 116.363 725.302 117.498 cv
725.346 118.633 725.386 119.641 725.386 125.184 cv
725.386 129.678 li
725.386 133.332 725.009 136.271 723.287 138.33 cv
722.027 139.842 719.843 140.85 717.574 140.85 cv
715.475 140.85 713.878 140.557 712.072 138.918 cv
710.476 137.49 709.343 135.348 709.343 130.182 cv
709.343 125.184 li
709.343 119.641 709.343 118.633 709.427 117.498 cv
709.511 116.322 709.721 115.691 710.688 115.523 cv
711.148 115.439 711.359 115.439 711.611 115.439 cv
711.78 115.439 711.947 115.271 711.947 115.146 cv
711.947 114.936 711.736 114.852 711.316 114.852 cv
710.225 114.852 707.914 114.936 707.578 114.936 cv
707.243 114.936 705.017 114.852 703.335 114.852 cv
702.916 114.852 702.748 114.936 702.748 115.146 cv
702.748 115.271 702.916 115.439 703.042 115.439 cv
703.378 115.439 704.009 115.482 704.302 115.523 cv
705.522 115.691 705.73 116.363 705.814 117.498 cv
705.898 118.633 705.898 119.641 705.898 125.184 cv
705.898 130.434 li
705.898 130.434 li
cp
679.818 131.484 mo
679.818 134.928 679.818 137.742 679.607 139.213 cv
679.439 140.262 679.355 140.934 678.642 141.102 cv
678.306 141.186 677.843 141.27 677.507 141.27 cv
677.296 141.27 677.213 141.438 677.213 141.564 cv
677.213 141.773 677.423 141.857 677.802 141.857 cv
678.935 141.857 681.162 141.732 681.455 141.732 cv
681.75 141.732 683.976 141.857 685.781 141.857 cv
686.201 141.857 686.369 141.732 686.369 141.564 cv
686.369 141.438 686.285 141.27 686.076 141.27 cv
685.74 141.27 685.152 141.186 684.648 141.102 cv
683.513 140.934 683.346 140.262 683.221 139.213 cv
683.052 137.742 683.052 134.928 683.052 131.484 cv
683.052 127.998 li
683.221 127.998 li
684.984 130.098 692.753 138.289 694.434 139.59 cv
696.03 140.809 696.997 141.605 698.927 141.773 cv
699.767 141.857 700.439 141.857 701.49 141.857 cv
703.38 141.857 li
704.009 141.857 704.177 141.732 704.177 141.564 cv
704.177 141.396 703.968 141.27 703.717 141.27 cv
703.463 141.27 702.414 141.145 701.447 140.766 cv
699.684 140.053 699.263 139.59 696.156 136.818 cv
694.644 135.432 686.957 127.746 685.993 126.695 cv
686.789 125.814 693.089 119.766 694.013 118.926 cv
695.652 117.373 696.365 116.574 697.876 115.902 cv
698.592 115.607 699.391 115.398 699.935 115.398 cv
700.23 115.398 700.314 115.271 700.314 115.104 cv
700.314 114.936 700.147 114.852 699.767 114.852 cv
698.843 114.852 696.409 114.936 696.197 114.936 cv
695.316 114.936 694.181 114.852 693.426 114.852 cv
693.173 114.852 693.005 114.936 693.005 115.104 cv
693.005 115.23 693.132 115.398 693.342 115.439 cv
693.636 115.482 693.805 115.691 693.805 116.154 cv
693.805 116.742 692.838 117.666 691.787 118.717 cv
690.402 120.145 683.809 126.654 683.221 127.326 cv
683.052 127.326 li
683.052 125.184 li
683.052 119.641 683.052 118.633 683.136 117.498 cv
683.221 116.238 683.472 115.734 684.438 115.523 cv
684.901 115.439 685.109 115.439 685.361 115.439 cv
685.53 115.439 685.656 115.271 685.656 115.146 cv
685.656 114.936 685.489 114.852 685.068 114.852 cv
683.976 114.852 681.75 114.936 681.414 114.936 cv
681.203 114.936 678.935 114.852 677.255 114.852 cv
676.835 114.852 676.667 114.936 676.667 115.146 cv
676.667 115.271 676.835 115.439 676.96 115.439 cv
677.296 115.439 677.927 115.482 678.222 115.523 cv
679.439 115.691 679.651 116.279 679.734 117.498 cv
679.818 118.633 679.818 119.641 679.818 125.184 cv
679.818 131.484 li
679.818 131.484 li
cp
655.876 130.434 mo
655.751 130.434 655.709 130.35 655.751 130.182 cv
659.195 120.396 li
659.406 119.85 659.615 119.85 659.826 120.396 cv
663.48 130.182 li
663.522 130.35 663.522 130.434 663.353 130.434 cv
655.876 130.434 li
655.876 130.434 li
cp
650.542 137.91 mo
649.83 139.717 649.115 140.977 647.435 141.186 cv
647.142 141.229 646.596 141.27 646.343 141.27 cv
646.176 141.27 646.007 141.396 646.007 141.564 cv
646.007 141.773 646.259 141.857 646.722 141.857 cv
648.234 141.857 650.082 141.732 650.459 141.732 cv
650.88 141.732 652.897 141.857 653.777 141.857 cv
654.114 141.857 654.324 141.773 654.324 141.564 cv
654.324 141.396 654.24 141.27 653.945 141.27 cv
653.609 141.27 li
652.98 141.27 652.349 141.018 652.349 140.305 cv
652.349 139.674 652.56 138.793 652.897 137.91 cv
654.997 132.197 li
655.08 131.988 655.205 131.904 655.373 131.904 cv
663.901 131.904 li
664.109 131.904 664.152 131.945 664.236 132.113 cv
667.555 140.305 li
667.806 140.893 667.427 141.186 667.218 141.27 cv
667.051 141.354 666.967 141.354 666.967 141.521 cv
666.967 141.732 667.555 141.732 668.267 141.773 cv
670.83 141.857 673.56 141.857 674.105 141.857 cv
674.526 141.857 674.945 141.773 674.945 141.564 cv
674.945 141.354 674.693 141.27 674.484 141.27 cv
674.105 141.27 673.56 141.229 673.013 141.061 cv
672.217 140.809 671.207 140.346 669.864 137.154 cv
667.596 131.736 661.673 116.994 661.001 115.482 cv
660.623 114.684 660.498 114.18 660.119 114.18 cv
659.868 114.18 659.699 114.391 659.239 115.566 cv
650.542 137.91 li
650.542 137.91 li
cp
631.098 129.678 mo
631.098 133.711 631.098 137.027 630.888 138.793 cv
630.72 140.01 630.51 140.934 629.67 141.102 cv
629.292 141.186 628.788 141.27 628.41 141.27 cv
628.158 141.27 628.074 141.396 628.074 141.521 cv
628.074 141.773 628.284 141.857 628.746 141.857 cv
630.006 141.857 632.652 141.732 632.862 141.732 cv
633.072 141.732 635.718 141.857 638.028 141.857 cv
638.49 141.857 638.7 141.732 638.7 141.521 cv
638.7 141.396 638.616 141.27 638.364 141.27 cv
637.986 141.27 637.062 141.186 636.474 141.102 cv
635.214 140.934 634.962 140.01 634.836 138.793 cv
634.626 137.027 634.626 133.711 634.626 129.678 cv
634.626 126.107 li
634.626 125.814 634.71 125.73 634.92 125.73 cv
635.634 125.73 640.21 125.73 641.261 125.855 cv
642.564 126.023 643.236 126.779 643.445 127.367 cv
643.614 127.873 643.656 128.461 643.697 128.881 cv
643.697 129.09 643.781 129.258 643.993 129.258 cv
644.285 129.258 644.285 128.838 644.285 128.461 cv
644.285 128.166 644.369 126.486 644.453 125.646 cv
644.58 124.26 644.789 123.547 644.789 123.295 cv
644.789 123.084 644.748 122.959 644.58 122.959 cv
644.412 122.959 644.285 123.168 644.118 123.379 cv
643.74 123.924 643.193 124.051 642.185 124.135 cv
641.597 124.176 641.009 124.176 640.294 124.176 cv
634.92 124.219 li
634.668 124.219 634.626 124.092 634.626 123.84 cv
634.626 112.248 li
634.626 111.912 634.752 111.785 635.004 111.785 cv
641.472 111.912 li
643.109 111.953 644.076 112.711 644.328 113.256 cv
644.58 113.803 644.705 114.516 644.705 114.852 cv
644.705 115.146 644.789 115.355 645 115.355 cv
645.209 115.355 645.292 115.104 645.335 114.895 cv
645.419 114.391 645.503 112.543 645.544 112.123 cv
645.671 110.945 645.882 110.441 645.882 110.148 cv
645.882 109.938 645.796 109.77 645.63 109.77 cv
645.46 109.77 645.292 109.938 645.041 110.021 cv
644.664 110.148 643.993 110.148 643.193 110.189 cv
642.228 110.232 633.702 110.273 632.862 110.232 cv
631.14 110.148 li
630.216 110.105 629.082 110.105 628.116 110.105 cv
627.654 110.105 627.444 110.189 627.444 110.441 cv
627.444 110.609 627.612 110.693 627.78 110.693 cv
628.158 110.693 628.872 110.736 629.208 110.82 cv
630.594 111.113 630.93 111.785 631.014 113.215 cv
631.098 114.559 631.098 115.734 631.098 122.285 cv
631.098 129.678 li
631.098 129.678 li
cp
f
1200.49 78.2344 mo
1200.49 81.6777 1200.49 84.4922 1200.28 85.9629 cv
1200.11 87.0117 1200.02 87.7266 1199.31 87.8516 cv
1198.97 87.8945 1198.51 88.0195 1198.18 88.0195 cv
1197.97 88.0195 1197.88 88.1875 1197.88 88.3145 cv
1197.88 88.5234 1198.09 88.6074 1198.47 88.6074 cv
1199.06 88.6074 1199.9 88.5664 1200.61 88.5234 cv
1201.41 88.4824 1202.12 88.4824 1202.21 88.4824 cv
1202.75 88.4824 1203.72 88.4824 1205.27 88.5664 cv
1206.79 88.6074 1208.93 88.6914 1211.7 88.6914 cv
1213.13 88.6914 1213.51 88.6914 1213.76 87.7676 cv
1213.97 87.0117 1214.26 84.5762 1214.26 84.3242 cv
1214.26 84.0723 1214.22 83.7773 1214.01 83.7773 cv
1213.8 83.7773 1213.72 83.9043 1213.63 84.3242 cv
1213.42 85.752 1212.92 86.3828 1211.95 86.8027 cv
1210.99 87.1797 1209.22 87.1797 1208.26 87.1797 cv
1204.6 87.1797 1203.93 86.7188 1203.85 84.3242 cv
1203.8 83.6094 1203.85 79.4531 1203.85 78.2344 cv
1203.85 75.252 li
1203.85 75.127 1203.89 75 1204.1 75 cv
1204.73 75 1208.68 75.043 1209.68 75.168 cv
1211.11 75.3359 1211.45 75.7559 1211.57 76.2598 cv
1211.74 76.7227 1211.74 77.0996 1211.74 77.4355 cv
1211.74 77.6465 1211.83 77.7715 1211.99 77.7715 cv
1212.25 77.7715 1212.33 77.3945 1212.33 77.0996 cv
1212.33 76.8477 1212.41 75.5039 1212.5 74.791 cv
1212.58 73.6152 1212.79 73.0254 1212.79 72.8164 cv
1212.79 72.6055 1212.71 72.5215 1212.58 72.5215 cv
1212.46 72.5215 1212.29 72.7324 1212.04 72.9844 cv
1211.66 73.3613 1211.11 73.4043 1210.23 73.4883 cv
1209.39 73.5723 1204.52 73.5723 1204.06 73.5723 cv
1203.85 73.5723 1203.85 73.4453 1203.85 73.1934 cv
1203.85 63.4922 li
1203.85 63.2402 1203.89 63.1143 1204.06 63.1143 cv
1204.48 63.1143 1208.76 63.1563 1209.39 63.2402 cv
1211.41 63.4922 1211.78 63.7441 1212.04 64.3325 cv
1212.2 64.7524 1212.25 65.3403 1212.25 65.5923 cv
1212.25 65.8862 1212.33 66.0542 1212.54 66.0542 cv
1212.71 66.0542 1212.83 65.8442 1212.88 65.6763 cv
1212.96 65.2563 1213.04 63.6602 1213.09 63.3242 cv
1213.17 62.3164 1213.38 61.8965 1213.38 61.6445 cv
1213.38 61.4761 1213.34 61.3081 1213.21 61.3081 cv
1213.04 61.3081 1212.88 61.4341 1212.71 61.4761 cv
1212.41 61.5181 1211.74 61.6445 1211.03 61.6865 cv
1210.19 61.7285 1202.46 61.6865 1202.21 61.6865 cv
1202 61.6865 1199.6 61.6021 1197.92 61.6021 cv
1197.5 61.6021 1197.34 61.6865 1197.34 61.8965 cv
1197.34 62.0225 1197.5 62.1904 1197.63 62.1904 cv
1197.97 62.1904 1198.6 62.2324 1198.89 62.2744 cv
1200.11 62.4424 1200.32 63.0303 1200.4 64.2485 cv
1200.49 65.3823 1200.49 66.3901 1200.49 71.9336 cv
1200.49 78.2344 li
1200.49 78.2344 li
cp
1188.31 71.9336 mo
1188.31 66.3901 1188.31 65.3823 1188.39 64.2485 cv
1188.47 62.9883 1188.68 62.4844 1189.65 62.2744 cv
1190.11 62.1904 1190.32 62.1904 1190.57 62.1904 cv
1190.74 62.1904 1190.91 62.0225 1190.91 61.8965 cv
1190.91 61.6865 1190.7 61.6021 1190.28 61.6021 cv
1189.19 61.6021 1186.84 61.6865 1186.63 61.6865 cv
1186.46 61.6865 1184.06 61.6021 1182.43 61.6021 cv
1182.01 61.6021 1181.84 61.6865 1181.84 61.8965 cv
1181.84 62.0225 1181.96 62.1904 1182.13 62.1904 cv
1182.47 62.1904 1183.1 62.2324 1183.39 62.2744 cv
1184.61 62.4424 1184.78 63.0303 1184.86 64.2485 cv
1184.9 65.3823 1184.95 66.4741 1184.95 72.0176 cv
1184.95 72.7734 li
1184.95 72.9844 1184.86 72.9844 1184.74 72.9844 cv
1169.32 72.9844 li
1169.2 72.9844 1169.11 72.9844 1169.11 72.7734 cv
1169.11 72.0176 li
1169.11 66.4741 1169.11 65.3823 1169.15 64.2485 cv
1169.24 62.9883 1169.45 62.4844 1170.46 62.2744 cv
1170.88 62.1904 1171.13 62.1904 1171.38 62.1904 cv
1171.51 62.1904 1171.67 62.0225 1171.67 61.8965 cv
1171.67 61.6865 1171.51 61.6021 1171.09 61.6021 cv
1169.95 61.6021 1167.6 61.6865 1167.43 61.6865 cv
1167.22 61.6865 1164.87 61.6021 1163.19 61.6021 cv
1162.77 61.6021 1162.6 61.6865 1162.6 61.8965 cv
1162.6 62.0225 1162.77 62.1904 1162.9 62.1904 cv
1163.23 62.1904 1163.86 62.2324 1164.16 62.2744 cv
1165.37 62.4424 1165.58 63.0303 1165.67 64.2485 cv
1165.75 65.3823 1165.75 66.3901 1165.75 71.9336 cv
1165.75 78.2344 li
1165.75 81.6777 1165.75 84.4922 1165.54 85.9629 cv
1165.37 87.0117 1165.29 87.6836 1164.58 87.8516 cv
1164.24 87.9355 1163.78 88.0195 1163.44 88.0195 cv
1163.23 88.0195 1163.15 88.1875 1163.15 88.3145 cv
1163.15 88.5234 1163.36 88.6074 1163.74 88.6074 cv
1164.87 88.6074 1167.22 88.4824 1167.43 88.4824 cv
1167.6 88.4824 1169.95 88.6074 1172.01 88.6074 cv
1172.43 88.6074 1172.6 88.4824 1172.6 88.3145 cv
1172.6 88.1875 1172.51 88.0195 1172.3 88.0195 cv
1171.97 88.0195 1171.17 87.9355 1170.62 87.8516 cv
1169.53 87.6836 1169.41 87.0117 1169.28 85.9629 cv
1169.11 84.4922 1169.11 81.7617 1169.11 78.3184 cv
1169.11 74.748 li
1169.11 74.5801 1169.2 74.5391 1169.32 74.5391 cv
1184.74 74.5391 li
1184.86 74.5391 1184.95 74.5801 1184.95 74.748 cv
1184.95 78.3184 li
1184.95 81.7617 1184.95 84.4512 1184.78 85.9199 cv
1184.65 86.9707 1184.53 87.6836 1183.77 87.8516 cv
1183.43 87.9355 1183.01 88.0195 1182.68 88.0195 cv
1182.47 88.0195 1182.38 88.1875 1182.38 88.3145 cv
1182.38 88.5234 1182.55 88.6074 1182.97 88.6074 cv
1184.06 88.6074 1186.46 88.4824 1186.63 88.4824 cv
1186.84 88.4824 1189.19 88.6074 1191.2 88.6074 cv
1191.62 88.6074 1191.83 88.4824 1191.83 88.3145 cv
1191.83 88.1875 1191.75 88.0195 1191.5 88.0195 cv
1191.2 88.0195 1190.36 87.9355 1189.86 87.8516 cv
1188.73 87.6836 1188.64 87.0117 1188.52 85.9629 cv
1188.35 84.4922 1188.31 81.6777 1188.31 78.2344 cv
1188.31 71.9336 li
1188.31 71.9336 li
cp
1148.49 89.0703 mo
1150.88 89.0703 1153.66 88.8594 1155.17 88.2715 cv
1155.8 88.0195 1155.88 87.8945 1156.09 87.2227 cv
1156.47 86.0039 1156.97 82.8965 1156.97 82.6445 cv
1156.97 82.3926 1156.81 82.1406 1156.64 82.1406 cv
1156.39 82.1406 1156.34 82.2656 1156.26 82.6445 cv
1156.13 83.3164 1155.63 84.8281 1154.83 85.627 cv
1153.36 87.0957 1151.51 87.3066 1148.74 87.3066 cv
1140.85 87.3066 1135.43 81.2168 1135.43 74.3711 cv
1135.43 70.7578 1136.02 67.5664 1138.75 65.0464 cv
1140.05 63.8281 1142.32 62.5684 1147.06 62.5684 cv
1150.34 62.5684 1153.03 63.4502 1154.33 64.5425 cv
1155.29 65.2983 1155.88 66.7261 1155.88 68.1123 cv
1155.88 68.6162 1155.92 68.8682 1156.18 68.8682 cv
1156.39 68.8682 1156.55 68.6582 1156.6 68.1123 cv
1156.64 67.6084 1156.64 65.6343 1156.68 64.4585 cv
1156.76 63.1563 1156.85 62.7363 1156.85 62.4424 cv
1156.85 62.2324 1156.76 62.0645 1156.39 62.0645 cv
1155.17 62.0225 1153.99 61.7705 1152.61 61.5181 cv
1150.8 61.2241 1148.7 61.0981 1147.23 61.0981 cv
1141.56 61.0981 1138.2 62.7783 1135.97 64.9204 cv
1132.7 68.1123 1131.82 72.2695 1131.82 74.6641 cv
1131.82 78.0664 1132.7 82.1406 1136.31 85.248 cv
1139.21 87.7676 1142.95 89.0703 1148.49 89.0703 cv
1148.49 89.0703 li
cp
1123.63 71.9336 mo
1123.63 66.3901 1123.63 65.3823 1123.67 64.2485 cv
1123.75 62.9883 1123.96 62.4844 1124.97 62.2744 cv
1125.39 62.1904 1125.64 62.1904 1125.89 62.1904 cv
1126.02 62.1904 1126.19 62.0225 1126.19 61.8965 cv
1126.19 61.6865 1126.02 61.6021 1125.6 61.6021 cv
1124.47 61.6021 1122.07 61.6865 1121.9 61.6865 cv
1121.69 61.6865 1119.38 61.6021 1118.17 61.6021 cv
1117.75 61.6021 1117.58 61.6865 1117.58 61.8965 cv
1117.58 62.0225 1117.7 62.1904 1117.87 62.1904 cv
1118.12 62.1904 1118.59 62.2324 1119.01 62.3164 cv
1119.8 62.4844 1120.1 63.0303 1120.18 64.2485 cv
1120.27 65.3823 1120.27 66.3901 1120.27 71.9336 cv
1120.27 78.2344 li
1120.27 81.6777 1120.22 84.4922 1120.06 85.9629 cv
1119.93 87.0117 1119.8 87.6836 1119.09 87.8516 cv
1118.75 87.9355 1118.29 88.0195 1117.96 88.0195 cv
1117.75 88.0195 1117.66 88.1875 1117.66 88.3145 cv
1117.66 88.5234 1117.87 88.6074 1118.25 88.6074 cv
1119.38 88.6074 1121.69 88.4824 1121.9 88.4824 cv
1122.07 88.4824 1124.47 88.6074 1126.52 88.6074 cv
1126.94 88.6074 1127.11 88.4824 1127.11 88.3145 cv
1127.11 88.1875 1127.03 88.0195 1126.82 88.0195 cv
1126.48 88.0195 1125.68 87.9355 1125.14 87.8516 cv
1124.05 87.6836 1123.92 87.0117 1123.79 85.9629 cv
1123.63 84.4922 1123.63 81.6777 1123.63 78.2344 cv
1123.63 71.9336 li
1123.63 71.9336 li
cp
1101.16 71.9336 mo
1101.16 66.3901 1101.16 65.3823 1101.2 64.2485 cv
1101.28 62.9883 1101.49 62.4424 1102.58 62.2324 cv
1103 62.1904 1103.55 62.1484 1103.8 62.1484 cv
1103.93 62.1484 1104.1 62.0225 1104.1 61.8965 cv
1104.1 61.6865 1103.89 61.6021 1103.51 61.6021 cv
1102.37 61.6021 1099.6 61.6865 1099.43 61.6865 cv
1099.22 61.6865 1096.91 61.6021 1095.23 61.6021 cv
1094.81 61.6021 1094.65 61.6865 1094.65 61.8965 cv
1094.65 62.0225 1094.81 62.1904 1094.94 62.1904 cv
1095.28 62.1904 1095.91 62.2324 1096.2 62.2744 cv
1097.42 62.4424 1097.63 63.0303 1097.71 64.2485 cv
1097.8 65.3823 1097.8 66.3901 1097.8 71.9336 cv
1097.8 78.2344 li
1097.8 81.6777 1097.8 84.4922 1097.59 85.9629 cv
1097.42 87.0117 1097.33 87.6836 1096.62 87.8516 cv
1096.28 87.9355 1095.82 88.0195 1095.49 88.0195 cv
1095.28 88.0195 1095.19 88.1875 1095.19 88.3145 cv
1095.19 88.5234 1095.4 88.6074 1095.78 88.6074 cv
1096.37 88.6074 1097.17 88.5664 1097.92 88.5234 cv
1098.64 88.4824 1099.27 88.4824 1099.43 88.4824 cv
1100.53 88.4824 1101.79 88.5234 1103.47 88.5664 cv
1105.19 88.6504 1107.25 88.6914 1109.89 88.6914 cv
1111.87 88.6914 1111.99 88.5664 1112.24 87.7266 cv
1112.54 86.6758 1112.79 84.5352 1112.79 84.1563 cv
1112.79 83.7773 1112.71 83.6094 1112.54 83.6094 cv
1112.33 83.6094 1112.2 83.8203 1112.16 84.0723 cv
1112.03 84.7871 1111.74 85.543 1111.28 86.0879 cv
1110.4 87.1387 1108.76 87.1797 1106.83 87.1797 cv
1103.93 87.1797 1102.5 86.9277 1101.91 86.3398 cv
1101.24 85.7109 1101.16 83.5684 1101.16 78.3184 cv
1101.16 71.9336 li
1101.16 71.9336 li
cp
1080.24 63.2402 mo
1084.86 63.3242 li
1088.39 63.4082 1089.19 64.2065 1089.31 65.2983 cv
1089.35 65.6763 li
1089.4 66.1802 1089.48 66.3062 1089.65 66.3062 cv
1089.82 66.3062 1089.98 66.1382 1089.98 65.8442 cv
1089.98 65.4243 1090.11 62.8623 1090.11 61.7705 cv
1090.11 61.5605 1090.11 61.3501 1089.94 61.3501 cv
1089.77 61.3501 1089.44 61.4341 1088.89 61.5181 cv
1088.3 61.6021 1087.46 61.6865 1086.25 61.6865 cv
1072.3 61.6865 li
1071.88 61.6865 1070.45 61.6445 1069.4 61.5181 cv
1068.4 61.3921 1068.02 61.0981 1067.77 61.0981 cv
1067.64 61.0981 1067.47 61.5605 1067.39 61.7705 cv
1067.35 62.0645 1066.59 65.2563 1066.59 65.6343 cv
1066.59 65.8442 1066.76 65.9282 1066.84 65.9282 cv
1067.01 65.9282 1067.14 65.8862 1067.22 65.5923 cv
1067.35 65.3403 1067.39 65.0884 1067.81 64.4585 cv
1068.35 63.6182 1069.24 63.3662 1071.55 63.3242 cv
1076.88 63.2402 li
1076.88 78.2344 li
1076.88 81.6777 1076.88 84.4922 1076.71 85.9629 cv
1076.59 87.0117 1076.38 87.7266 1075.62 87.8945 cv
1075.28 87.9785 1074.86 88.0625 1074.53 88.0625 cv
1074.32 88.0625 1074.23 88.1875 1074.23 88.3145 cv
1074.23 88.5234 1074.4 88.6074 1074.82 88.6074 cv
1075.91 88.6074 1078.48 88.4824 1078.64 88.4824 cv
1078.85 88.4824 1081.21 88.6074 1083.22 88.6074 cv
1083.64 88.6074 1083.81 88.4824 1083.81 88.3145 cv
1083.81 88.1875 1083.77 88.0195 1083.52 88.0195 cv
1083.18 88.0195 1082.34 87.9355 1081.84 87.8516 cv
1080.7 87.6836 1080.53 87.0117 1080.41 85.9629 cv
1080.24 84.4922 1080.24 81.6777 1080.24 78.2344 cv
1080.24 63.2402 li
1080.24 63.2402 li
cp
1049.71 78.2344 mo
1049.71 81.6777 1049.71 84.4922 1049.5 85.9629 cv
1049.33 87.0117 1049.25 87.7266 1048.53 87.8516 cv
1048.2 87.8945 1047.73 88.0195 1047.4 88.0195 cv
1047.19 88.0195 1047.1 88.1875 1047.1 88.3145 cv
1047.1 88.5234 1047.31 88.6074 1047.69 88.6074 cv
1048.83 88.6074 1051.14 88.4824 1051.35 88.4824 cv
1051.51 88.4824 1053.91 88.6074 1055.97 88.6074 cv
1056.39 88.6074 1056.55 88.4824 1056.55 88.3145 cv
1056.55 88.1875 1056.47 88.0195 1056.26 88.0195 cv
1055.92 88.0195 1055.13 87.9355 1054.58 87.8516 cv
1053.57 87.6836 1053.36 87.0117 1053.24 85.9629 cv
1053.07 84.5762 1053.07 81.7617 1053.07 78.2344 cv
1053.07 75.3789 li
1053.07 75.127 1053.11 75.043 1053.32 75.043 cv
1053.95 75.043 1058.32 75 1059.24 75.127 cv
1060.38 75.2949 1060.96 75.7559 1061.13 76.2598 cv
1061.3 76.6797 1061.34 77.1836 1061.38 77.5625 cv
1061.38 77.7305 1061.43 77.8984 1061.64 77.8984 cv
1061.89 77.8984 1061.97 77.5195 1061.97 77.1836 cv
1061.97 76.9316 1062.01 75.5039 1062.1 74.791 cv
1062.18 73.6152 1062.43 73.0254 1062.43 72.8164 cv
1062.43 72.6484 1062.39 72.5215 1062.22 72.5215 cv
1062.1 72.5215 1061.93 72.6895 1061.76 72.9004 cv
1061.43 73.3203 1060.92 73.4453 1060.04 73.5313 cv
1059.54 73.5723 1058.99 73.5723 1058.36 73.5723 cv
1053.32 73.6152 li
1053.07 73.6152 1053.07 73.4883 1053.07 73.2773 cv
1053.07 63.5342 li
1053.07 63.2402 1053.15 63.1563 1053.36 63.1563 cv
1059.41 63.2402 li
1060.84 63.2402 1061.72 63.8281 1061.93 64.2905 cv
1062.14 64.7524 1062.27 65.3403 1062.27 65.6343 cv
1062.27 65.8862 1062.39 66.0542 1062.56 66.0542 cv
1062.73 66.0542 1062.85 65.8442 1062.9 65.6763 cv
1062.98 65.2563 1063.02 63.6602 1063.06 63.3242 cv
1063.19 62.3164 1063.36 61.8965 1063.36 61.6445 cv
1063.36 61.4761 1063.27 61.3081 1063.11 61.3081 cv
1062.98 61.3081 1062.81 61.4761 1062.6 61.5181 cv
1062.27 61.6445 1061.64 61.6445 1060.92 61.6865 cv
1060.08 61.7285 1052.06 61.6865 1051.35 61.6865 cv
1051.14 61.6865 1048.83 61.6021 1047.15 61.6021 cv
1046.73 61.6021 1046.56 61.6865 1046.56 61.8965 cv
1046.56 62.0225 1046.73 62.1904 1046.85 62.1904 cv
1047.19 62.1904 1047.82 62.2324 1048.11 62.2744 cv
1049.33 62.4424 1049.54 63.0303 1049.62 64.2485 cv
1049.71 65.3823 1049.71 66.3901 1049.71 71.9336 cv
1049.71 78.2344 li
1049.71 78.2344 li
cp
1025.77 77.1836 mo
1025.64 77.1836 1025.6 77.0996 1025.64 76.9316 cv
1029.09 67.1465 li
1029.3 66.6001 1029.51 66.6001 1029.72 67.1465 cv
1033.37 76.9316 li
1033.41 77.0996 1033.41 77.1836 1033.24 77.1836 cv
1025.77 77.1836 li
1025.77 77.1836 li
cp
1020.43 84.6602 mo
1019.72 86.4668 1019.01 87.7266 1017.33 87.9355 cv
1017.03 87.9785 1016.49 88.0195 1016.23 88.0195 cv
1016.07 88.0195 1015.9 88.1465 1015.9 88.3145 cv
1015.9 88.5234 1016.15 88.6074 1016.61 88.6074 cv
1018.12 88.6074 1019.97 88.4824 1020.35 88.4824 cv
1020.77 88.4824 1022.79 88.6074 1023.67 88.6074 cv
1024 88.6074 1024.21 88.5234 1024.21 88.3145 cv
1024.21 88.1465 1024.13 88.0195 1023.84 88.0195 cv
1023.5 88.0195 li
1022.87 88.0195 1022.24 87.7676 1022.24 87.0547 cv
1022.24 86.4238 1022.45 85.543 1022.79 84.6602 cv
1024.89 78.9492 li
1024.97 78.7383 1025.1 78.6543 1025.26 78.6543 cv
1033.79 78.6543 li
1034 78.6543 1034.04 78.6953 1034.13 78.8652 cv
1037.44 87.0547 li
1037.7 87.6426 1037.32 87.9355 1037.11 88.0195 cv
1036.94 88.1035 1036.86 88.1035 1036.86 88.2715 cv
1036.86 88.4824 1037.44 88.4824 1038.16 88.5234 cv
1040.72 88.6074 1043.45 88.6074 1044 88.6074 cv
1044.42 88.6074 1044.84 88.5234 1044.84 88.3145 cv
1044.84 88.1035 1044.58 88.0195 1044.37 88.0195 cv
1044 88.0195 1043.45 87.9785 1042.9 87.8105 cv
1042.11 87.5586 1041.1 87.0957 1039.75 83.9043 cv
1037.49 78.4863 1031.56 63.7441 1030.89 62.2324 cv
1030.51 61.4341 1030.39 60.9302 1030.01 60.9302 cv
1029.76 60.9302 1029.59 61.1401 1029.13 62.3164 cv
1020.43 84.6602 li
1020.43 84.6602 li
cp
1010.48 71.9336 mo
1010.48 66.3901 1010.48 65.3823 1010.56 64.2485 cv
1010.65 62.9883 1010.86 62.4844 1011.82 62.2744 cv
1012.29 62.1904 1012.5 62.1904 1012.75 62.1904 cv
1012.92 62.1904 1013.08 62.0225 1013.08 61.8965 cv
1013.08 61.6865 1012.87 61.6021 1012.45 61.6021 cv
1011.36 61.6021 1009.01 61.6865 1008.8 61.6865 cv
1008.63 61.6865 1006.24 61.6021 1004.6 61.6021 cv
1004.18 61.6021 1004.01 61.6865 1004.01 61.8965 cv
1004.01 62.0225 1004.14 62.1904 1004.31 62.1904 cv
1004.64 62.1904 1005.27 62.2324 1005.57 62.2744 cv
1006.78 62.4424 1006.95 63.0303 1007.04 64.2485 cv
1007.08 65.3823 1007.12 66.4741 1007.12 72.0176 cv
1007.12 72.7734 li
1007.12 72.9844 1007.04 72.9844 1006.91 72.9844 cv
991.496 72.9844 li
991.369 72.9844 991.285 72.9844 991.285 72.7734 cv
991.285 72.0176 li
991.285 66.4741 991.285 65.3823 991.328 64.2485 cv
991.412 62.9883 991.621 62.4844 992.628 62.2744 cv
993.051 62.1904 993.302 62.1904 993.554 62.1904 cv
993.679 62.1904 993.847 62.0225 993.847 61.8965 cv
993.847 61.6865 993.679 61.6021 993.259 61.6021 cv
992.125 61.6021 989.773 61.6865 989.605 61.6865 cv
989.396 61.6865 987.042 61.6021 985.364 61.6021 cv
984.943 61.6021 984.775 61.6865 984.775 61.8965 cv
984.775 62.0225 984.943 62.1904 985.07 62.1904 cv
985.406 62.1904 986.035 62.2324 986.33 62.2744 cv
987.548 62.4424 987.757 63.0303 987.841 64.2485 cv
987.926 65.3823 987.926 66.3901 987.926 71.9336 cv
987.926 78.2344 li
987.926 81.6777 987.926 84.4922 987.716 85.9629 cv
987.548 87.0117 987.462 87.6836 986.75 87.8516 cv
986.414 87.9355 985.951 88.0195 985.615 88.0195 cv
985.406 88.0195 985.322 88.1875 985.322 88.3145 cv
985.322 88.5234 985.531 88.6074 985.91 88.6074 cv
987.042 88.6074 989.396 88.4824 989.605 88.4824 cv
989.773 88.4824 992.125 88.6074 994.184 88.6074 cv
994.603 88.6074 994.771 88.4824 994.771 88.3145 cv
994.771 88.1875 994.687 88.0195 994.478 88.0195 cv
994.142 88.0195 993.343 87.9355 992.798 87.8516 cv
991.705 87.6836 991.58 87.0117 991.453 85.9629 cv
991.285 84.4922 991.285 81.7617 991.285 78.3184 cv
991.285 74.748 li
991.285 74.5801 991.369 74.5391 991.496 74.5391 cv
1006.91 74.5391 li
1007.04 74.5391 1007.12 74.5801 1007.12 74.748 cv
1007.12 78.3184 li
1007.12 81.7617 1007.12 84.4512 1006.95 85.9199 cv
1006.83 86.9707 1006.7 87.6836 1005.94 87.8516 cv
1005.61 87.9355 1005.19 88.0195 1004.85 88.0195 cv
1004.64 88.0195 1004.56 88.1875 1004.56 88.3145 cv
1004.56 88.5234 1004.73 88.6074 1005.15 88.6074 cv
1006.24 88.6074 1008.63 88.4824 1008.8 88.4824 cv
1009.01 88.4824 1011.36 88.6074 1013.38 88.6074 cv
1013.8 88.6074 1014.01 88.4824 1014.01 88.3145 cv
1014.01 88.1875 1013.92 88.0195 1013.67 88.0195 cv
1013.38 88.0195 1012.54 87.9355 1012.03 87.8516 cv
1010.9 87.6836 1010.82 87.0117 1010.69 85.9629 cv
1010.52 84.4922 1010.48 81.6777 1010.48 78.2344 cv
1010.48 71.9336 li
1010.48 71.9336 li
cp
970.664 89.0703 mo
973.059 89.0703 975.83 88.8594 977.341 88.2715 cv
977.972 88.0195 978.056 87.8945 978.266 87.2227 cv
978.644 86.0039 979.148 82.8965 979.148 82.6445 cv
979.148 82.3926 978.98 82.1406 978.812 82.1406 cv
978.56 82.1406 978.517 82.2656 978.434 82.6445 cv
978.309 83.3164 977.804 84.8281 977.005 85.627 cv
975.535 87.0957 973.687 87.3066 970.916 87.3066 cv
963.019 87.3066 957.601 81.2168 957.601 74.3711 cv
957.601 70.7578 958.189 67.5664 960.919 65.0464 cv
962.222 63.8281 964.49 62.5684 969.236 62.5684 cv
972.511 62.5684 975.199 63.4502 976.501 64.5425 cv
977.468 65.2983 978.056 66.7261 978.056 68.1123 cv
978.056 68.6162 978.097 68.8682 978.349 68.8682 cv
978.56 68.8682 978.728 68.6582 978.769 68.1123 cv
978.812 67.6084 978.812 65.6343 978.853 64.4585 cv
978.937 63.1563 979.021 62.7363 979.021 62.4424 cv
979.021 62.2324 978.937 62.0645 978.56 62.0645 cv
977.341 62.0225 976.166 61.7705 974.779 61.5181 cv
972.975 61.2241 970.873 61.0981 969.404 61.0981 cv
963.734 61.0981 960.373 62.7783 958.148 64.9204 cv
954.871 68.1123 953.99 72.2695 953.99 74.6641 cv
953.99 78.0664 954.871 82.1406 958.484 85.248 cv
961.382 87.7676 965.119 89.0703 970.664 89.0703 cv
970.664 89.0703 li
cp
938.451 89.0703 mo
940.466 89.0703 942.777 88.8184 944.33 87.8105 cv
946.976 86.0879 947.775 83.8203 947.775 81.7207 cv
947.775 78.6543 946.22 76.1758 941.726 73.1094 cv
940.677 72.3965 li
937.023 69.9185 935.888 68.6162 935.888 66.3481 cv
935.888 63.8281 938.115 62.4844 940.802 62.4844 cv
944.121 62.4844 945.337 63.8281 945.591 64.2485 cv
945.801 64.6265 946.095 65.5923 946.136 66.0122 cv
946.179 66.3062 946.22 66.4741 946.472 66.4741 cv
946.725 66.4741 946.767 66.2222 946.767 65.6763 cv
946.767 63.2402 946.935 62.0645 946.935 61.8965 cv
946.935 61.6865 946.851 61.6445 946.556 61.6445 cv
946.263 61.6445 945.968 61.6445 945.253 61.4761 cv
944.373 61.2661 942.902 61.0562 941.434 61.0562 cv
936.56 61.0562 933.242 63.5762 933.242 67.7764 cv
933.242 70.2544 934.544 72.4375 938.535 75.4199 cv
940.214 76.6797 li
943.49 79.1172 944.876 80.334 944.876 82.8965 cv
944.876 85.584 942.986 87.6426 939.332 87.6426 cv
936.855 87.6426 934.082 86.7188 933.494 84.1152 cv
933.369 83.6094 933.369 83.1055 933.369 82.8125 cv
933.369 82.5176 933.242 82.3926 933.033 82.3926 cv
932.822 82.3926 932.739 82.6016 932.739 82.9805 cv
932.697 83.5684 932.529 84.9961 932.529 86.7598 cv
932.529 87.7266 932.57 87.8516 933.074 88.1035 cv
934.585 88.8184 936.728 89.0703 938.451 89.0703 cv
938.451 89.0703 li
cp
902.33 66.8945 mo
903.464 68.1543 907.623 72.5215 911.906 77.0156 cv
915.812 81.0898 921.146 86.3398 921.525 86.6758 cv
923.582 88.5664 923.96 88.8594 924.337 88.8594 cv
924.591 88.8594 924.632 88.6504 924.632 86.2988 cv
924.716 65.3823 li
924.716 63.2402 924.801 62.5264 926.019 62.2744 cv
926.439 62.1904 926.732 62.1904 926.9 62.1904 cv
927.152 62.1904 927.32 61.9805 927.32 61.8545 cv
927.32 61.6445 927.027 61.6021 926.648 61.6021 cv
925.136 61.6021 923.917 61.6865 923.498 61.6865 cv
923.078 61.6865 921.314 61.6021 919.634 61.6021 cv
919.214 61.6021 918.919 61.6445 918.919 61.8545 cv
918.919 61.9805 918.962 62.1904 919.214 62.1904 cv
919.509 62.1904 920.349 62.2324 921.021 62.3584 cv
922.154 62.5684 922.365 63.3662 922.406 65.6763 cv
922.785 83.5684 li
921.65 82.3926 917.703 78.1504 914.048 74.3711 cv
908.335 68.4902 902.96 62.7783 902.373 62.1904 cv
901.994 61.8125 901.365 61.0981 900.945 61.0981 cv
900.65 61.0981 900.441 61.4761 900.441 62.9043 cv
900.441 83.3574 li
900.441 86.5918 900.314 87.5586 899.39 87.8105 cv
898.845 87.9785 898.171 88.0195 897.878 88.0195 cv
897.71 88.0195 897.583 88.1465 897.583 88.3145 cv
897.583 88.5664 897.794 88.6074 898.171 88.6074 cv
899.853 88.6074 901.406 88.4824 901.742 88.4824 cv
902.078 88.4824 903.548 88.6074 905.648 88.6074 cv
906.068 88.6074 906.32 88.5234 906.32 88.3145 cv
906.32 88.1465 906.195 88.0195 906.027 88.0195 cv
905.691 88.0195 904.851 87.9785 904.179 87.8105 cv
903.169 87.5586 902.833 86.6758 902.75 83.7363 cv
902.33 66.8945 li
902.33 66.8945 li
cp
878.054 78.2344 mo
878.054 81.6777 878.054 84.4922 877.845 85.9629 cv
877.677 87.0117 877.593 87.7266 876.878 87.8516 cv
876.542 87.8945 876.08 88.0195 875.744 88.0195 cv
875.535 88.0195 875.451 88.1875 875.451 88.3145 cv
875.451 88.5234 875.66 88.6074 876.039 88.6074 cv
876.626 88.6074 877.466 88.5664 878.181 88.5234 cv
878.978 88.4824 879.693 88.4824 879.777 88.4824 cv
880.322 88.4824 881.289 88.4824 882.843 88.5664 cv
884.355 88.6074 886.496 88.6914 889.269 88.6914 cv
890.697 88.6914 891.076 88.6914 891.328 87.7676 cv
891.537 87.0117 891.83 84.5762 891.83 84.3242 cv
891.83 84.0723 891.789 83.7773 891.578 83.7773 cv
891.369 83.7773 891.285 83.9043 891.201 84.3242 cv
890.992 85.752 890.486 86.3828 889.522 86.8027 cv
888.554 87.1797 886.791 87.1797 885.826 87.1797 cv
882.171 87.1797 881.5 86.7188 881.414 84.3242 cv
881.373 83.6094 881.414 79.4531 881.414 78.2344 cv
881.414 75.252 li
881.414 75.127 881.457 75 881.666 75 cv
882.296 75 886.244 75.043 887.251 75.168 cv
888.681 75.3359 889.017 75.7559 889.142 76.2598 cv
889.31 76.7227 889.31 77.0996 889.31 77.4355 cv
889.31 77.6465 889.397 77.7715 889.562 77.7715 cv
889.814 77.7715 889.898 77.3945 889.898 77.0996 cv
889.898 76.8477 889.982 75.5039 890.068 74.791 cv
890.15 73.6152 890.361 73.0254 890.361 72.8164 cv
890.361 72.6055 890.277 72.5215 890.15 72.5215 cv
890.025 72.5215 889.857 72.7324 889.605 72.9844 cv
889.226 73.3613 888.681 73.4043 887.798 73.4883 cv
886.959 73.5723 882.085 73.5723 881.625 73.5723 cv
881.414 73.5723 881.414 73.4453 881.414 73.1934 cv
881.414 63.4922 li
881.414 63.2402 881.457 63.1143 881.625 63.1143 cv
882.044 63.1143 886.328 63.1563 886.959 63.2402 cv
888.975 63.4922 889.353 63.7441 889.605 64.3325 cv
889.773 64.7524 889.814 65.3403 889.814 65.5923 cv
889.814 65.8862 889.898 66.0542 890.109 66.0542 cv
890.277 66.0542 890.404 65.8442 890.445 65.6763 cv
890.529 65.2563 890.614 63.6602 890.656 63.3242 cv
890.74 62.3164 890.949 61.8965 890.949 61.6445 cv
890.949 61.4761 890.906 61.3081 890.781 61.3081 cv
890.614 61.3081 890.445 61.4341 890.277 61.4761 cv
889.982 61.5181 889.31 61.6445 888.597 61.6865 cv
887.757 61.7285 880.029 61.6865 879.777 61.6865 cv
879.568 61.6865 877.171 61.6021 875.492 61.6021 cv
875.072 61.6021 874.904 61.6865 874.904 61.8965 cv
874.904 62.0225 875.072 62.1904 875.199 62.1904 cv
875.535 62.1904 876.164 62.2324 876.459 62.2744 cv
877.677 62.4424 877.886 63.0303 877.97 64.2485 cv
878.054 65.3823 878.054 66.3901 878.054 71.9336 cv
878.054 78.2344 li
878.054 78.2344 li
cp
859.156 89.0703 mo
861.171 89.0703 863.482 88.8184 865.035 87.8105 cv
867.681 86.0879 868.48 83.8203 868.48 81.7207 cv
868.48 78.6543 866.926 76.1758 862.431 73.1094 cv
861.382 72.3965 li
857.728 69.9185 856.593 68.6162 856.593 66.3481 cv
856.593 63.8281 858.82 62.4844 861.507 62.4844 cv
864.826 62.4844 866.042 63.8281 866.294 64.2485 cv
866.505 64.6265 866.801 65.5923 866.841 66.0122 cv
866.884 66.3062 866.926 66.4741 867.177 66.4741 cv
867.429 66.4741 867.472 66.2222 867.472 65.6763 cv
867.472 63.2402 867.64 62.0645 867.64 61.8965 cv
867.64 61.6865 867.556 61.6445 867.261 61.6445 cv
866.968 61.6445 866.673 61.6445 865.959 61.4761 cv
865.078 61.2661 863.607 61.0562 862.138 61.0562 cv
857.265 61.0562 853.947 63.5762 853.947 67.7764 cv
853.947 70.2544 855.25 72.4375 859.24 75.4199 cv
860.919 76.6797 li
864.195 79.1172 865.582 80.334 865.582 82.8965 cv
865.582 85.584 863.691 87.6426 860.037 87.6426 cv
857.56 87.6426 854.787 86.7188 854.199 84.1152 cv
854.074 83.6094 854.074 83.1055 854.074 82.8125 cv
854.074 82.5176 853.947 82.3926 853.739 82.3926 cv
853.527 82.3926 853.443 82.6016 853.443 82.9805 cv
853.402 83.5684 853.234 84.9961 853.234 86.7598 cv
853.234 87.7266 853.275 87.8516 853.779 88.1035 cv
855.291 88.8184 857.434 89.0703 859.156 89.0703 cv
859.156 89.0703 li
cp
837.148 89.0703 mo
839.164 89.0703 841.475 88.8184 843.027 87.8105 cv
845.673 86.0879 846.472 83.8203 846.472 81.7207 cv
846.472 78.6543 844.917 76.1758 840.423 73.1094 cv
839.373 72.3965 li
835.72 69.9185 834.585 68.6162 834.585 66.3481 cv
834.585 63.8281 836.813 62.4844 839.5 62.4844 cv
842.818 62.4844 844.035 63.8281 844.287 64.2485 cv
844.498 64.6265 844.791 65.5923 844.834 66.0122 cv
844.875 66.3062 844.917 66.4741 845.169 66.4741 cv
845.421 66.4741 845.464 66.2222 845.464 65.6763 cv
845.464 63.2402 845.632 62.0645 845.632 61.8965 cv
845.632 61.6865 845.546 61.6445 845.253 61.6445 cv
844.959 61.6445 844.666 61.6445 843.951 61.4761 cv
843.07 61.2661 841.599 61.0562 840.128 61.0562 cv
835.257 61.0562 831.939 63.5762 831.939 67.7764 cv
831.939 70.2544 833.243 72.4375 837.232 75.4199 cv
838.912 76.6797 li
842.188 79.1172 843.574 80.334 843.574 82.8965 cv
843.574 85.584 841.684 87.6426 838.03 87.6426 cv
835.552 87.6426 832.78 86.7188 832.191 84.1152 cv
832.066 83.6094 832.066 83.1055 832.066 82.8125 cv
832.066 82.5176 831.939 82.3926 831.73 82.3926 cv
831.519 82.3926 831.435 82.6016 831.435 82.9805 cv
831.394 83.5684 831.226 84.9961 831.226 86.7598 cv
831.226 87.7266 831.267 87.8516 831.772 88.1035 cv
833.283 88.8184 835.426 89.0703 837.148 89.0703 cv
837.148 89.0703 li
cp
821.902 71.9336 mo
821.902 66.3901 821.902 65.3823 821.943 64.2485 cv
822.027 62.9883 822.239 62.4844 823.247 62.2744 cv
823.666 62.1904 823.917 62.1904 824.169 62.1904 cv
824.294 62.1904 824.464 62.0225 824.464 61.8965 cv
824.464 61.6865 824.294 61.6021 823.875 61.6021 cv
822.743 61.6021 820.347 61.6865 820.18 61.6865 cv
819.97 61.6865 817.66 61.6021 816.441 61.6021 cv
816.022 61.6021 815.853 61.6865 815.853 61.8965 cv
815.853 62.0225 815.98 62.1904 816.148 62.1904 cv
816.401 62.1904 816.861 62.2324 817.281 62.3164 cv
818.08 62.4844 818.373 63.0303 818.457 64.2485 cv
818.541 65.3823 818.541 66.3901 818.541 71.9336 cv
818.541 78.2344 li
818.541 81.6777 818.5 84.4922 818.332 85.9629 cv
818.205 87.0117 818.08 87.6836 817.365 87.8516 cv
817.03 87.9355 816.568 88.0195 816.232 88.0195 cv
816.022 88.0195 815.938 88.1875 815.938 88.3145 cv
815.938 88.5234 816.148 88.6074 816.526 88.6074 cv
817.66 88.6074 819.97 88.4824 820.18 88.4824 cv
820.347 88.4824 822.743 88.6074 824.801 88.6074 cv
825.22 88.6074 825.388 88.4824 825.388 88.3145 cv
825.388 88.1875 825.305 88.0195 825.093 88.0195 cv
824.757 88.0195 823.959 87.9355 823.414 87.8516 cv
822.322 87.6836 822.195 87.0117 822.07 85.9629 cv
821.902 84.4922 821.902 81.6777 821.902 78.2344 cv
821.902 71.9336 li
821.902 71.9336 li
cp
793.636 63.4082 mo
793.176 62.1904 792.88 61.7285 792.628 61.7285 cv
792.417 61.7285 792.166 61.9385 791.622 63.3662 cv
783.892 83.3164 li
783.809 83.3164 li
783.347 81.8457 779.566 68.7422 778.978 66.4741 cv
778.559 64.8784 778.266 63.6182 778.266 63.1563 cv
778.266 62.6943 778.517 62.4844 778.769 62.4004 cv
779.189 62.1904 779.777 62.1904 780.07 62.1904 cv
780.239 62.1904 780.449 62.0645 780.449 61.8545 cv
780.449 61.6865 780.281 61.6021 779.777 61.6021 cv
777.93 61.6021 776.248 61.6865 775.912 61.6865 cv
775.535 61.6865 773.476 61.6021 771.544 61.6021 cv
771.209 61.6021 770.957 61.6865 770.957 61.8545 cv
770.957 62.0645 771.125 62.1904 771.292 62.1904 cv
771.544 62.1904 772.468 62.2324 772.972 62.4004 cv
773.939 62.7363 774.316 63.1982 774.905 65.0884 cv
781.457 86.2559 li
782.213 88.6914 782.507 89.0703 782.884 89.0703 cv
783.305 89.0703 783.556 88.6914 784.188 87.1797 cv
785.531 83.8613 790.53 70.8008 791.789 67.6924 cv
799.013 87.2227 li
799.517 88.6074 799.853 89.0703 800.23 89.0703 cv
800.651 89.0703 800.861 88.6504 801.826 86.0039 cv
803.296 82.0137 806.951 70.6738 808.588 66.1382 cv
809.302 64.1646 809.891 62.7363 810.982 62.3584 cv
811.402 62.2324 812.118 62.1904 812.243 62.1904 cv
812.494 62.1904 812.578 61.9805 812.578 61.8125 cv
812.578 61.6865 812.41 61.6021 812.074 61.6021 cv
810.941 61.6021 809.345 61.6865 809.093 61.6865 cv
808.757 61.6865 807.203 61.6021 805.313 61.6021 cv
804.851 61.6021 804.684 61.6865 804.684 61.8545 cv
804.684 61.9805 804.809 62.1904 805.019 62.1904 cv
806.699 62.1904 806.993 62.6104 806.993 63.2402 cv
806.993 63.7021 806.951 64.1226 806.572 65.4663 cv
805.272 70.0444 801.953 80.377 801.03 83.3164 cv
800.861 83.3164 li
793.636 63.4082 li
793.636 63.4082 li
cp
752.98 63.4922 mo
752.98 63.2822 753.107 63.1563 753.276 63.0723 cv
753.652 62.9883 754.828 62.8623 755.921 62.8623 cv
759.869 62.8623 762.305 65.4243 762.305 69.8765 cv
762.305 72.6055 761.338 74.4961 760.078 75.3359 cv
759.197 75.9238 758.189 75.9668 757.306 75.9668 cv
755.667 75.9668 753.78 75.7148 753.232 75.4199 cv
753.064 75.2949 752.98 75.168 752.98 74.959 cv
752.98 63.4922 li
752.98 63.4922 li
cp
749.789 78.2344 mo
749.789 81.6777 749.789 84.4922 749.578 85.9629 cv
749.41 87.0117 749.326 87.6836 748.614 87.8516 cv
748.277 87.9355 747.814 88.0195 747.478 88.0195 cv
747.269 88.0195 747.185 88.1875 747.185 88.3145 cv
747.185 88.5234 747.394 88.6074 747.773 88.6074 cv
748.906 88.6074 751.384 88.4824 751.427 88.4824 cv
751.596 88.4824 753.947 88.6074 755.963 88.6074 cv
756.382 88.6074 756.551 88.4824 756.551 88.3145 cv
756.551 88.1875 756.509 88.0195 756.257 88.0195 cv
755.921 88.0195 755.123 87.9355 754.619 87.8516 cv
753.484 87.6836 753.276 87.0117 753.148 85.9629 cv
752.98 84.4922 752.98 81.7207 752.98 78.2754 cv
752.98 77.4355 li
752.98 77.2266 753.064 77.1426 753.232 77.1426 cv
757.938 77.2266 li
758.189 77.2266 758.273 77.2676 758.441 77.4355 cv
759.239 78.4023 760.876 80.7129 762.431 82.6445 cv
764.531 85.332 765.875 87.0547 767.47 87.8945 cv
768.394 88.3984 769.318 88.6074 771.417 88.6074 cv
773.728 88.6074 li
774.401 88.6074 774.611 88.5234 774.611 88.3145 cv
774.611 88.1875 774.484 88.0195 774.276 88.0195 cv
774.064 88.0195 773.688 88.0195 772.972 87.8945 cv
772.048 87.7676 770.83 87.4316 768.857 85.416 cv
766.714 83.1895 764.152 79.957 761.128 76.1758 cv
764.572 73.2363 765.664 70.6738 765.664 68.0283 cv
765.664 65.5503 764.027 63.8281 763.103 63.1563 cv
761.171 61.8125 758.566 61.6021 756.214 61.6021 cv
755.08 61.6021 751.972 61.6865 751.596 61.6865 cv
751.384 61.6865 748.906 61.6021 747.226 61.6021 cv
746.806 61.6021 746.638 61.6865 746.638 61.8965 cv
746.638 62.0225 746.806 62.1904 746.934 62.1904 cv
747.269 62.1904 747.898 62.2324 748.193 62.2744 cv
749.41 62.4424 749.622 63.0303 749.705 64.2485 cv
749.789 65.3823 749.789 66.3901 749.789 71.9336 cv
749.789 78.2344 li
749.789 78.2344 li
cp
717.155 77.1836 mo
717.155 82.3926 718.582 84.8711 720.388 86.5508 cv
722.993 88.9863 726.857 89.0703 728.074 89.0703 cv
730.259 89.0703 733.115 88.7754 735.802 86.4668 cv
738.743 83.9453 739.247 79.6211 739.247 75.7559 cv
739.247 71.9336 li
739.247 66.3901 739.205 65.3823 739.289 64.2485 cv
739.373 63.0723 739.582 62.4844 740.592 62.2744 cv
741.052 62.1904 741.263 62.1904 741.516 62.1904 cv
741.684 62.1904 741.809 62.0225 741.809 61.8965 cv
741.809 61.6865 741.641 61.6021 741.221 61.6021 cv
740.128 61.6021 738.365 61.6865 738.114 61.6865 cv
737.902 61.6865 735.761 61.6021 734.123 61.6021 cv
733.703 61.6021 733.535 61.6865 733.535 61.8965 cv
733.535 62.0225 733.66 62.1904 733.828 62.1904 cv
734.164 62.1904 734.794 62.2324 735.088 62.2744 cv
736.306 62.4424 736.517 63.1143 736.559 64.2485 cv
736.601 65.3823 736.642 66.3901 736.642 71.9336 cv
736.642 76.4277 li
736.642 80.082 736.266 83.0215 734.542 85.0801 cv
733.284 86.5918 731.099 87.5996 728.83 87.5996 cv
726.73 87.5996 725.134 87.3066 723.328 85.668 cv
721.732 84.2402 720.599 82.0977 720.599 76.9316 cv
720.599 71.9336 li
720.599 66.3901 720.599 65.3823 720.684 64.2485 cv
720.767 63.0723 720.976 62.4424 721.943 62.2744 cv
722.405 62.1904 722.615 62.1904 722.868 62.1904 cv
723.035 62.1904 723.203 62.0225 723.203 61.8965 cv
723.203 61.6865 722.993 61.6021 722.572 61.6021 cv
721.48 61.6021 719.171 61.6865 718.834 61.6865 cv
718.498 61.6865 716.273 61.6021 714.593 61.6021 cv
714.173 61.6021 714.003 61.6865 714.003 61.8965 cv
714.003 62.0225 714.173 62.1904 714.298 62.1904 cv
714.634 62.1904 715.266 62.2324 715.559 62.2744 cv
716.777 62.4424 716.986 63.1143 717.07 64.2485 cv
717.155 65.3823 717.155 66.3901 717.155 71.9336 cv
717.155 77.1836 li
717.155 77.1836 li
cp
701.49 63.2402 mo
706.109 63.3242 li
709.638 63.4082 710.435 64.2065 710.563 65.2983 cv
710.603 65.6763 li
710.647 66.1802 710.73 66.3062 710.898 66.3062 cv
711.066 66.3062 711.234 66.1382 711.234 65.8442 cv
711.234 65.4243 711.359 62.8623 711.359 61.7705 cv
711.359 61.5605 711.359 61.3501 711.191 61.3501 cv
711.023 61.3501 710.688 61.4341 710.142 61.5181 cv
709.555 61.6021 708.713 61.6865 707.497 61.6865 cv
693.552 61.6865 li
693.132 61.6865 691.703 61.6445 690.655 61.5181 cv
689.647 61.3921 689.267 61.0981 689.016 61.0981 cv
688.891 61.0981 688.722 61.5605 688.638 61.7705 cv
688.596 62.0645 687.839 65.2563 687.839 65.6343 cv
687.839 65.8442 688.007 65.9282 688.092 65.9282 cv
688.259 65.9282 688.386 65.8862 688.471 65.5923 cv
688.596 65.3403 688.638 65.0884 689.059 64.4585 cv
689.603 63.6182 690.486 63.3662 692.794 63.3242 cv
698.13 63.2402 li
698.13 78.2344 li
698.13 81.6777 698.13 84.4922 697.96 85.9629 cv
697.835 87.0117 697.625 87.7266 696.869 87.8945 cv
696.534 87.9785 696.114 88.0625 695.777 88.0625 cv
695.568 88.0625 695.484 88.1875 695.484 88.3145 cv
695.484 88.5234 695.652 88.6074 696.072 88.6074 cv
697.164 88.6074 699.726 88.4824 699.894 88.4824 cv
700.103 88.4824 702.455 88.6074 704.472 88.6074 cv
704.892 88.6074 705.06 88.4824 705.06 88.3145 cv
705.06 88.1875 705.017 88.0195 704.766 88.0195 cv
704.43 88.0195 703.589 87.9355 703.085 87.8516 cv
701.951 87.6836 701.784 87.0117 701.659 85.9629 cv
701.49 84.4922 701.49 81.6777 701.49 78.2344 cv
701.49 63.2402 li
701.49 63.2402 li
cp
672.173 77.1836 mo
672.046 77.1836 672.005 77.0996 672.046 76.9316 cv
675.493 67.1465 li
675.701 66.6001 675.912 66.6001 676.122 67.1465 cv
679.776 76.9316 li
679.818 77.0996 679.818 77.1836 679.651 77.1836 cv
672.173 77.1836 li
672.173 77.1836 li
cp
666.839 84.6602 mo
666.125 86.4668 665.412 87.7266 663.732 87.9355 cv
663.438 87.9785 662.892 88.0195 662.641 88.0195 cv
662.472 88.0195 662.305 88.1465 662.305 88.3145 cv
662.305 88.5234 662.556 88.6074 663.017 88.6074 cv
664.53 88.6074 666.376 88.4824 666.755 88.4824 cv
667.176 88.4824 669.191 88.6074 670.074 88.6074 cv
670.41 88.6074 670.619 88.5234 670.619 88.3145 cv
670.619 88.1465 670.535 88.0195 670.243 88.0195 cv
669.906 88.0195 li
669.276 88.0195 668.647 87.7676 668.647 87.0547 cv
668.647 86.4238 668.855 85.543 669.191 84.6602 cv
671.291 78.9492 li
671.375 78.7383 671.501 78.6543 671.669 78.6543 cv
680.195 78.6543 li
680.406 78.6543 680.447 78.6953 680.531 78.8652 cv
683.849 87.0547 li
684.101 87.6426 683.725 87.9355 683.513 88.0195 cv
683.346 88.1035 683.261 88.1035 683.261 88.2715 cv
683.261 88.4824 683.849 88.4824 684.564 88.5234 cv
687.125 88.6074 689.855 88.6074 690.402 88.6074 cv
690.822 88.6074 691.243 88.5234 691.243 88.3145 cv
691.243 88.1035 690.99 88.0195 690.78 88.0195 cv
690.402 88.0195 689.855 87.9785 689.31 87.8105 cv
688.511 87.5586 687.503 87.0957 686.16 83.9043 cv
683.892 78.4863 677.971 63.7441 677.296 62.2324 cv
676.919 61.4341 676.792 60.9302 676.416 60.9302 cv
676.164 60.9302 675.997 61.1401 675.534 62.3164 cv
666.839 84.6602 li
666.839 84.6602 li
cp
631.686 62.7783 mo
633.03 64.2905 637.776 69.5825 642.648 74.832 cv
647.099 79.6211 653.148 85.7949 653.609 86.2148 cv
655.835 88.4395 656.339 88.9023 656.676 88.9023 cv
656.971 88.9023 657.055 88.6914 657.055 85.9199 cv
657.138 61.3081 li
657.138 58.7881 657.306 57.8643 658.691 57.5703 cv
659.195 57.4443 659.49 57.4443 659.699 57.4443 cv
659.994 57.4443 660.162 57.3184 660.162 57.1504 cv
660.162 56.8984 659.868 56.8564 659.406 56.8564 cv
657.684 56.8564 656.296 56.9824 655.835 56.9824 cv
655.373 56.9824 653.357 56.8564 651.468 56.8564 cv
650.963 56.8564 650.626 56.8984 650.626 57.1504 cv
650.626 57.3184 650.669 57.4443 650.963 57.4443 cv
651.301 57.4443 652.266 57.4863 653.022 57.6543 cv
654.324 57.9902 654.618 58.9146 654.66 61.6445 cv
655.122 82.9805 li
653.777 81.5938 649.199 76.4707 645.041 72.0176 cv
638.574 65.0884 632.316 58.3262 631.686 57.6123 cv
631.266 57.1924 630.552 56.2681 630.216 56.2681 cv
629.88 56.2681 629.754 56.7305 629.754 58.3682 cv
629.712 82.4336 li
629.712 86.2559 629.502 87.4746 628.452 87.7676 cv
627.822 87.9785 627.066 88.0195 626.73 88.0195 cv
626.52 88.0195 626.394 88.1035 626.394 88.2715 cv
626.394 88.5664 626.646 88.6074 627.066 88.6074 cv
628.956 88.6074 630.72 88.4824 631.098 88.4824 cv
631.476 88.4824 633.156 88.6074 635.55 88.6074 cv
636.054 88.6074 636.306 88.5234 636.306 88.2715 cv
636.306 88.1035 636.18 88.0195 635.97 88.0195 cv
635.592 88.0195 634.668 87.9785 633.87 87.7676 cv
632.736 87.4316 632.316 86.3398 632.232 82.8965 cv
631.686 62.7783 li
631.686 62.7783 li
cp
f
971.082 22.2124 mo
970.41 22.2124 970.242 22.2544 970.158 22.5483 cv
969.529 24.9004 li
969.445 25.2783 969.486 25.5303 969.739 25.5303 cv
969.949 25.5303 970.662 25.1104 971.46 24.9004 cv
972.888 24.5225 980.322 23.5142 981.457 23.3462 cv
982.128 23.2202 982.927 23.1362 982.927 22.6323 cv
982.927 22.2964 982.38 22.2124 981.666 22.2124 cv
971.082 22.2124 li
971.082 22.2124 li
cp
961.507 18.6841 mo
961.507 13.1401 961.507 12.1323 961.591 10.9985 cv
961.676 9.73828 961.884 9.23438 962.851 9.02441 cv
963.312 8.94043 963.523 8.94043 963.775 8.94043 cv
963.943 8.94043 964.111 8.77246 964.111 8.64648 cv
964.111 8.43652 963.9 8.35254 963.48 8.35254 cv
962.388 8.35254 960.037 8.43652 959.826 8.43652 cv
959.658 8.43652 957.266 8.35254 955.626 8.35254 cv
955.207 8.35254 955.039 8.43652 955.039 8.64648 cv
955.039 8.77246 955.164 8.94043 955.332 8.94043 cv
955.667 8.94043 956.298 8.98242 956.593 9.02441 cv
957.81 9.19238 957.978 9.78027 958.062 10.9985 cv
958.105 12.1323 958.146 13.2241 958.146 18.7681 cv
958.146 19.5244 li
958.146 19.7344 958.062 19.7344 957.937 19.7344 cv
942.523 19.7344 li
942.396 19.7344 942.312 19.7344 942.312 19.5244 cv
942.312 18.7681 li
942.312 13.2241 942.312 12.1323 942.355 10.9985 cv
942.439 9.73828 942.648 9.23438 943.656 9.02441 cv
944.076 8.94043 944.328 8.94043 944.58 8.94043 cv
944.707 8.94043 944.875 8.77246 944.875 8.64648 cv
944.875 8.43652 944.707 8.35254 944.287 8.35254 cv
943.152 8.35254 940.801 8.43652 940.632 8.43652 cv
940.421 8.43652 938.07 8.35254 936.391 8.35254 cv
935.97 8.35254 935.802 8.43652 935.802 8.64648 cv
935.802 8.77246 935.97 8.94043 936.097 8.94043 cv
936.434 8.94043 937.062 8.98242 937.357 9.02441 cv
938.574 9.19238 938.785 9.78027 938.869 10.9985 cv
938.953 12.1323 938.953 13.1401 938.953 18.6841 cv
938.953 24.9844 li
938.953 28.4282 938.953 31.2422 938.742 32.7124 cv
938.574 33.7622 938.49 34.4341 937.777 34.6021 cv
937.441 34.6865 936.978 34.7705 936.642 34.7705 cv
936.434 34.7705 936.349 34.9385 936.349 35.0645 cv
936.349 35.2744 936.559 35.3584 936.937 35.3584 cv
938.07 35.3584 940.421 35.2324 940.632 35.2324 cv
940.801 35.2324 943.152 35.3584 945.21 35.3584 cv
945.63 35.3584 945.798 35.2324 945.798 35.0645 cv
945.798 34.9385 945.714 34.7705 945.503 34.7705 cv
945.167 34.7705 944.371 34.6865 943.824 34.6021 cv
942.732 34.4341 942.607 33.7622 942.48 32.7124 cv
942.312 31.2422 942.312 28.5122 942.312 25.0684 cv
942.312 21.4985 li
942.312 21.3306 942.396 21.2881 942.523 21.2881 cv
957.937 21.2881 li
958.062 21.2881 958.146 21.3306 958.146 21.4985 cv
958.146 25.0684 li
958.146 28.5122 958.146 31.2002 957.978 32.6704 cv
957.853 33.7202 957.726 34.4341 956.97 34.6021 cv
956.634 34.6865 956.214 34.7705 955.878 34.7705 cv
955.667 34.7705 955.583 34.9385 955.583 35.0645 cv
955.583 35.2744 955.751 35.3584 956.171 35.3584 cv
957.266 35.3584 959.658 35.2324 959.826 35.2324 cv
960.037 35.2324 962.388 35.3584 964.404 35.3584 cv
964.824 35.3584 965.035 35.2324 965.035 35.0645 cv
965.035 34.9385 964.951 34.7705 964.699 34.7705 cv
964.404 34.7705 963.564 34.6865 963.06 34.6021 cv
961.927 34.4341 961.843 33.7622 961.716 32.7124 cv
961.548 31.2422 961.507 28.4282 961.507 24.9844 cv
961.507 18.6841 li
961.507 18.6841 li
cp
921.691 35.8203 mo
924.085 35.8203 926.857 35.6104 928.369 35.0225 cv
929 34.7705 929.083 34.6445 929.292 33.9722 cv
929.671 32.7544 930.176 29.6465 930.176 29.3945 cv
930.176 29.1421 930.007 28.8901 929.839 28.8901 cv
929.587 28.8901 929.544 29.0161 929.46 29.3945 cv
929.335 30.0664 928.832 31.5781 928.033 32.3765 cv
926.564 33.8462 924.716 34.0562 921.943 34.0562 cv
914.046 34.0562 908.628 27.9663 908.628 21.1201 cv
908.628 17.5083 909.218 14.3164 911.947 11.7964 cv
913.25 10.5781 915.517 9.31836 920.263 9.31836 cv
923.539 9.31836 926.228 10.2002 927.529 11.2925 cv
928.496 12.0483 929.083 13.4761 929.083 14.8623 cv
929.083 15.3662 929.125 15.6182 929.376 15.6182 cv
929.587 15.6182 929.755 15.4082 929.796 14.8623 cv
929.839 14.3584 929.839 12.3843 929.882 11.2085 cv
929.966 9.90625 930.051 9.48633 930.051 9.19238 cv
930.051 8.98242 929.966 8.81445 929.587 8.81445 cv
928.369 8.77246 927.193 8.52051 925.809 8.26855 cv
924.001 7.97412 921.902 7.84814 920.431 7.84814 cv
914.761 7.84814 911.402 9.52832 909.176 11.6704 cv
905.9 14.8623 905.017 19.0205 905.017 21.4146 cv
905.017 24.8164 905.9 28.8901 909.511 31.9985 cv
912.41 34.5181 916.148 35.8203 921.691 35.8203 cv
921.691 35.8203 li
cp
889.478 35.8203 mo
891.494 35.8203 893.804 35.5684 895.357 34.5605 cv
898.003 32.8384 898.802 30.5703 898.802 28.4702 cv
898.802 25.4043 897.248 22.9263 892.753 19.8604 cv
891.703 19.1465 li
888.051 16.6685 886.916 15.3662 886.916 13.0981 cv
886.916 10.5781 889.142 9.23438 891.83 9.23438 cv
895.148 9.23438 896.365 10.5781 896.617 10.9985 cv
896.828 11.3765 897.121 12.3423 897.164 12.7622 cv
897.205 13.0562 897.248 13.2241 897.5 13.2241 cv
897.751 13.2241 897.792 12.9722 897.792 12.4263 cv
897.792 9.99023 897.96 8.81445 897.96 8.64648 cv
897.96 8.43652 897.876 8.39453 897.583 8.39453 cv
897.289 8.39453 896.996 8.39453 896.281 8.22656 cv
895.4 8.01611 893.929 7.80615 892.459 7.80615 cv
887.587 7.80615 884.269 10.3262 884.269 14.5264 cv
884.269 17.0044 885.572 19.1885 889.562 22.1704 cv
891.242 23.4302 li
894.517 25.8662 895.904 27.0845 895.904 29.6465 cv
895.904 32.3345 894.013 34.3921 890.359 34.3921 cv
887.882 34.3921 885.109 33.4683 884.522 30.8643 cv
884.397 30.3604 884.397 29.8564 884.397 29.5625 cv
884.397 29.2681 884.269 29.1421 884.06 29.1421 cv
883.849 29.1421 883.765 29.3521 883.765 29.7305 cv
883.725 30.3184 883.556 31.7466 883.556 33.5103 cv
883.556 34.4761 883.597 34.6021 884.101 34.8545 cv
885.614 35.5684 887.755 35.8203 889.478 35.8203 cv
889.478 35.8203 li
cp
874.232 18.6841 mo
874.232 13.1401 874.232 12.1323 874.275 10.9985 cv
874.359 9.73828 874.568 9.23438 875.576 9.02441 cv
875.996 8.94043 876.248 8.94043 876.5 8.94043 cv
876.626 8.94043 876.794 8.77246 876.794 8.64648 cv
876.794 8.43652 876.626 8.35254 876.207 8.35254 cv
875.072 8.35254 872.679 8.43652 872.511 8.43652 cv
872.301 8.43652 869.99 8.35254 868.773 8.35254 cv
868.353 8.35254 868.185 8.43652 868.185 8.64648 cv
868.185 8.77246 868.31 8.94043 868.478 8.94043 cv
868.73 8.94043 869.193 8.98242 869.614 9.06641 cv
870.41 9.23438 870.705 9.78027 870.789 10.9985 cv
870.873 12.1323 870.873 13.1401 870.873 18.6841 cv
870.873 24.9844 li
870.873 28.4282 870.83 31.2422 870.662 32.7124 cv
870.537 33.7622 870.41 34.4341 869.697 34.6021 cv
869.361 34.6865 868.898 34.7705 868.562 34.7705 cv
868.353 34.7705 868.269 34.9385 868.269 35.0645 cv
868.269 35.2744 868.478 35.3584 868.857 35.3584 cv
869.99 35.3584 872.301 35.2324 872.511 35.2324 cv
872.679 35.2324 875.072 35.3584 877.13 35.3584 cv
877.551 35.3584 877.718 35.2324 877.718 35.0645 cv
877.718 34.9385 877.634 34.7705 877.426 34.7705 cv
877.087 34.7705 876.291 34.6865 875.744 34.6021 cv
874.652 34.4341 874.527 33.7622 874.4 32.7124 cv
874.232 31.2422 874.232 28.4282 874.232 24.9844 cv
874.232 18.6841 li
874.232 18.6841 li
cp
853.316 9.99023 mo
857.937 10.0742 li
861.464 10.1582 862.263 10.9565 862.388 12.0483 cv
862.431 12.4263 li
862.472 12.9302 862.556 13.0562 862.725 13.0562 cv
862.892 13.0562 863.06 12.8882 863.06 12.5942 cv
863.06 12.1743 863.187 9.6123 863.187 8.52051 cv
863.187 8.31055 863.187 8.1001 863.019 8.1001 cv
862.851 8.1001 862.515 8.18457 861.968 8.26855 cv
861.38 8.35254 860.541 8.43652 859.322 8.43652 cv
845.378 8.43652 li
844.959 8.43652 843.531 8.39453 842.48 8.26855 cv
841.472 8.14209 841.095 7.84814 840.843 7.84814 cv
840.717 7.84814 840.548 8.31055 840.464 8.52051 cv
840.421 8.81445 839.666 12.0063 839.666 12.3843 cv
839.666 12.5942 839.834 12.6782 839.917 12.6782 cv
840.085 12.6782 840.213 12.6362 840.296 12.3423 cv
840.421 12.0903 840.464 11.8384 840.884 11.2085 cv
841.431 10.3682 842.313 10.1162 844.623 10.0742 cv
849.957 9.99023 li
849.957 24.9844 li
849.957 28.4282 849.957 31.2422 849.789 32.7124 cv
849.662 33.7622 849.453 34.4761 848.697 34.6445 cv
848.361 34.7285 847.941 34.8125 847.605 34.8125 cv
847.394 34.8125 847.31 34.9385 847.31 35.0645 cv
847.31 35.2744 847.478 35.3584 847.898 35.3584 cv
848.99 35.3584 851.552 35.2324 851.72 35.2324 cv
851.931 35.2324 854.283 35.3584 856.298 35.3584 cv
856.718 35.3584 856.886 35.2324 856.886 35.0645 cv
856.886 34.9385 856.845 34.7705 856.593 34.7705 cv
856.257 34.7705 855.416 34.6865 854.912 34.6021 cv
853.779 34.4341 853.611 33.7622 853.484 32.7124 cv
853.316 31.2422 853.316 28.4282 853.316 24.9844 cv
853.316 9.99023 li
853.316 9.99023 li
cp
824 23.9341 mo
823.875 23.9341 823.832 23.8501 823.875 23.6821 cv
827.318 13.8965 li
827.53 13.3501 827.739 13.3501 827.949 13.8965 cv
831.603 23.6821 li
831.644 23.8501 831.644 23.9341 831.476 23.9341 cv
824 23.9341 li
824 23.9341 li
cp
818.666 31.4102 mo
817.953 33.2163 817.239 34.4761 815.559 34.6865 cv
815.266 34.7285 814.718 34.7705 814.467 34.7705 cv
814.298 34.7705 814.13 34.8965 814.13 35.0645 cv
814.13 35.2744 814.382 35.3584 814.845 35.3584 cv
816.357 35.3584 818.205 35.2324 818.582 35.2324 cv
819.001 35.2324 821.019 35.3584 821.901 35.3584 cv
822.236 35.3584 822.447 35.2744 822.447 35.0645 cv
822.447 34.8965 822.364 34.7705 822.068 34.7705 cv
821.732 34.7705 li
821.103 34.7705 820.472 34.5181 820.472 33.8042 cv
820.472 33.1743 820.684 32.2925 821.019 31.4102 cv
823.119 25.6982 li
823.203 25.4883 823.328 25.4043 823.497 25.4043 cv
832.023 25.4043 li
832.232 25.4043 832.276 25.4463 832.359 25.6143 cv
835.677 33.8042 li
835.93 34.3921 835.551 34.6865 835.342 34.7705 cv
835.171 34.8545 835.088 34.8545 835.088 35.0225 cv
835.088 35.2324 835.677 35.2324 836.391 35.2744 cv
838.953 35.3584 841.684 35.3584 842.228 35.3584 cv
842.648 35.3584 843.068 35.2744 843.068 35.0645 cv
843.068 34.8545 842.816 34.7705 842.607 34.7705 cv
842.228 34.7705 841.684 34.7285 841.136 34.5605 cv
840.338 34.3081 839.33 33.8462 837.986 30.6543 cv
835.718 25.2363 829.796 10.4941 829.125 8.98242 cv
828.747 8.18457 828.622 7.68018 828.243 7.68018 cv
827.99 7.68018 827.822 7.89014 827.361 9.06641 cv
818.666 31.4102 li
818.666 31.4102 li
cp
807.328 8.81445 mo
807.244 8.14209 807.033 7.84814 806.781 7.84814 cv
806.53 7.84814 806.361 8.1001 806.193 8.43652 cv
795.441 30.5703 li
784.269 8.39453 li
784.06 7.97412 783.766 7.84814 783.513 7.84814 cv
783.305 7.84814 783.136 8.1001 783.093 8.47852 cv
780.406 31.7881 li
780.239 33.1323 780.195 34.4341 778.978 34.6445 cv
778.431 34.7285 778.18 34.7705 777.886 34.7705 cv
777.676 34.7705 777.507 34.8965 777.507 35.0225 cv
777.507 35.2744 777.759 35.3584 778.138 35.3584 cv
779.147 35.3584 780.91 35.2324 781.247 35.2324 cv
781.539 35.2324 783.305 35.3584 784.689 35.3584 cv
785.109 35.3584 785.361 35.2744 785.361 35.0225 cv
785.361 34.8965 785.193 34.7705 785.068 34.7705 cv
784.816 34.7705 784.269 34.7285 783.641 34.5605 cv
783.093 34.4341 782.757 34.0981 782.757 33.5522 cv
782.757 32.9644 782.757 32.2925 782.801 31.7466 cv
784.228 15.6182 li
784.397 15.6182 li
785.026 17.0884 788.007 23.0942 789.099 25.3623 cv
790.023 27.2944 792.459 31.8726 793.426 33.6362 cv
794.141 34.9385 794.349 35.2744 794.685 35.2744 cv
795.022 35.2744 795.232 34.9385 795.989 33.3843 cv
804.892 15.1563 li
804.976 15.1563 li
806.74 33.2163 li
806.824 33.8882 806.781 34.4341 806.572 34.4761 cv
806.405 34.5181 806.32 34.6445 806.32 34.7705 cv
806.32 34.9385 806.489 35.0645 807.369 35.1484 cv
808.714 35.2744 812.83 35.3584 813.669 35.3584 cv
814.089 35.3584 814.426 35.2324 814.426 35.0225 cv
814.426 34.8545 814.301 34.7705 814.132 34.7705 cv
813.753 34.7705 812.787 34.7705 811.739 34.4341 cv
810.226 33.9302 809.975 31.9985 809.847 30.7383 cv
807.328 8.81445 li
807.328 8.81445 li
cp
759.027 24.9844 mo
759.027 28.4282 759.027 31.2422 758.818 32.7124 cv
758.651 33.7622 758.566 34.4761 757.851 34.6021 cv
757.516 34.6445 757.055 34.7705 756.718 34.7705 cv
756.507 34.7705 756.423 34.9385 756.423 35.0645 cv
756.423 35.2744 756.634 35.3584 757.011 35.3584 cv
757.599 35.3584 758.439 35.3164 759.155 35.2744 cv
759.951 35.2324 760.666 35.2324 760.75 35.2324 cv
761.294 35.2324 762.261 35.2324 763.816 35.3164 cv
765.328 35.3584 767.47 35.4424 770.243 35.4424 cv
771.669 35.4424 772.046 35.4424 772.301 34.5181 cv
772.509 33.7622 772.805 31.3262 772.805 31.0742 cv
772.805 30.8223 772.761 30.5283 772.552 30.5283 cv
772.342 30.5283 772.257 30.6543 772.173 31.0742 cv
771.964 32.5024 771.459 33.1323 770.494 33.5522 cv
769.527 33.9302 767.763 33.9302 766.796 33.9302 cv
763.144 33.9302 762.472 33.4683 762.388 31.0742 cv
762.345 30.3604 762.388 26.2021 762.388 24.9844 cv
762.388 22.0024 li
762.388 21.8765 762.43 21.7505 762.641 21.7505 cv
763.269 21.7505 767.218 21.7925 768.226 21.9185 cv
769.655 22.0864 769.99 22.5063 770.115 23.0103 cv
770.283 23.4722 770.283 23.8501 770.283 24.1865 cv
770.283 24.3965 770.368 24.5225 770.535 24.5225 cv
770.787 24.5225 770.872 24.1445 770.872 23.8501 cv
770.872 23.5981 770.955 22.2544 771.039 21.5405 cv
771.123 20.3643 771.334 19.7764 771.334 19.5664 cv
771.334 19.3564 771.25 19.2725 771.123 19.2725 cv
770.998 19.2725 770.83 19.4824 770.578 19.7344 cv
770.199 20.1123 769.655 20.1543 768.772 20.2383 cv
767.931 20.3223 763.06 20.3223 762.597 20.3223 cv
762.388 20.3223 762.388 20.1963 762.388 19.9443 cv
762.388 10.2422 li
762.388 9.99023 762.43 9.86426 762.597 9.86426 cv
763.017 9.86426 767.302 9.90625 767.931 9.99023 cv
769.947 10.2422 770.326 10.4941 770.578 11.0825 cv
770.747 11.5024 770.787 12.0903 770.787 12.3423 cv
770.787 12.6362 770.872 12.8042 771.082 12.8042 cv
771.25 12.8042 771.375 12.5942 771.417 12.4263 cv
771.501 12.0063 771.585 10.4102 771.626 10.0742 cv
771.71 9.06641 771.921 8.64648 771.921 8.39453 cv
771.921 8.22656 771.878 8.05811 771.753 8.05811 cv
771.585 8.05811 771.417 8.18457 771.25 8.22656 cv
770.955 8.26855 770.283 8.39453 769.57 8.43652 cv
768.73 8.47852 761.001 8.43652 760.75 8.43652 cv
760.539 8.43652 758.147 8.35254 756.467 8.35254 cv
756.044 8.35254 755.876 8.43652 755.876 8.64648 cv
755.876 8.77246 756.044 8.94043 756.171 8.94043 cv
756.507 8.94043 757.138 8.98242 757.431 9.02441 cv
758.651 9.19238 758.859 9.78027 758.943 10.9985 cv
759.027 12.1323 759.027 13.1401 759.027 18.6841 cv
759.027 24.9844 li
759.027 24.9844 li
cp
746.847 18.6841 mo
746.847 13.1401 746.847 12.1323 746.931 10.9985 cv
747.016 9.73828 747.226 9.23438 748.191 9.02441 cv
748.655 8.94043 748.864 8.94043 749.115 8.94043 cv
749.284 8.94043 749.451 8.77246 749.451 8.64648 cv
749.451 8.43652 749.243 8.35254 748.822 8.35254 cv
747.73 8.35254 745.376 8.43652 745.167 8.43652 cv
745 8.43652 742.605 8.35254 740.968 8.35254 cv
740.546 8.35254 740.378 8.43652 740.378 8.64648 cv
740.378 8.77246 740.505 8.94043 740.673 8.94043 cv
741.009 8.94043 741.641 8.98242 741.934 9.02441 cv
743.152 9.19238 743.32 9.78027 743.405 10.9985 cv
743.445 12.1323 743.489 13.2241 743.489 18.7681 cv
743.489 19.5244 li
743.489 19.7344 743.405 19.7344 743.277 19.7344 cv
727.864 19.7344 li
727.739 19.7344 727.655 19.7344 727.655 19.5244 cv
727.655 18.7681 li
727.655 13.2241 727.655 12.1323 727.695 10.9985 cv
727.78 9.73828 727.99 9.23438 728.998 9.02441 cv
729.417 8.94043 729.669 8.94043 729.921 8.94043 cv
730.046 8.94043 730.217 8.77246 730.217 8.64648 cv
730.217 8.43652 730.046 8.35254 729.626 8.35254 cv
728.494 8.35254 726.142 8.43652 725.975 8.43652 cv
725.763 8.43652 723.412 8.35254 721.732 8.35254 cv
721.313 8.35254 721.144 8.43652 721.144 8.64648 cv
721.144 8.77246 721.313 8.94043 721.438 8.94043 cv
721.773 8.94043 722.405 8.98242 722.697 9.02441 cv
723.916 9.19238 724.125 9.78027 724.209 10.9985 cv
724.292 12.1323 724.292 13.1401 724.292 18.6841 cv
724.292 24.9844 li
724.292 28.4282 724.292 31.2422 724.084 32.7124 cv
723.916 33.7622 723.832 34.4341 723.118 34.6021 cv
722.781 34.6865 722.32 34.7705 721.984 34.7705 cv
721.773 34.7705 721.689 34.9385 721.689 35.0645 cv
721.689 35.2744 721.901 35.3584 722.277 35.3584 cv
723.412 35.3584 725.763 35.2324 725.975 35.2324 cv
726.142 35.2324 728.494 35.3584 730.552 35.3584 cv
730.972 35.3584 731.141 35.2324 731.141 35.0645 cv
731.141 34.9385 731.056 34.7705 730.846 34.7705 cv
730.509 34.7705 729.71 34.6865 729.166 34.6021 cv
728.074 34.4341 727.947 33.7622 727.822 32.7124 cv
727.655 31.2422 727.655 28.5122 727.655 25.0684 cv
727.655 21.4985 li
727.655 21.3306 727.739 21.2881 727.864 21.2881 cv
743.277 21.2881 li
743.405 21.2881 743.489 21.3306 743.489 21.4985 cv
743.489 25.0684 li
743.489 28.5122 743.489 31.2002 743.32 32.6704 cv
743.193 33.7202 743.068 34.4341 742.313 34.6021 cv
741.976 34.6865 741.556 34.7705 741.221 34.7705 cv
741.009 34.7705 740.926 34.9385 740.926 35.0645 cv
740.926 35.2744 741.093 35.3584 741.513 35.3584 cv
742.605 35.3584 745 35.2324 745.167 35.2324 cv
745.376 35.2324 747.73 35.3584 749.747 35.3584 cv
750.166 35.3584 750.375 35.2324 750.375 35.0645 cv
750.375 34.9385 750.291 34.7705 750.039 34.7705 cv
749.747 34.7705 748.906 34.6865 748.402 34.6021 cv
747.267 34.4341 747.184 33.7622 747.059 32.7124 cv
746.891 31.2422 746.847 28.4282 746.847 24.9844 cv
746.847 18.6841 li
746.847 18.6841 li
cp
706.739 9.99023 mo
711.359 10.0742 li
714.886 10.1582 715.685 10.9565 715.81 12.0483 cv
715.853 12.4263 li
715.894 12.9302 715.978 13.0562 716.147 13.0562 cv
716.314 13.0562 716.482 12.8882 716.482 12.5942 cv
716.482 12.1743 716.609 9.6123 716.609 8.52051 cv
716.609 8.31055 716.609 8.1001 716.441 8.1001 cv
716.273 8.1001 715.938 8.18457 715.391 8.26855 cv
714.802 8.35254 713.963 8.43652 712.744 8.43652 cv
698.801 8.43652 li
698.38 8.43652 696.953 8.39453 695.902 8.26855 cv
694.894 8.14209 694.517 7.84814 694.266 7.84814 cv
694.138 7.84814 693.971 8.31055 693.886 8.52051 cv
693.846 8.81445 693.088 12.0063 693.088 12.3843 cv
693.088 12.5942 693.257 12.6782 693.342 12.6782 cv
693.509 12.6782 693.634 12.6362 693.718 12.3423 cv
693.846 12.0903 693.886 11.8384 694.306 11.2085 cv
694.853 10.3682 695.734 10.1162 698.044 10.0742 cv
703.378 9.99023 li
703.378 24.9844 li
703.378 28.4282 703.378 31.2422 703.21 32.7124 cv
703.084 33.7622 702.875 34.4761 702.119 34.6445 cv
701.784 34.7285 701.364 34.8125 701.027 34.8125 cv
700.816 34.8125 700.732 34.9385 700.732 35.0645 cv
700.732 35.2744 700.901 35.3584 701.32 35.3584 cv
702.412 35.3584 704.975 35.2324 705.142 35.2324 cv
705.353 35.2324 707.705 35.3584 709.721 35.3584 cv
710.141 35.3584 710.309 35.2324 710.309 35.0645 cv
710.309 34.9385 710.267 34.7705 710.016 34.7705 cv
709.68 34.7705 708.838 34.6865 708.334 34.6021 cv
707.201 34.4341 707.034 33.7622 706.906 32.7124 cv
706.739 31.2422 706.739 28.4282 706.739 24.9844 cv
706.739 9.99023 li
706.739 9.99023 li
cp
677.423 23.9341 mo
677.296 23.9341 677.253 23.8501 677.296 23.6821 cv
680.74 13.8965 li
680.951 13.3501 681.16 13.3501 681.372 13.8965 cv
685.026 23.6821 li
685.066 23.8501 685.066 23.9341 684.898 23.9341 cv
677.423 23.9341 li
677.423 23.9341 li
cp
672.088 31.4102 mo
671.375 33.2163 670.66 34.4761 668.98 34.6865 cv
668.688 34.7285 668.141 34.7705 667.888 34.7705 cv
667.721 34.7705 667.552 34.8965 667.552 35.0645 cv
667.552 35.2744 667.805 35.3584 668.267 35.3584 cv
669.78 35.3584 671.626 35.2324 672.003 35.2324 cv
672.426 35.2324 674.441 35.3584 675.322 35.3584 cv
675.659 35.3584 675.869 35.2744 675.869 35.0645 cv
675.869 34.8965 675.785 34.7705 675.49 34.7705 cv
675.155 34.7705 li
674.526 34.7705 673.894 34.5181 673.894 33.8042 cv
673.894 33.1743 674.105 32.2925 674.441 31.4102 cv
676.541 25.6982 li
676.625 25.4883 676.75 25.4043 676.917 25.4043 cv
685.445 25.4043 li
685.655 25.4043 685.697 25.4463 685.781 25.6143 cv
689.099 33.8042 li
689.351 34.3921 688.972 34.6865 688.763 34.7705 cv
688.596 34.8545 688.511 34.8545 688.511 35.0225 cv
688.511 35.2324 689.099 35.2324 689.813 35.2744 cv
692.375 35.3584 695.105 35.3584 695.651 35.3584 cv
696.07 35.3584 696.49 35.2744 696.49 35.0645 cv
696.49 34.8545 696.239 34.7705 696.03 34.7705 cv
695.651 34.7705 695.105 34.7285 694.559 34.5605 cv
693.761 34.3081 692.751 33.8462 691.409 30.6543 cv
689.141 25.2363 683.218 10.4941 682.546 8.98242 cv
682.167 8.18457 682.042 7.68018 681.664 7.68018 cv
681.412 7.68018 681.244 7.89014 680.784 9.06641 cv
672.088 31.4102 li
672.088 31.4102 li
cp
659.531 4.15234 mo
659.447 3.35449 659.322 3.01855 659.027 3.01855 cv
658.734 3.01855 658.566 3.3125 658.398 3.69043 cv
646.051 30.0664 li
633.198 3.64844 li
632.988 3.18652 632.82 3.01855 632.568 3.01855 cv
632.316 3.01855 632.148 3.3125 632.106 3.77441 cv
629.082 31.1582 li
628.914 32.7544 628.788 34.3921 627.402 34.6445 cv
626.772 34.7705 626.478 34.7705 626.142 34.7705 cv
625.932 34.7705 625.722 34.8545 625.722 34.9805 cv
625.722 35.2744 626.016 35.3584 626.436 35.3584 cv
627.57 35.3584 629.586 35.2324 629.964 35.2324 cv
630.3 35.2324 632.316 35.3584 633.87 35.3584 cv
634.374 35.3584 634.626 35.2744 634.626 34.9805 cv
634.626 34.8545 634.458 34.7705 634.29 34.7705 cv
634.038 34.7705 633.408 34.7285 632.694 34.5605 cv
632.064 34.4341 631.602 33.8882 631.602 33.2583 cv
631.602 32.5444 631.602 31.7881 631.644 31.1162 cv
633.324 11.6284 li
633.492 11.6284 li
633.954 12.7622 638.658 22.8423 639.036 23.5981 cv
639.246 24.0181 642.857 31.2842 643.949 33.3423 cv
644.748 34.8545 644.957 35.2744 645.251 35.2744 cv
645.63 35.2744 645.755 34.8965 646.638 33.0483 cv
656.927 11.2085 li
657.055 11.2085 li
659.07 32.8804 li
659.155 33.6362 659.111 34.3501 658.902 34.3921 cv
658.691 34.4341 658.607 34.5181 658.607 34.6865 cv
658.607 34.8965 658.818 35.0225 659.784 35.1064 cv
661.338 35.2324 665.873 35.3584 666.796 35.3584 cv
667.302 35.3584 667.68 35.2324 667.68 34.9805 cv
667.68 34.8125 667.555 34.7705 667.343 34.7705 cv
666.923 34.7705 665.832 34.7705 664.614 34.3921 cv
662.809 33.8042 662.513 31.4521 662.346 29.9404 cv
659.531 4.15234 li
659.531 4.15234 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Christian Zander) ()%%Title: (UT_WBMW_Einr_eps_7.eps)%%CreationDate: 20.10.10 14:46%%Canvassize: 16383%AI9_DataStream%Gb"-6BiZ0IdP,u+TKS)sbXaT%fZYJRb[>%!/3jDuO?aFSpX;@`A_dgNNI;C!B;qn1)Z"QjhmrHc/4F.3&/c?a7V!8ACQ6[:j%K>b%Xms_kr4ME!H.rYrJa_Zjd**43gFjr)<j[rk1sOCbP"!\-I4/tL9cG5ISW1Y,k?G@N5&)tsWiaiuUXj+e(@pd@=6fV[aqHn:jKGSk%>2p_#[9D\N2-3o9EUV%'[;*8"I&jXGVGT/]BNfUqT.dUmK?q%(C3(P:HTm&K4&Y0C$gN=YnN-pCe/rFtO4>JR[/.<(#*3!`^qV,O%:TNk@$j(a,SQt'eg/U3?;"f+uk,?^C<M:ebf4t9)1i'DMGXk:T!sZ"-pZgL[XjX?bS6;OmoZ1Oc.#*atG='qdJ-:a@dk3\T!RhVr%"$6q^Y2^:'"24o(73M4+M<jG60@bP'!.l;!lKq(,R3LnZjaj.M[Fm`lq%qu4F<&2kTCg7IB<BlMX1u"jAla+BqW`OiZ!)doMtbE&%$=_=(Inf`1$[f-7T;lb$Q:C8JrR.Vtj9+6?bhlagmqPcZE;3bAIrCj@*m_H!:^fJ(abOJ1F:^Mf%A)nI6dO"]*bi\!ODBZ\:&[^'%_!8-Zh?o?9i<Z=YYkdk^;I<g[o^B5W09;8)Hn-;c%l0)QT_o2n5MBH]HFmIbZi1&4Y4'P[%&:=^8fRR)%&@(1]E$e^$gREU0MdD1%.eI2Fd]P.:FLtS&]DBkOg>?bC:':LJ2L]rnIYK"pY-2oFD<(Z)NDFC1T@u2O=t\jioI\D,;P&ZY4:b)1*gZB0EgbMsL0,c2YtPFQ%nEhpJ;IPBXn/HgcWV(Bb[D%Z>Y-6lLolVfa0&tE$g%4_#EZ(L9bOch/A(k;D+5.oeMJr(K2@qs!@OW91IUX`G'-AZOL*OQ2/;#1a%:E2=6"FV*,KV/#I7tdL:'?(We)+T@P3,\X9Tf=B8P@B`aO/6f#pk`S)AVBUL_4FRF;_1fti?s&;Nh#g7p7:o:[Z3N6F2U_u5?J95%LS%Z^SO#;OqM`]:rf<mpI!gYt<p7.T55`?+3'',#pdogm&H'IE3'R89ZUh'Kig$s5/TMcFSoabeF%6$sZ&YY/hDej*aD(+JkHnU'%?!9%V03Wu-_(mu2:74(&I%-.b5/m'N-^LM!NT6cnU$ptgQGLu1$CnEtg7an//Pt`p1sBZf;]GG#;@96(^+T2N;S:K8;685i.Gh;l%Hq*n`B]$'/Dk5HShl"fb+51eI1+>*03N'B\23c3)9##DSds#g9^09X@icpWn:T9i4]qdl?>LF'il#N(MQK:5:O#SKVD2A_Y=5I<@%0!1JSBpo8%KE"lQBX0jg7A%[$koUUIpdb<Zs5XNi9-NkUqT&?pDtuWr'*RrO&Fd+1p1JN55*>lo5AP',\,;ltaV?]l-q+&1s(lT$%hsu9n`t3_K5KC=P:HG]O2uc>HL[eNm]&T)8%)6%R%9C_R1L,W@m]*h3.fYXG!L,8ubkG.8CC'E2H,IS2>,<P'm8a(l^5=erG/t?j%I3%VaZ#+_)J$H<F=p`A%Qa%"pB@;::=83fjLUTu/!DnH2T#5bgbB-u2#Qk#mN>k>PC4\5".N^sZi-RG<os2>`s'l?jc@FD4C0UAq%W:>@lK)jZ19L=kP]ZNI2NY$\;XPfHGk,[V50>($Uko7@qQ*I7^5OBg=0-(pZdXN8&fKT#!rl/9.kIbDjif9<LZa!r%)50%0Eenct%+8d_eMt`4<(=8K0ARt1E^'!$m@NXJn>l,T#h&ofY)*Lhj#)HdU3N\#7KDoeNfl8<]3MijE)>7dV)s/VaS)=J,E9Kj7m,?/#=r&s1%n.i*g=r>N4T&UgN?]U27b]uJNMZ(R5nVqM4UD2oh8i/JH^?L$lOaDI^fQd0b?l?&.dM)=jSb:dqTW="E'^;(bk-L)4?m+97%sX`!%g[NBmUZ5bR_V4!KYeD#2HGd=6*JK0TnSK6`Iht**WosK`:"CLT-lkYO*p](_WJ.d\N0dC#V//2ZA<d:6%Kj;*iGG4#iA54W.tloE%;\<@mJniJf;GFk03;3I?GW7V\SPfK:"/nfLa58"XYF!FKbm0&SU_E<gn0`%sE@JWsGkq87m_Ge<5:QX%f0_m4j?&uDqS]-cc=ma.%7(JZ&^YgXsZ[b)/Rm,7)mCf/lPHS+a<IA(.3iD`gpu?9jISOS(?n7Uc8>Mi-EC71C__p.d=tcueFG*YOK5d+-b?FE>=7PO=E0\,Y%q1(h5W4'QWn$MmK3LA`1LX.qX.\HU:`/oA3apL`sin9&P<p6QEo>sHMp`f/5rL^_Sg>oV7hF=ZcGTLSDkA-=PG+\GZoq1r1;@?\J%$F`ENE/MLM-aOF^)+80>kq_=:$^jBJLUVXt`uaD[Hk+%o\k3RoXAeQ&B7[6d+tY`5FV8RiQC);?L95C*ML]ln["WJLEP4.+-b,A^%HJls=bLUm1?l;R=S#j)1::513i@5oeTtFAT"_e:rB3Gs#9.4P7p>66,?Qq"%n8nFIPm1\\&?7)K6MU]MO\]3Dr.;*bVH&lV;d>NL%Vf5CfUIF#F/YU`%pkQ<f3=A6efH=tOTV&;TT<BAb:><VU\H9[3=O"44OD,fqWo00/IH[$UpiO51mj;/j&8Qts5,/:5)5b"K>^,+2%)X#[0oG,BtV-KWl]$pJOZ@pL&L+1;BIEpgJ)umroYZC##L!BH=H7e?iou7q3RTeL=ER\gS)Gg!npeIEN<nj88e1j=>h]4PHoLg4\%-+O-K,e,q9IDVb]B&iK2VuF;jRp(5VgfO+)S*7V5arfL?WBR\eo2>mZLZa.e?QPg)eN3V=cVHc4g=9ZojaB1t[W8LuXQJb7Ga\Kj%s*&s>U\_UMI$:a4kk;,iqmBV85(EOaWjMg!ep.+o_:-[*?e&??]pc.S+7g;6k'Qh,NbXi*V3r]M?GBZZI])&*2CkuuQbW*0Po;s(%hTK9q@Kj!(U&I[]3PPde4gmcQ=6iX>7-A4]WFH392_En"maDF5Lc+d>c-Os^rd1D;'2>"2=9%qkWP-'r>LcoQ$2,9_$X```C?UJd%:d;$[Zun:9s4Mu*Z)t,dg]*Nj60[H2em<*Ps%D'JYLI;?:X.&Zo?0L+1V<#Ln!@d*C\7R3W:',`qaTtLod5MiJK.[Ym?`T3p%30i%Vmj%e&21e*lAn3GKP-/,Y^a_jT;o#.qd43u<PWB@ea;NTH/V`PleVZ'<Oq>kHocWAq1Xno_+fOThmI2L=5'c8r_Y%-ndE"-S's:"%[7^&\a)o%;:jK,(kAmEJQa_1S!@q[@%s-MlrsIXYEnjg4S)`6,7fMssq!eg-quP//nkOWuJ+LS!56CKJ,_n#NbK!kEn@/=^>eU>'%)#bmGKH\J:FWKNTn4QkpU_?8m\YRIjlr#@cZ/p'!O?6VZNUXN*6/gZnX0(?_@h>G(5EfXsoF[ojXQKOk@&PIT9W4J(QL>kl.=YFY%^L91nf?486jA_Rta8WN\I-IG1WTC&7/!#b?5S8]3,@=W,op).qX0c1^aQ0#FH_VT1<Isg26,&U;J[ETr!OjITONSaWNEVN4^;/a]%afg0%)u5[)ElaSs<?jB<d.6XjG?AabQab:E"Zn:36)qg8Y^GmY0Iur(guoANOQX.$\([oa<ai4^Z0Fu_c";ZiHA^02cubCrmc9+q%(#fE?#P1[+Bme/3phlcA"L*\WgJ-1=fW[c=fFI5NB*Ym/1S:*.9)YqclVn;*FLf/1d!2Y3c4EtQcaR'u*m]JWBtiAP[]?Nj&cK>B%(de0nWJ>,J.*X62<),=K.=SZ(IV6`iR]*^`ri.eZ?R3LrU460XT=c_l>7'EV_!qO6Z@[/tl`jB,e>jGu;enM.<ZeYUL6ikm@J2dc%q\KmI?tL5p&-l;f#@nD%a/>4Ede"'+#r<;0RE#8)\Z]#>&:W56r=:RR#>gj.DuZu:rkF;J/c:lZE*+qY.KB;/Dum=S:aT$OJL-VI%*<5El!rDIpe<U%Q<b^mo5Q6S;nUGd$Zt_6)s4_h(N/hE!6/iSkRbn'$pD"j#>t4F0QI5X/T,ru+R82.M6bD)lrpfR3Ia0\o<q&=9%/B96oQI0hScdeA[k:@TYPl)&QMjq+G"1iEX60Hq%rbg1]a"0UDI-870!?dp$[.2gsW01iSs0r75Ep>mFKstg/nd#TMT`#-$m)Ra'%F$=-./u:6g4P.!s7*eN_bhn>%'H`?Lk'8i[QW=4KW1dUaR!#B^?gD*O2Eomk-b?3BVSP,L?bd`L='O"fI74!#Go=!54AV8Q"j*=D%T_<+XCY:&DLi#NFa5L\.*BKYG'2,=8h5o+1mhM5@LVKMf09>ppE!(7MKg^"6),UUi[B(48WQiI\ZeDE;s/P4r=9$t!Da(nB/,(^)%QhK=JX,W>Y5"DnqR,=soT0=c$ebi;)S^66Dc2LAJ?)olaq:3gK[K#^qD11!-ckCh.IsD"qj?ske+,epW2JK)CH"jugJLiX8L-jFo%X#oFh>)cU'?>[,Y.c>%(+H?;;;=d0BjW.0L#0]:4,u="?A"BKjN)b;&8Z$q8YNeIo&:%W^<U()LlTfk%aL_(CYNFSie+EXPF7_Ej%W]&b^n_;2eFfX>7]N0_I%Fk7$BKfH=W>JGX?bUX/BPWZ'F](/Z:@j7'`mrpLq:-Kj!Mn7E[8eHNe9<Y6/fimf01e0)qU;r-!mMo6%d<Tf?&F"/1<f?OgNcICZYTBFJ<7cGEH,#-FI@X.#>-eRGC/o6^c#!@=/!47WWcKm_hrJ](^&B4A.rMhDCY[sA<?AD,*M$(h'e/4^%k.G309[tq+Db-&8^XUAoBs_4AUdWf0X^t^aV(53/F<tL$GL5#(0$e[K4AXJgl+<&i;Jo`#Vos*T?'^orTr#5eQ,a\O27VaDj[t2U%CHS6'["nEZD:4aVIuM++%1O$1)=]s"-R5@lD!^.\nO8A4+A<k=/`(pF3h#;;h=98*96br)(9,J2H,X3[a6N-9B8ocp)nN\+d;k*f%'KB,k.FkSgg&Q9i3WHcqICY+>KSEgu0@aYrI4\q\;WBOl)L@53-b5>mSN%mW6:C@bb\+;sF]MU[(>n';[#R!cMiHjt0t$VSb[66p%NA&h.W77i[Y--mc9'J>boNln>4.0DgR>6)=%Acmu%Ead,a`c+ge(\ZCKq$"db(*ApII'koU"OZdmdfgm]D,LWVBiTDlgp^/b)U8:%<NL`_X/5Hb<P3gt"e&Vj?@AipIFj-=%ukn)ls6HPWL5/>.d[^P'IhX[Y(4m$8j4(r$<<pK[2!8*C8l]s(H"'&%bXY_FiEF%6\38S%6_d;*<m&c\J]H*n'^&!jkt;jm#XHIDr?2hI+JgU]3oBgq=/e`iDVY$G9jo&@4/[iVb<VbJ9^_top"jN_Ic5(aMQ[mSP3NFa>4m-,%[)t\4X:iXMak_s]>4!4E,XhIeC0h_;iG5O-S<GMm]K[U;CA#fAH@O.D3LqMeL)D8Y\eiT%#.F$5SZQFlo-r;cdn;Tqe-_002(QgI%G?7j[g%bNX<Gcq1p)GLsX.qm[>;&eF8uECGX3BHWG?7t-UnC&lWT>V3qj7"\-&'NM;-Kh7dA)jm2K2pJgY3R^PL<G^.J3La9^PUl%K8h3mFd4T(6c%Zq1nP`3IkgLb-q-f9[B9YG!I@kK]Q_s\=Lf-:JB6>W*Ok4;XWK$SaT@X3RH5HVZM$pqb^\#tf0cek/8<VhFo<u-%lY+8OJBc]B(qMP-TEV2g'HJ,RL@-S:<XNlDjoVSTi=?e5$PnkuCf=8L]9QFMKU5f2S,f8W3^[?'lO7?i?=t[gp,^cTdDkt7WbsX7%f'm=p.]+-CHh2HVT!m:.*qk=.Um4[jTOV!V\cQF^$*$WSb)hE>(g$8W$gU--MfLGpBpMYWHGI*?5MD!U'gGYf@^^Q_Q/".B:8kYi%iU-(jIOPX_g<WbV,#WZ)<dA](LSOWX:+LfopHdHHJGm6_qiAI5g<;>;<f[m4p1X(Hg@+rBY(Ua/Jp-qSl2&\#i,2MV[pcDF9C=H_%G5;'MA<^^#B4mR'gGXMeS?Ks@[WlaB^6&Y-m,d^'[>j)&f'E%^a^SiA[rJf$Sm&IY-f4I9[(X.411-J4aV@9WQX7Fe9HRMp,BM0a%nEAKmilLKL_Wf.sroM/@]WlAmV8]Jad_%ZI5(2e)XO]RWDWB8M55_g!Y6B+-?$gMA?fup()ubP.4NaSAp0Df(=(jLY(@P>fh@I?&%m"VX=@/K7YZ.uj4c8V6%f>bgQq<E<PEHUffS6>ONX;-*[G]nLajojDmo9+i$#?8))_K!@n8"mUsZh^Hj*?(@#0hT_?*JWo`.k%mQ%Xe1U)$0-$B,V:+\C7@GHelSe3pmbXD)OV]M-hFY6=tI(5/LU>gncsV]e_ohq%DC0Dk)]Jqj7l*Qr1EDocHfs9UHcd0p2YjXZa*Hs%ATt0dhrr[SWFj=)1ufN<12i^\CLK[jROcHk>Ea.*o*LDfcVp+NX3LE/SZ>DYCs;7d2EG#joQ#Y*s((sKDQH>'qo)#kUY],3k]Cr)%WR5(mf%BY`C_Xm`1qPW[1:_I5]So;Km@T9V)EjOZN1ef%d]P`r7Y)?D2t]2E!_WH#I655VV`SP!GiL@CYKoP1:8<H+IXWjr2X8j'%8)(=H8]e?m9(V46iB3g]nq1#9o^(4">H:!TUdhfo@uZtY7f6B'N_Zu/rJ>,kUWq+lAmp"#q;t1PUII9!>`t(5/,H?-T:S!V`&Hsd%r@lAY[SL@&3a-EL.D1tl:ZEA<'o]9*c\$nUH=N/hVj5/QOcGZpXnST1CilNV]uT6&AUe9%*uah0F+rg[p\_ELf'(Z^<2<C[FRSmm%2S+22>1Q/h]jg?aCq=VGjpJ6<m>mS53d0kPAtt@RcSSuA)dRa&>@1*<oOcf:?)Y2&UI\l,"RjXnmQO\7g9HX/hCX4KD"QY/qqG:Z%UWE8%Rs!b=nhQ"inEA`]kNUIo@h@DYq4?81D"MPEZrJ?1jpEhQh)3L8m?N>oQ`&/Z?MmudD=h<5IO;3pi5sX<h;)iC+p#NhNq)0!%qfI4\#DZ*)/iUMi`&@Ie>s'HnU3u2FleBhR`+;iAA`N4Rj(j%;LF^iuS(6)9UetfZ1qWQrhFg+QYW[#H@-l91/#2J`IF0T)5;-mo%Cim*qd2\0pRK!$XFpG)=EFQ0j*UBnsPB#1;CH)ui1_[n.JP-oh-C:U<ogXkaf$h)_CiiuA$EYudYu_pU*V7G#kXqn.(#Ci8g?A+W%k$/&&,HKqD8_WBhp;/`t^!gW#?a^cc5qC;uWKS'gRIgF7`#i["r#'@Yq6E--)I5<Tl6G+K>:WBp-&pX%B7#!$;/CrHFmQ!ehVT;]%UIGK?&&O1NbP(H91hq/PkN;&XrG8oMIuSrh('%.E3nq:F(An$91@iuJ\XdRb4Io_4/$5SO\>M"_jggMjg@tk9NT2_IpN=e8O.5pW%K5=#dTAR1-MgJWGqM.;Dh8iMLqqLL]?nPa^nSdkiN3""*C`XrdD1C6pq)6f]J%BFna;+D\BALmekMG%2b0oH`_UI>u7go=lI-f>?%i7d7Te=)<3fUafMk&S3-WAeft\_14[GkuRJI/WBM9&utef\Y?+`H^uc/`H*a\\!"Qqec8[rRLJ2`G'Z[roq6*8E<";]?T#^kEg\T%lrM5#Gl%-]R")4BnP??;*-iosH2;Ce`dZ.e#jUi*qsNL7o>?rnPtPn4FNuNe@B=d#:i;=8<o`*:D>\XMr3J0tqm:<^r-1C_Ej-PX%[+S]s43eT-Q/ehmHsZ/eDQW:G*j<99dgd_S>ePK"NVo1!Ljf-qCLLtTn9*e.H.mg(GeQ.#ZZ7d!O`)nd:Odd/(>h2^;G6!Bp`IAd%N9stBlbYLMj%M8ZZ5B"_rF1f2D4Fjibanb:]CPC[qoI:3oI#)L6MkhPA:F7_FJ6lZT>%b@fQ`,,S?@tIABUhJTKW\EkiF0HG)2FU%ql=CRXRrfC57JOfkU)ZY-(Ss48$0nPUNpJ<N&O]J]JO4Fqu?@ZNLft:P?1cPX3E]S\&jViQ@I1-2JSK.]YfCl]eQaSlLpQ+frWcg%e^'IL[mo067^ogp=/&P2[0rha@!h7Xqn2$MDUih3s%jYW:<-B,*j;(^NBU*2N6+P_PqTPO"5.Jn_+8G3nVoS2=36G^QCeS&<U.gA%gEE7fYU720\5-kHP1V0tj'0Mii`M%,P1V2J,A0U3SWf%2m6Vo\c9u2DbrO-.8Ftm]Rtu^Ca%YS)a/Y90T29S#E,d-j\`W)2CI-np%3+fuYIskO]/7!LIDJF?sd5mrM&)Yr8s4\]QiKt?1Id?J+E4eEU5*cYsI7*p"BNI69-gH"=RK3%@H*bfm>rc&?N\3/ShPVF08%hC=%r*&?q\l$8(1"!d1`6H964j]gj%<H.K:DjPnZjOqKQBjE:ap2lTWGaR_Q;[Kkie&%U_\Klnkd'a'/JQ82&qae0Yaukm&T#ZDh:pZk%!Yr@dSK5Pm$'\\e1Sd1>?BRD#MKC>rV:*Q>_ArBEpn[m-;Mue8-k*Q:bj+%tGGLF`'@eFj);ha1],*E?>X9ARq5@P9`6FsF5C<5(%qgQ$MS(hTJK(]c(=Q]s`[pNaqOd1@o[SH-BQCa2';V?=NZ0)H3aB^"5pc\FmR?b''>mZIhPgqH<j-/4\@6P"d,tZ2\A,a3-NqZcs%Z6HC5C9AUh4e&qHmqMr6oK)<['tV]1cV8KP7r(as@E0U3CNk@ZA[/:VoCfDZg)n2dkO@M$Fh2bSDA+Vch)Mj6]IKfmLLuTsg"kt.%BY"nQW4j;<Np6q^L6=T,<%E0*E`=NJBqq,g+JXg,UK;O*\sV\:TEGb2H+Qr'3/gso)P%htUZ-s0X/j^VZuu73cm&D0r?:=t_UN^k%PWfjN1T+(?CeA:)`L@:$`E*5D:@l:Sh-5m&\uUeXI:QH(l)Th@Eht;o--YK+jrF>-F(Nq_al;.uNLN\mPk5:$&&nd0'0Cq,.\llQ%,&NR9)mbHbIM#1YpdjV:ojOt.LYq(r3O^m]UP2.77,(@<H4A^U;Z^m02,ed;<n=U2qUj2+3C,?Adht#HI,*/\WZmaLKc]FO2>HND%H\u2-d/!R$FCaA*8mT%CNi'lifq/[&*OPQ'QIM`G[e@&Q@%p96R-`YlA?*qYc!WJq0)PQ(KrD:;,nEo,j()^W]jJ<:f#kSW*GPK#%p;BO68Mo?%+Ji*t"H;T8G!M#N*3Ek41!^U[1i)LLC0ii([rJB`p9#FZ^(NXpp8>URKl\XLD*/neg.kVNF+k)-4'l"@N`tEEXNIGX%lc82BD@_IWh9G>WanBa@ieCUq]jiG%fa##q\n)+i[Z94M\e,RpZIG%2+_eW#R&2\R0@CH4.E-J,)]-TDOf30N(J_OnHeo?P,D.=#%*@ml80(5=eCi[+`.9tY3%*>[VZ:TM>]!eLpg:]A*i7-DQ41nc\Y`FG@!bU(u@[D+hSiYCL!t[;d/@du,6Xg$L^561`rP\4X0-'GY%UHFkTko4K=.qJ3`BUZU!la)&IT$?4*'eIEV`SEf@9=h;_aX7%oA,J5TY;4I;Y58WF['MCT7'hYO8VepA!+`dD/E>>k40lYaO."lh%1K`Jh]h@7W$TuNuP3,C;4aB0'2i7BXLPNeh?U.+I2kr?b9D4k)h`3"WmO!K7VR!clORpL#Tl1r\\I\GSgGbn]HG.B7&pt<p#P@C>%K9%Y:`Cjj)LEB8l`$D(2ZuXdb`<VReY6!u8q.k(E<qrQSC!]jo$r&X%<I-U(9'aRE'f%2dC^q5@a83^pf>hQSP4tc`Bu1eVhKO)s%B^<*/:P*QEGR3VH2_"q,T_!lt&b;1S=8(s>[[5;IG(p%ZdOBT',4t_@!:RPH8jqP/LR<0r@BNPY-0VXj*PXNn,]m1hO6NBVH>6KA%hgeR0Su/^'oMqef1,.[<pF">`4s(Y`a0')VIhc!bb-G>%NMZMVYqffcT"IhnfZNB-Zq=p^7H>nEI,4,9%ETZ;,PT,J4ThlQ;Tiq,%B<Ugc?L$cPmO@jY9P+&1@8B3hgE.[Rq6V2#.1nJ>*<rg1*"b/Y4'o.p8XhocH[JCW`9$`PW)V9m>TqBV(E@9=L81=4cI%e;,d91]%^sQ>hdG=*S)LP4iadYJ!<bC,Q_TJsr25PFL&Pbh$?2J8S*3G:0J(?\OMt:59H3WPGB>`DL-2$%>DOmmHeb3.&OA@LVZZW3@fG>d[%K%@@?j)l'0>I(D*JcWM@'+*sH)YfC;k3DM"d?)Yf,nJHBa(0l/^,IqXQ1`")akBO$ZWHV/7mBBXoC'd3-W_-e6,AY8fk_Y*CHYN`%Y,C-l=Elt2LHpr)@Pu!ISbK;[,d3_+Prs4KJQ13qf.Ti6c8"41/e'H<dI/q:^&9(ZE%m1\/Z^Q+9^o=TdL[nO@Ql-]6Hufdap.RM%XMYHH`s7r?(VRGf@\q_r+SrcP$^68H8[415rB@BM>bPprRA=9&/E@eJ1:hB5+q5d&&4==tUb$&YFMtoc'omsB^PnA1;HBg6;_eb+%;&=b3rCf%<2,o`=RI7=FA"efMR6f<`4;fWlZlh/<\kn[Hc)ZrKCNYTd$X%,*Em$k/kVD0Z:YS$dV1AQMf'>a+QgYtj([Y,u,,LNo%@<k9E;_^`m>pYB)7"96O@(L9Q(hj;=CWZ;L<A^"*$'cAD(Kf[4Q`oY^;:^i<Ff=RM.U&'^l"Tkr.r/cEiiX-Ai_N>'):3"/.9R%n%9s#s4`E4dZ;M&h<+tu?Kd6oENVpaA;.>phiAEEuW$3L_EO(hBQRq:kqg`Mr2rc<sbEI/r%_>ISD#$nAcS/f-4%(_IXTg!P]dPL*c%of@=-?$Z]\>..fl3HXL'FF(B's#G2c)0EF+E,t0j1[$%9Jplh/V.\0:$H'uZ9@'7Ud2bTqTh@%/ZCcl56^OB1Vg@;+ae;ARTO[h#%pDc4W+?;I"loe+u:5sg#c3.>Hkc%3HT&-6!B",SC`VZVCq,3+$2dg1`d6s=Wd-R?1^sc.6Z/j#RHq0CBO_-c8WAD_p1X^(d@ku\Q%"t,;Ba-T]Wgq_qp)Jo/l\a8?,G$?VfOWN3"l/&8tbf;>RY`pb_VTb`X[)\uQCqSnF:0H.OCensU<'>ndd']J[%.\I\3.#^'Fu2+F%W4/IsWpV(rVJEK,*XUMhA!"m#5s<4Mfe%[-->FiL9m5hQ'L_,MJ=)RL?.Ce!C5-+r,+F/+r>mK<6a4@<h3ul<Cs!?Z4=9YS,L<BK%?D`K;-q8,M42\:46Hb3WVELcCZ95k&.?*)"qf:Iu[\AgO?"_t6LU3OhP/j]7"JYm=XBpP?`;[7t0G:FJQj7f`:0/fhal?#Y\fc'a%h;_OFKWuG:-(S)YWG,#mj_kH28l;GF4Rg^sj;<+rFd_AF*:FXFha8Gl4oMI5Yo`K2]&ppV'8)Ugb:5TU%u7IOc:;ne8hZIo;Ir+P%h0-&,HGWeT<_1PhA/q^YN9Q@0^Y'4_e6ZlYoW^RhLo9XC$&i]"-i,Dno&ZV$,,kXcE"XrK^ROkjbN`suO(U.UE`n@7%bGTUZ'TE!%KXGt\3\a/?R"c>k[A_ZWSEU0HW2Xfcc;<]L8@$L(SDr+Jm<;&jneP_glk>MTS?(!G*GLtcG5@=Kij=ncHDL5/F^NYkaIR3OYr#r=%2:mUrqUBk3>BH6)>Z46hOGi'YaVdrq1XMIP#$i]hF^#-"/.k\FWN=9#4j@k"f;2DKnJ'fud7Jk$fOZ7XDOGL$?&I\f@ldgi*gr6F%ftBt^ZjaQ_*gponko#ZD;S!Q*]49Oler"]_m.'SYMbTPW,I;4SNXd,,p+:ne7dTYf0cSu`%H<Mtmi!m(-O1_sN(6?,G@XK:leNd!%P:[W#oG\pSc;dA(C4H&)]m+'#r;;A<DNXW1PB-^_?7&:i(+$6Vfo]s^E'2Q3DENi_r4Y7OSAaMF1Hf1iMkNGME4a#-lB%^Y7F(02%3D1:EicOWTEY8-<^7-QnTkjL,,]k1Y>Hh=<?#R!,Yn="J=l]2'oBN-19?e1=*[!e4l]MdX;COV1W#i<.2Alg*#M<"%6l$MZ\ZY+B%%O3'U`kun<M[u<gf?a8&^$!;P7mRYI+)[_We]di.>p<7'PRg9/o"Zc[><Z<YM4f^qJc4`K7AHROp>9i\iF:(Q`QEq*&!u7>J0F!k%.J'9goF3f&0#eZ"f[`>a9"u<eOaOES3WWfPM2WE/S?,q,M2CSTP3?iOT+.AuO%^s3,\5MQdNX<"n*jdL&`^Egh?\Oge2(cu4ftR0%DN9d/n'9>+;B95oG\=JY;jUq:<Z\-BV'k89Mbr4.';+MHP`2QYG&D8QSl^*,]Q+Y[=Q2*k]Y3STSM[(#"29Pp%'SNCEZ-X2-Z'`5%ZX-3d""ZgI(0H4lSomEd8`!7(5><X_bSi"\O-o0T)Oai0a(^Mm_V'_U$Xm=@kqn#ra[j)^7Rl\1`t1%)TsEWgUu$P/+X>MWFbc*A%=rH.g9<TXG7OlnD&DpIX`A3u6d^;$=k#8H$WS*>`<__TK\3@2`;@ZFg296&!e6/0-lWAlL;dC^oRpV)M_BncXTr,]#51VTc7iu7`%WGkH#1>Gj=Jc(h%;rN&//,N%pMk!(TfDN+R_Spg9L7Sa=j<)QYT7Qpa_?qLM-`84RklDF1SHp=fa0(/?TGf/IEVFJLfn1.^aB4jZ%&GZ;eb^E,KA@T+n"[*fQ]i`FaKp*.\J6@=A5!$*:%*?bV/nLga`B+t_*gd2rR,/_t9?pf8,8Xne^MeSu)qX3Ce!3gXD/ZcVF7F/<%qo5\)/$,q>^0PQ6<PP)B/C0o:?YoY/p#+TU&X8ej043S%+0EY]d1*)h&pLP=:Hjh2Furf,F0RE-L[6;WA@Ji8X!?/CV58\o/Zdi7%,pg0/->&h-c$X+qL)mg*4/#Mi$np01Od,4`-,]0,:2UcLeP9op0@bMDb/Kh#1[H=-DF^k+1odI(OfP?JUX<U2]HFPHP[W`KVe"G>%Q7Kqm7ZI!,f;"!gnNO[=F0P0b.G=)@/_P!r95\k;GjJTlg2S3AiUCEnP18\e$@35+cP%6$5.8"I<n:o+S/teJ^TlP[5%bX(REF4K%7\h#00@>s&YF1*p$oQ<_1tnEsFMaEKS>[V]Xea&UJ\%EgF5Jk92QFRp>2<n@O(]b*J5`o+T#JdM)M;;kQ%"sB8'FtRVq/JuPGZBG%#jZVH2p'%p,8Y^(b!7o-p#q+q3:s<@Crf)K@!"D!>`\2D]gT"r>i1VqO\6[$_S'k*@s,D,WU!glR?='aPYsS9XoJ:YZEKTa\+B1N%_HjKR5hF90gNtha^ODR,ZK^B8!9o1V<]45g/m\DN0S<ob`VBXHf#rTsFE+j5"(XUhY`51jC#=+m>m)b,h!-%oe&>>;on8EuZg$J.%qJ6eTQYa7CI2YOT%Oml"/se2r1GXW"\i;p4IP0D0ZK^@rmF$;$<]47+3EJSlVMiWodpkn'O\HW>[)qYF24H5$9@8r_#LB9*S%i4%%-hT;`2I5,9`C<3(PYKb4<S'<dqoGX-eh)ZF:"L&uqTbu(X:!9O)g4,F^DQ8gRkE"'apgM'0!58=><UJP]!r)f6dMWfgF_ZGJKHk@%/hWJCC:t+K9c'-[VXKHP,F^;<QS'ap#1'0)6\]bgeki[:11YD7+e():QS.A`^;18ojf+4d0`WHmM`l2[0et)3NC<7WF#QUt`2Ci7%Jnc+>^99/l9<$W6?h`*IC)>RmeFdEXNCX5=U3Y`[)&/!F,d>[^#muMlcgdRklr#02OQgr!T'.W+9/O4i-UU(G<]n>);P\<"'KfC%%Y$N]D9=K^dp7C0Ukoq8tbW<^!Vb")RMsbo4=c:&W:-[nkRnDQ720[.^k$*T=iN1YdV.=UX9;KaQ-?sia1:uaf^]Al\"H3eYglgWb%].>#BDnTNPPNYk;\`bY=Y0qXM20V1WXd;$*7'D]cHo=&%2s-^W\U*-R>+W_(_JuI6fBseS0XQP5JTH+nG;I3I!.BaWdJ-,@0%Uh[%VpAWacTd(N\ur<Q\P*lqa[$nLZdKC>hGAgFFq\/2;+f,S_\V3nSbYZDDi'&urbSO/r>nX6/,!tV68TVGFEl20Vo+IJ3mAKNeKqHq%kUl,[l]V''4n)JXW?q'on6DZrHMS;#R[$;+)0?%F=sCU@.9!a'A/D5HHX^j7%IDK\>&cs8Z>q!6(=T+%p/;!sZLrB:)IB_pO-Nk9%,/Y/KQ&*RIeX6[m1Yh_nU-tZ_2B@dM#$CM\VCn0Z@LVp4:TAca9mK+<_%:2>cn[N*)i9C[]r_1`CSm#E\n=3UR2Jtp=RSAK\?F_'%;GV6,S-eplFW=96n#2uT,kcHp:Lo$P-Sk>(_i)+X9Lg;Ej@@hGP`3e)TH!<0IV&EtGC;'\NZ7E_^ULe@)t$V2EH9+U0JX_/AqtJ,%?C0c;q51fuj<Z,.ES'f\@ZU6Na@jZrd:CQ^gi^0rFfs2Kebt67XJ_LsONLB4]3)R4ZLsYLZ*lE6f-M4kQT_U^13t&.1<<jVC71,M%8?BN'Ls'])opdO9:TrWV\2,>%SfoB1@P'^h.GYd*?;L.&E,''GE[G=+)Uh,Nq<]meqH_tnrA?_[ZOAJlp1l,O^*OjPUT"83P*k[+%&R.np@U7HM3\nRXRI//0,T?*;!s`<bX7A$0RlX1Tdp4b=]D$5F@\RMd,URN/E$sZIN1MCQk+38SRZUdtR`:R`0jHBW7he=,A\H_b%Q=Nr'Y7_R;&pM`=NpGE\F5fb#Z"MY:'A=*U_Rc+'=a+[1`hIZ6p?=i^Wa_N_rTGpUnJbam(K0];*;mCgq\BchRBiErF0r!t';csV%cY5DBEqL?Io%e[uHT]QS]&%6URg#7TpO1`0aqZh;b?*R[XuDh#X4uM*DsM2XL\:>JdOp8oT"]9^;lJs:A)=''4`"d"[@=[R\6K&u%dr&&9\iX4X;FsI'LR\85E0ulCk<@3+^5b$LSua;U-0P987a$jh`(#aWpU0%k7WS`Z&"B"6(2`\Fg,4*GU!fm2-.ZlabdJ5C7J*<9%kONoe91&((kYu#+>4_?P)4Q9a(aB=cqW1G^F"WW1(V*gI+6cL'k22Z)q-]u.IuWpS'-!LpX$/`p2-PuTPi)?R*#r<4,1tO1\CjJf%1t^A308qf89H$nVnebMuX97N&9>XrtR/Qf#?P:Pe=DQdem9ZY.S`qA&Netk@01P3e$b-%:laZg@ePEgj-gf@!->2T-EfjSM-5p%I%a3nMic%`s9?tJhh,c;o9AF1#SJ4Sp(:SBI6M+u(3L(mg6Z]Q),V>FXVG`n(6UEO:gVCq:KQCElj6E<us^nN2Pp7IW$/OGZ?_.KF>%7YEbuNU>E_-"O>dQZUZ7=YH2*Sio](plj0)!L*K#4g(-933<qLT?c(kSQusL*LkY^F38p!nX3Y8f[\<mXP9'j5$2iCge^b*gVhbe%;DutLbouHE^sHs(pQ,:.*5]7G0^!F[eifU?h5=mG)EYMjN'h85#;Br-=BDO,.nboNb2OM$"HD2@NG-mZATTSRbZQsM^%FB:)``O4%328:>S/=%PG8%8e?`,&_5P_Oa30tZ%=PC/<jCANJJ7,GTW=)RO,gd6Sge&0=]d8gFmI#1qA54EI)*R.Jc>Lrg<o'!!bo=j<e=$=l%\QDQgk9,C8Y'-ch:2,5X5b6fQVK,/O\OoU#*,,>Y4H%>#oD,'l_g*s\pBR_"PbDH1G&9i_>qc6F"_1j,pW5TiCR>sFLP[`5Z*KC3%iD/c:Y*XUC!41ef7O,MA8.`sPHLaulP,d`7G+9ud&8/cX/AUKI-05+V&ZU7i!N,%!FR4qYR0=ENPsc"d1Cc<WL'G1cO(,3J/3n&E%;K;b!Ei]o$1!#?#MN-C](1;0LFC.UM^QS;g@oO'-WTQqMHFf6@mn<KKgTpfaQh&+@'o%2e?hYMmL2eXa[?2hlK;ZX\q8c<?D`?VI%E@G7b(N0#7ntk3(4L@cWZJJqK^nlFI<rkCjkM.D+lL6?'C2h%lI`",a$LdX,8g`0:cA!8(?9`jOdDVnGU2=E/oh5#d`T1.oFg#/*%.O2G!om8SroNo:SY>Cr>hW):u#rBM;oh.=bWn2Ur1/[VXp\L^VL+&XoJaW3SONBA5Hi7V)=->XHaHlqroh-B1kP^\Eh<UDVX']3m%JAg7/QTh);#h@f#oo#B<oMa$3\CWAsi[j%>BH90;duP-*Nte^7TR6Xc"Wc:X)8a(9l*pN^GQLn)]mf4CDF,%ZchI:T78:m.r<Bus%D[8Alg$eT,YD(4"&FT3ahb[/o\d,gu00O;5-6oq%Hi;q_<;<SEOkUcM^=TPE$r4LdO2i^BSY!^doh/q0\VTV;pKkVeI2\eG:b-8L%Hi;@pY4[b'rpTO/o!^Ytp$4U#Wm?%jdLjQ=A/k/I^XTZ7L6OfZHi;B:LO6OlDh(bKo_\Cfc[1J_eZ\^`Nqdu"d^P$rUMY@if.UEn%V`F3uhs6VXX5@m%d^mD1j9if8f.VQe3>t?5n%F27\,$PQ+(#OE)JSs9%=FP'\CGLGp[NC6V)+Xud!;g%03@[436Ye)qK4&fBXdhp%N1g:@ob6C$H`LL<=_YRM3JfTDj1TnUC<l2Of_\%Hf5DLOYMJ[?bEhl`ke2G>QAg$_pNNfJD_Y<Jp\OQT$nlMke*]_,GEmL"GtP^!%0BJG)T'l8Ei+#Fik`B8%hWpLLkg\QilLS>sV"?XE)of2H4=s6<>Eo<JldqV3g$cV')WU+meSgQ561nR!FGe.NFRjUef.UDa'K_-R%hWpN"&1]'t@/'Mohs)#QO7dY!?^_TqFdQUml^(V,)=1ZoI3t_uqP@fUp2I3B\o?kr`L6O.^NAGM1aUqW/9Zi)4X[)L<%`8^Hpl8F%ZH'l7&s`?OCR=Bs-8+KR^jA4]0uCu$\J'DcAjT_q;fA\ZM_Ja_+UCXQi$hKRlKjO#&7J&\aOJK,kK&$bEkc;VL#]hm?E;bd>,rl(%:X.qJHspI#^=[X2?#R1E]MiQm<[P;V5rc2u1O_JJZI>Bd=Y6817^%8e$fe-$@iL-RqWZjIp%a#"=7AuZ548@#a1\C9f3\d/]@G@a%4Lj5H3'T:XGCQ5K+2?=N[S$FhkBC.Z;g3HOZdXE,gcpR48$cQO^X$5i[$ucuWQAc$*Zl8:<#_Zc1&h)^qKhVhHo@MNT3D(.J(qlK%?`7m"S')10,;VQmp.)3l_qOID#A;"()p:lDq>3V6fG\NF(gDb#cctUqnpL'#H"jQA3HoG'"!:s>Q:i<hZ\uZ9%8P"N8UE6Oci(If%lfm.@Y0+Xs/43n<6Lmd9>4%=8o'0P,EHUe;?3*Xd&Y*,'3/L.+c#c^Qcc/7HDQ_L&K9;(Eh:]<CdZK"X.ZVhK'J>HdK.jX?_U7W!%\&i!T4,ZinZ1#qpjA;5@gWb"nDrM:h`GE(B>2GYhBtjKF9#_"Z'+caN9mo1,X39[-Tr.Wd;4V+oehoHE.=G/X/GkVk+In2JCgO2k%S?J121E3CLhS\;gkan$tgZIY@mk\I5Utr1;*<4aQjjs.H8?K;#fhK&Zaf`e7f#8>PS!r0#.t!Y\[Wco=c(>ANF+s:R9$,#nWGau5%IY:2Tno`g#gO>YK8sPH_Pk!cN&M]>bK>:`.]\:PAUIA'4kNucC`#(7%Xtre$!le7Zn8i$(r$80uSU:EFL"%mb2-/n]2gbJgf3dXO%l'ku=pWo,&PqRJ/:$D>Sg<hpUr_#A@;'2kUm_o9e**+,OR?-?);17r@pffj7PR$g?44!i@_)*%/\[=A"&[5D93*2cl[sf)7`1qUS%Suq_j"(<K&'&3Qk':.M!D/Ts,lbK6;hu>6`\rUK<Oo'>9:['j1=6.Oa&BbdE%s)!OKc[mL$\')UfQd!rqiL_deNR6qR)DZQ8lt--%df/L3%8XabOf-d;[ij&g]uXD4VT/eVWgsn`kJHJU.pn8,EKqep3[V6g,M$YKl@`nFO\0]4WRanG2+qG]YHqkKRblJ\F0Os0GatM:%fU=[GI6,4nq<Gt'I;A2W<d-2LIRul4VEZ/03>*t,jO@<OgP`!D?;N\l2Qh6t\c=W0%UJW7.!_S2AhiN4btkY3Xj-+Q*W'G3\QFPY%X15cJ_&BM8,[87!X+:jYhS&eK@<MU=^(b[5D5f@(rVH*[7m(g(2pX.dE@gin/D$oG77jLikq9[d'S[k-JRg`L2hA<*G_Y86cEHRe%D!qtuZ>G"0?3#nd?>b]bIVtIhZ."cec=HrH1,O&a24,Y\X0HBQ(lfNa2?Gcm9?4ejq6OXs?:TpMQdMQ7cjJX`L+u\EYt9%qP>L=T%Sp3d3LEUkg8e,@JGa=-qZTT[4F:7Q-j"fC:&X=j`+AsI++C)G?,hjpt\3maIiQpi,X#\!<lqW]<jJ@nc6R(h+GgSV=o$Rm(D,ZDX%/a\c2pO7=sK+kr%)]R\K2@M!SBF7B18MKjTRAi,LM_emsPQTkW+;9XMR&@$@EiSkf;IjDn:'jgH(GT5"94iFLU5TZ)@d+ENs2a<I%7Wm348Jt92GiS3H;^N9LZhf[sWT*77WD^^\m9EMlid'eTD?f-k:YMa6SS>(h<37&@=R\o4YDI&\RhjIGe+CBrasrE5X8(2EfUg`]%C*b$/U&cs:SNF'+d$=[PF5+#<Bn*`o'[RJDi\r!e\Pnm[p/I6=!7:2BJpBOlEo=khI]gO3ZL.TOGqaA*IW>f7KsLqD9]X7u<*@n)%k]P!Pj2.Q-\?[u?Kb)1j.TSVmd$3=B2`<=)e%;sG,RSbm7re1I),Y<K/".jOZh)UWU)5Q.:lO*,i@?uH_"ommd8>2;#3leq]JnQ$%#;Z]"DOU:4]L#gH@=%nKnL$U(m>Zu)k<kp#VhtQAknkk;+lQTn6KI2<=L\qgFJ,;tog#7e^8[NOH=%;EcPFc?2cut#6(jl!C&`4L%;;.foBWbXs8/1+lOqKh?J:sa2_YtO;8/Q>M2\Q5rQRR#A:Y@pGj-_CBoPG3iV,flK"R&6qWIUTPdS[u/,AS##'jSGqog!CHms.@[%@;W^M!QNPb`EdQ#@GJ=9b?@&--/1,RmG@`5H**FASd-RAg.5HP\O-!>Nm?sIX#k`HF3_OBFOfT]$=:R9qk+qkkUqEXAYTO\/ro@h%h5e%\6Y3Zj5+Q6Oc\sAS/?aO[Zmq[E+=aLFf2&,H$rTN(UcTX#kh8h4U,gAs\9a?=(u+ph%r/YU><t8N8mdSKO6mUO`ie`m8L2c`%Y3qLaN^@6T<E'V;,TE;<]@!7_O@[te]QPG0.UQ)SW.,;c>d'S@K#[X-`oh#i53Og=l,E>J=LUIrX]nrEaQ30gWER.:rOX89qng:"%ocn5o\DOTe(XE0q'iaZP7G2O`6r'52qg,m?FK0-bFit'N])VQlO6aHRff+VqVmH6Q<tkL$K5,`Z+?H8SdhGHX1B)Gi>mljS="ZFI%mt_]<ceKK-D$th#YL*!=pdXUB1qBWg=4EGCWC_q.^iS#,V*ERi7;C6@(JE35[?o4sf9e40adEdtr*_]_9eDG3\6bI:B&k2r!T`^N%bfL+@jRV.?Io%aI%t8p*>i?4e%/E.HO0*4M&3&OSC`?b4ZP%Isb?O(Rq#CtN#.1nJ=(6'!X[<3XrE4JpT`AkFlcd57B?4CW4(M>2%Xj:IM3V`)0P;q9ak>pd/$o@71p55XO1iNc.H?<Vh3cDmU,Q>?Oe_84(5n>@72a(K;c5!i:D26=]['FRu@?"S6(.g%M>$qSBW^!D2%Y<RBq_mNZ%(9"Yu0ttGhVH)lm_ZZj.TaK>AP_N,=<p?$g/9+RiGIG#c^3V^-jk'@8^\bbAIC4NTKHFB52`![dPO.9!7<f/V6"n#4%6G)-=6rPf]-]2h%qtDJV4$89'fhBk5Q-j[4pdOhIcHpKFfCh*`Xfd2Q^@%)$eG3%SIr`ZR@IBrCZQe8UDA%.+GsEqN<T;AsLW-a:%aSPL3OUf-QB]*]p5Bq4kS(9bUiG4d>jjFtjG1Zc_\b`N">cn"O;U,e>],5dIP7Ke).QWT*k=[1p[;,<;q==/Ucd1^ej@ZI7VKl3l%Cm:F>lM'R.gDc--caRZ&SR9I)<_q=kFoll_qTsJgk/i/umOqr:oNBa.[Zp-S?+qt:&_u*[mr7T8HgG:JZLQ\Z>#JBDO\XC!p*/o)%K).A\]CbrBAGY4F*1;/&JOdJ((Ir(%(J[K_p+J?ok)Ff4-nScEm\;:*o@eQ'r]:([h!ct5j"[hqKPJBPir//tqn]b,h6=:$Ck',H%Q5eH$q.B6lg)pX+P0Gf"$9NHYpVOjC9fer8+(\:*@0D'48*8*HDIVe<8*5H7]9/NMX5:pf<F-c8RpObbRCdh$<Q`Rig=n#Z$PC-T%U?LYW.>%uRFO>rO57HM=/in'-i<[bOd0ZrI.m+,Fjh`fZF@qne@)=^*FK4=K7ETU?FI\T=+>n4orbFVPZ3j9uj8hY\<e6Yh$mII5%$;@]JS0Tk$+GLq""a'o!EAk.bc=VUE+JXd)1R%:b)t7]n(Kj@QA@CXe+br3Nrjk$Do.efa&a]*p/m-kh';Z#H\]r_!I[u8>Pn'iN%PU$DR#ml\FD5:luD/!?n<p2/X[;o>ZHj*M$i%&k0?R]+so/Euu^_c/>JuA[A-a>-$>q]YtgEg?7>J'h,3O`7N:T&>Z%#fQpB(<u*%8==E@e/sR$'o7,92FPOl>i>.,FP32=Rmhn>b67+cdpe/,B9iL)(f"qM2Hhb(pUZ&p#/t=mDm[ST#^clD^ckMlcdW_<3.sL.%AA.@%K+-O<;\P'6+lu2Si]/3>`]&CYC&9llH$(4l+kTdg5t5?/m4%#ZBH;4piQQ*QSaBFk2mV)';8)@=a(g'1HL7i6nB0=*X?8297ga%l%)n_&`M2j(:8kKh1q/XZCgTlb=TN6SB>C'F5gE`e2l"+a@M/97+(nn5+%h?9fQ<k'eZZ8\X36]4AVTAJkHP;Dl_BWcn%,%H9a/,tE%bZ+@TO]bB7/OD<REOSJT$`%U(9P<!-8_YXJh\?B,?QP3Yi16WN`LbUTN;pjoi086cM$31kX)aX>Wr?;4ba'&OlPp'a"W[d<El0G0%aKTU8M1ik9%[HZ<NobtiG.0'0Zs?&[V3;mWA>>3(4R/`,>/d-!<2>B['r^*8lmg"]X6@&]Y&cbA]OY7Z/-DcQ5)A]%'"pNN0Z]M,%$-Sd)eD5mG6:C_>"'ugb[SRluW.+bO1"%Qp>Nfe5flNA';]/V[in?jXHC>(6p00u<Sf*L)T]&'R>=HQb5fJ;;'Z!m\($[J6W]2ft%ZYlhM[3+((2s5Yd!tc8FG[ps\@m*o`^2A$]V7JF&KkM3o;jjG=f'(]Yg8qfE!lH$BP]BuD+4I;rq2ZuJ@JJ&"[G9X&9ElD.)qENm%<#2X3dTB!S5DsRbdJ;@W1XBd:^D2eNU<EbWBIm?+p@q6oTODZ_QPHZucrg!MCjUM@:OSnP+BgFa:TQ1LXgqCd72=QP]6O$LWSmbg%+j+r;7*^[Hqkr-#hYWs<A.3N"N2Rf;rV8F1Le-U6fm&lk/G9ql`$@)Big0FL>U25R28Ql913^fT\ds,0S:/?VE&7uPE\hRI/hFOp%kun'3[8pgM/bP?624<L$4b`7fY0D>[DK1hh1T-&F79i%/MX/U8W9qakc9!asBor&Bj\:q@[/@m`M7Wo!e];G9Vg$"W4KUdQgGHj:%?u1$fIC(p`_P_V.n7dsg<Ul`X4.Tr-\>][;YC3)0mpJTm!!h@.@`&`=e-Ad0#_>/f&n;1""-(LCFcHTM?rC2I(**<9<hdl*;h?<G%\36En+kPcR!](eXp)DN'%HN3WEEls-gWM[7[UWA*_snVD(2jf]3_'$WG_]7LH-bUnb*0RjLp<hD=2"sToZ::=pb]='o^I3G@s;SH%1rbhff/EsZ8+!B\e(`ufeD_ENNQ6C(dW=ibO2e5)5H]X:>[d<tF8TV@qXFhM2SPZDIT<$(ePDZuf69`Eb$OcFWEdZRd-Te8A.KJ&%:A,J.8XB4(QK*\@*C1JeRAb\oD"5cD<G[,0_f5Nh<o`!<RJ:RVA%jk>2cH8ql^.9C\G<:EV5(d`?H:_gb3L.9NeQXE\Jb<FdT]-Q%-N6a=W`e;_,&@59jKFa'._:W5n*sIND\^rKcK;<Fr6J:/$ddspC#3^X+4]bR>bM.Zdq\dO*=KB$CXo>LqHi:PC,9Mbl!FPlihmm\%9e4:hXp[I!K^R[ZVDdnDokN?RcL1dL]dp3CgD_dVm?^;Udel2AJ=t*a]sF8hr'I!@]n<Utnl*mSisn]!UM8Mi\q;'\jc'*er4Dks%mM#TFI)>WqS5HY!lp/sRIqJ[;B<Y,s_8"sL2u)qK5l\neq>L69%jV)[ID7ndbr]gj[)+Nc"C][eN?J6*0W/Rg[RX_s@=%`pa"!O4%7n`Yq&-0Ws3f\cQTP/SIRt&N(gHj6]/HC&bgU!Rb!'EL<!TFeFf@M-gdBX1Q]uFG6$nF0.EjKGh2F.25BR2R[!4l]CY(Sp!Y1k"*%>:JZ"n#VU9C`b!6hXQMiaWR/_IDY`+GgE.mqi:!);NBkeRK>.H<(L+J/35lo"!e^AoWtF4/B]rnS$q\qJF0j1!LSF,Z0<)H))?:j%J>ObH$q\bS-`$FFJUr6,:<Z)LACY_8@3.@JLbZ[u1ueC/Z]29sBXIr+%a&u)(Qe)O++7tUKO,UX$?;bfS'IaY!B+@O2Y>l4kY.J3%6NDR+q?drBNlC/-2@P<Ff>UWQ.Ad?3d"&9ELf:qL3Nt7AKT=+Z9s'XU.1@AMIH\*Qd(p%p^)%JN(Qg1>\HYlm_eV#EJ67bf3!A(?%QlUjO?HREWO?s?mQ3OUFCtX.:Af3SS!!+';M!8"U@YLBTU$iTa;+eYud@[9ROIqi^cpT8^?\10ULJgfR]-.YZ-)e$bg15dHknO-t%$]s;;!6EKlBdj8VMN6j(.`<laJ`ge:q(V-.',$`L0H8Z%m4*&N"uM;i%D$4T8-9p;#fgSk2K=F2*n"8#P<u_:HN[d\%KX@U6Tq#J%$p?BlYF.g86j+XV5b^XTH+;E+'%e@]"L]CELl,><$6XjO!q@;ge01FL#5gUoK0g?Q4g^=N+9]1_m/`nQ%\^e8oHd*ia?FR3!9/#!%@5\NZl.#B.052<-kh2h6NDg6+:N$YLT"tsa8ia'*Qic2U;dg@B!-(`Z;m6B9h_9EeQe2K!=)eQ4dW:CER2+dZKYo3Z#;BNgY+/n9%lN@Y>"889^,o"I*3AjBaTJus\FK)t:"915pNW8k-1?ZE:]<de<)8IA:`0MFjpFM5c]`[W<nHB3o<=i>uVjadO;i$F?_g?nk6'jaq%.*to1Zn*CPI9=quJOVs])O#/7+4q*6@)-VqC^okH+Ql.KD7Un,S`cFO&XEj=J9&F7A$hP10fgujb+EOs=39&p-BD)i%0BKR?Pp$W%%,'W5J\Gh7*SXX3LC3!NVSXaL!CW#pi7Kr=pnf!DA-RH99V2unM=1Ij=tV$UdrS+<WMY4l7B$]N@lT^qa>4ekjm2te>RCafob!?B%D(9$]!'t%NFNZ"aJ8,_JmCPe;n@a4)fR2nIUaT^8/`<=?i(DSrVSY<FPn;5o!Fc_e7WN5Hfh@[:I2k"-W!l(;+6$KWar!p<$'kZA%EtlFk!6=SW7Bup3$nYca!/r*fQEhC.KHsJ>>i)G6.M]43_b_X,p;$B,9tisG.>h[cTCGf/W<n)g>o\B5!NO$k<6>1f/58gm+=@V*%D[^#+:;9g:7]U]:L%)pX0T#q5anIq%9`T0<gXD5j0[k5GAD/.?>WrI)=odQLAn:=+nM<L#SccoQSNmeP!&6ef67SpH>/!U)![;;Q%5bq3m0L_p5(h^)d_V$X:$EI!J21U>cV[ORNKBut7Hl+S3N3<Nl)crKe.H1FP<#lYs"s@>fl%2H6=I(][UR&P^JI%:3^_kra'erL0%)t^oP>b*AH!>'BMP_.k>VTijB",GgV?rEQFNG&Wc)CaB-''<GdaCdg$;Ak"=*k4M7P]6^cS9<:q5k&!4Vf`X',-`Nr"A07!#fMR0%dapaN!%aOG&(jS"'*u6_,"o=+[1r8\%+VT``8fY(7,=BIB6sh_m0jp^&L"$(F9.U=pdk,lK$,q1mg0gZ+gaBnRfMukJ@9*SFj2*%%4kCt!Sl3]W'SSE4BV:32@XGi*gS:edHK>;aZ1B;=Uqq/4cpCY7+HBmZYrK0\bXTA_1e37Tl]@A3CGp.2jpGD1B`NM31_^4,V%-RM%==N1W+d:PBRS3tfg#8(e/CP+dL(>uq$XH1r^hA+"r=/'-VtqQ+im_FG+Ic&l'T\1b['9W'#*;R+\j<pM5kBM'QkN)<2K4`T4>oWM%HK`$'"ba\mM[+[G;7[)QJk\(?&>DYX>:P:\&mRm-k(5@@,_NT^W@m;-.%@-/gEoD(lWStPJ9h=k4#KREj<Or;$-KbD3$Y@9?j4@d%JiZ=WScI@H8d>Y'eG>E^"UL>?',_9ZA2lba]"ho/lp:t'?qCX:kJ97o@M#B'C-X7h:e*g*`,S-"gk*BI[C/Dp=WFV`F8O.&%$Npb%,+R#=p=W["JcH'a!0q&-JpIsk5S.d;V-jCH#lh<^+r7BtPL^?L)T8O'3dH_&JD*0G_VoQoU<4k[XTIIU;2#TR9O'kg`]E<PJ3F;r%QU$dt.>:*+*&BAi3?HI15_'=GML<V-neCF`6Dc)c;s6,cJH4N!*'3-cSRTc.H%F:8BJFUr&&L]]-m:4GAkEd>"raON5rVKaCL$!'%_%,RHq=nL&T^RXZ4[^paL6?q"fNI8n2PG-B65LKeH9b*],h\Ij!WE[-[O>Pg2(QJR+T3NIf5rUm"Z%u%#uO2C9>R-E9^.7r8;HP9%(?L_qlBub8!O3go2\cn<KN3h&[9aU/R/sEPE/5M<98fr$QeD9VK($7oi)<9Gk64+UfCLE/B6@DoQ"^5N[H%]2#eqC<0ln.V\:jA1%d^K@<LauA!kV3I0TGRG6eB-2IK<>F-QA2pfH8]1T0P.u8+Zn??6O[`V$l>`J:lCRcDZo4u>Y-&q"A51LW[,:giJNO#o6o,l4QZX.%.M+Aqd+,fOB]l%$<krGQk#j0M*pLO_4b\\k#SC3AQ[jY>n6q;#KP7\O)[6T@4OtMa+U2<OJ6KZ.2c!:e+nMg5R-de=NKP4\N/U#H%3TsX8o/8Em$,NXOJ!n3Y.[.F<jI7K`#ptAY!?1#)Z'b&uH'C8"!R?rSQ"pNbLJ6"pZ%n6=P[[h^]Si<.;05j?$SW34pBb%!#U)g-%+>42`;0l/,^h"K`aDdpsa<;Rs]UmRW^'E[BaHE,C[(8ShY$ATf\-JC<>-;0=aP0Xl:PB']Qi^cMZ)P60]P:9PA*Sf]g':YNkpJh4%R.eJhj=:o$F."B[VnkXQ(Ih*sqLg>['=^4^IXQ<9;aGueo5.)f7Y&q;Z\nj(DBo1jESYuWKH3]fd=ee+7YHUaBb5b![S8'(#MdNK%AgiconC%e5?TbYHM[:^D<EXhP1M%o'6!6%M8r!s+>8+LND8%Vi1dH%4flRaYpaT)fReIijhZV0ue61bj?A;%V71DR#.WIK]ro^#<%MJaj'k[[Zte8k7M3k^2bq_#6G[TYfUp(,Ll'd/P_\e3#/S%]-(^mahM*&Q'RJi254c#aO&GAhHD`:SIPY<^t^0sjap_J+aB\t0Qj%70@B/*/`]PmkooMb-"PPZYbj:q&Md1f2QU$5a33kJS&nsNeuJi<ltc:pOLuc.Kik6_ql%\l3HfU"5oaOU6,GoG<Ejb5l9f7Q<"@4%B<t;8U(@@@$eR'9F'n_+KX;Hf"ke>[<VM3.m)BA)`W0MBYO5NN*4VlsD$;*fVnai&<FgX<hNLq+E7YFG9DBh&2:QQ3"33)m\]5$M%"(1RkW":(6S%ZjM!VJcWU3!8nCa'sg-^81>cPNP4<4dqY91/dlPi3ch!gKF69*ioG[2'lKDL]3-Rk8S-M#ki,/5NU",`MU`,_Z%a%i!WgkMOlHc(X=r*T^.>q9jk.Eir2H\\5]ht/fX(>%4n5=o<n\8o1[t+">JHYa;'t;7cfk<'`cjr'bHpXXN!1u_?eLcTMdH1,A:C5%XeNpHfTJ''&GSPidOOZj&hNQ.7/,:1H6K;[U$cXtQlB_A2LtR_Tt8rW#ToNCUBh,W``3/%!9/ZlN_/Si)5umF7&M&0/TaTOFO@?V%5X'0I.`YLoD-3=@-X:KoZ'k!p#mIC!*S&[e+e7U=7(V(T9Q@I3(jEAZ#^<["3\9DA@'2E+RM2^(2M,(iHeM^[@ajsl<u\q'G8ID?%J:P553mdqsL@';U$l9a]97cr;]%U*hf,7O)eLU]0>,p#&*=)`&M'^5:PX7tNRAZ%E6qFJ@oV%Cb$C[9W38McH:gC%4.c<XeIa_1)%V$NnE"i?%m_C-$._X.Y]-ep6H6QMZK"kRni;IV>%?D-?.%T6mLh$"tV1o58P"N\5SPR<M-q1c)9MI:mbSg9!<S:ns(1kZab:P5+M%6`^K&at-0#2FFK0:jX$iThXlmU_IRmH;q(7*tGPQL`&M_OAK:H#<N(=Yq6k2XQA)>:52H3VFDo4'.07pK;]dR5N?LZ6'X[!e%X)i%%@o(aCDs''+b((K`X>I9/VS(.>G\h>_sJVeQpVP5^lSoQ`*BkajLR0%#$!W\R)9I:s&4_dU5)#dj.faGPtU#2/fOoKZo%o:29I0_%+pB-M_\=d*YsQp)mnl`77<Pj"CD97NmFV`p82U\=W($)g!I<lK@4_u-!_c9EJSeEAI7#,"/RTW$oP/moNJ&9,![ddH-;fKI*IbAs%dAV1>`Ek6\Q3)2=RXja$>uei1M`rJIE?WEpR6<m=BFVo3[K`Q,Fp%hl<Bah(ofCGO/<^XR[NeR%i]2UA;2Al,4b*cp2R108$9?V.%U"8:$X&O#bVHcG>LJ,GoeGcKk0hrJ)n::e-V_TjP.Sc([>dU4leb`1<^sFq2G?o;=C[NVd`*E`XOS]e)j;;L-3#<-:>-=oO(U1s0%'<AVZ#a!,%mU&3bQ0,qX!+lMCm1g.aM7.Qj\=/<VJJQp1OY<Iu9$!)T)*#]rGSs2ZJLtu+X)8+E;J.*E1D%Tm.*!>;#bl[(l@K#/%bI>mOMEiteDj_4'>_Ok5K*n@FKa,/+W"eDub0CgX_(ma:`HF*oFO6o6C#"7\g0nMD3'K98eT+Oj;p&'*Jhg=K)\[sFOKE+d?.a[E%kro?S/%hD#@>6Q<Yrt#0FtfI`-rSR^J>6b!cM\6M$gM9Dp7]"VJKU-^2W8p8?(cH"$l.@rJnRskgVG7UEpoCb5+(PB,+EqtK8iVM%_tA_1gZ>S'rmW_ueHLLH:h3kV#LUYZC[jY:e8T8LNoOk`%=u7\WH*uK69eEPRoYD>2UaH9(=LZB)tl*2ee/^/CcoFKLCk*J+r'R%%CQ5W57D9?VBg`4d%E,gd+QP5VK^0Uq/KT^&*X3OEXr[oXdfmW"eQ>qsE9JX(%#+rZ<90N<4;cX)aO[:&%>teUQ"i:[!g<)X$BPM2%K'<D?1Xq4_lkqZ=Q&o)f""<>`<Xs?HeX0Hl:g'Xu`?GlWS,&%7<%J(?!*^?WX+4_cX9:#(Yo8]n`ZiLu)<+cJ"*VXoqenSV(4io.%.abMe&MQ@8KZA8]ejJ4,$N1-@NV`N_KWJbCg@?[:BS``-!_PT0;ds8PO:7:PJ2BmL$ptdRb/7bpFqT"p`lTFO[s^,1(5W8uZl0%)%F)(oU*\'eeBDG^kZ?,*,_6OjEHWj`(622o0D=5-rj_VBE/L,C3#I#35?3UO%g^FI_N(=-XW?;d?U]O\t&_?*E0sUpM3J/6YKO&Tj%@Q'-jPn?gmnp%s6Lp\rhAdHIc)a#m5"=d!S_u1YqJ?=LZ+OIL'paldb!B1Xe7,/'@)KI'R,3D@H7*lD:N_47.F^q/X,ueAg&`iNm%6)%H@n:f-/m7DmC*a_Oa:4bJI7S!\1U6e;[8c^G]Xqc$&:_!'G5[:=)5ShBA+<#t`F9D`OQsh;L7?F3@cBO'6.j0l-:SBFNplMDP%3QO)ecVr@1>Vaf4;O[e3h9]6GH#.+b<i/.#3)q*=#Cu"jQ,FTj:LXkmj;L4?$WG4,7!`U,/V6O/M`.C9`idsc1@p*59(G7(C2,RN%=g]A0#nd@i6./K#!+ht.#,Is$MTk"`[Yem`_6uafqQ:TNM_G_e68i]n!_T('Di5a]2t_]*bJ5]P:Q;kQ&Dac-+h,P]/_efbDNWD&%gm(3YD@o;(:`a_:d[-Y37bo9Cp2'/c,%7t%n,l%ej$I<HKshtq#,+q>N<0PJcrB5UAN:o3KiUK+KiWbh#S@c*HlnE&hdQ\b[RJ6J%+q+u#J;YOYA^Uih1\=P-jcp*V1,,3n-><`<%\F(9*eTA1Z3,jp*"TnTCq>AG2ZIVd+r8YVGSG%NCjq2&f/2%bK<T`!nS5aO5Yfl;%L_E")4PS4,d1OB2T<9DlKSHD90.^0[2ngUNk_G20G"p/<DOhtB"A4SDYWNf_-d)ft'q8)9,c4lO1(piGQ:PSeZm4A2.]<n?Chl]T%6'<=rg&Pue)mL)/blL=lJ[3Fg2ZdBAVT,8@B%SSc2D#T`eCBB318J,C">6,dM\>Z0C@)*/"*$HW0k0PQ#jl\F2\H[I'kIW>"BH"T%7uP=d1)C(6BS5EQOSE+/e_o2X4pkhePd@nYmG^NKOH:gdO>f0R!<1u>\3m3Rm?=hh,QN*HVG>rB"jt@%0!.MYQUi!g$5Xn>VC!^K%)5<.g-cg<DQm$k7g7aXLHt).H&AlKmY>U6JkU9F3WC`qN2i7>OL9Hl[GW4IeU'k]YXp\u0WXC#,lpFAk%iYek5h?2$K$h`gD0DT]%iYV``@?N-n8C)kIW]Q^VE^OHc;.Yi>LaAlGK9CimAP`DIAP`D!A[%@ie`)/8-FZCe,?P#]7r<8Q`82)-QNR=bn-fL.HkuJ?)]W8f%aQtV_ncP("_@-a->0*,"X^mnraBu>[QA8"5(SNXj]n7Ys'f'g*&\B#N.+r/A7\uVTjKXsqFTBtm)K`,0pOpZZ$&TMO,K-5XC5&?u%9*cU5*c/]\"UOKtLB^^-5TZ/&&k1!@bLd70H)"h^Ya@Df@\J>igLYEW22:At#`NSTM):S)Rk@0g#7_=Wj%ml@.`tm@j!Yc57(,r<%IPJjc?iagaF??9Ap:a6^N3bs)G>M7a%\&o;C^JSS3,MDfSM;^])IVp/D)`Gig%l5!e5_D3U3O(5[]-C=5YOl;2-KDQFb'OA6'ci2%iW9-m$bDVfCH`<Y[TSuiE.T2<FSAUOJg_c+"As^)#m,8`gOp?f%IBQs4,Uf5JW:o[D,2bH!*oi"HAE@?5r=!cnU_l;#e<HUGX2lT%Z::f,6pd[[7)0KQL^Kmu&5p3^nA^h+G([_$.39$'P4-6i@Ud'=c^,I<J94Q;6ei*m*?<gDVO$k)R'st)=aE=e:P,kPi;o&``<.<8%bQEH22)YgV+W_2rSI0DV"+n==,tLr>#a150pfrsoQb/5-bP*<=O3Ou;EXq6e)Bt[PqsT'VZ^>Re%M/aEWJ=Y;bd)7Hq<;9X[3#*n%Yg>-_g$&3I4($,m'dR=]$=kn&CNE3-q>il+f1F%Glj;!DQK;eoNg+f!h_%o?*[Z..Sf.Z]+P/MoZ?+[$Z7>GWBS:+7KE;cA:P':K%-\/5@P<bh/99;uoZ$/$M:b(Up!#mn40Ecu0&hqq]@JGjuki!'U-^L[M6P.J(gaZmu^ggN:g("3T\lR*4frIe&=$^k66NQcV&!&)1%a^#Mi(P\N5,jA,SB?NgH=$Y8?@n+p:BW53#^c$iP_Q'n/VKSn4g6_pTlK']b:"r09+_$rkOPp<5/0-T.Rt-%H7>t"]2dq)NhpsNX%[a+'YOOg_-;j/.\@d5u*<9V6<>nLEk,L387Z#PSq8.Lal&.+R"%i%Ri+,[;\mLMab8G<?$TZ$:Nh&cnIg50cu+9ZM95]M8r8E;OI%pP4U9Xp3Y:V!\`r&Q(%6+3<g5/td<9T_pW/VNF^L#I7YOV8E0Q.!UG7ao*=&["\=sr#`AhFEN:nPkgQ0-YfN=!j#6A9n62:6(^5O%UcGH*U_0[.\Zm-q:a5'%YQBsg'/@0&20=BD5;9^qjm7Tq5;38fAm#>n!FkYf1$J\SS5G_`a;c=Y,iFNJs+=^CQlEpB6#]R-=5a/D%&Bt_?igOUq35_%sE4fmM_5&AJY]9`[!-Onm!?-t:+_egATNe?W*uQ4goE[I0&]Yq'gS=<F/a'pr/34cZk=)0cL(ZL]E\.;0QD*^]%BHSHs<?RL==IXd1#D-40N#9bU!c72R.g`hR7uL1L[;?V1fuHobcW*VH;R<Q.KkW$:3^MU2=^\sA/u2FA%R:':JLWpFOAHk`*,QkL%R!&%1TWY&Vj%^.sZ;ALIUQ\;ZbZ3K88,\5-VbD:7:uIa-KTJ==;cJ>^+A%k#V!&:<OJnL'%>]HCZLdL*pH*t3)YrEu\7uMjqCp"G%\!;!Pj(^:1-XT>JOR-i;KER^c?Cq;[&]kAV$r2BW$F&(-Ml9ba,Z.T_c(Q-m0_M$?\U\3\lC1u`F@0-Y!<FGYcIla'rZ-<9:)%B-%EFkB$o;+4b85'0n;H/4+A?cHYeHd*Ui`LM_4-#6=:WRRMWN#4uic'5*CG%I*$=foKFo.A'`LXDOP9D9Gg"P-g>o#pW#G?[e5ZJpo%#hJ.=]9<A.\n8lP"^MF^=(?XYZ<]uVYs]-tP>N\b6p3/!G:^uMCa@V5G:X=o]]L+UTi<A4.$EKk8<TeL.;MZY<IJ-SKm"_-6A<;%%&O4%)B]0eAN1\J;6;/[\P\hq(pcM,Ck]VIhK?If&",;[LRV@YQ_ii$Hm0o"rX^#OdqW<S8P+*j,ODhRXh%\N<IL^HFH8L\Y6_tbM%<hVV`P#h3t6271==<4[sFRAnO-?4?K?.Hg-iP<tn;]oP>.ZiTk1E[[p;mD'#`jQa^Q3,%ecHG1O#MQ.B#Qfgr@nF1uV4J&_=L+nH%$q.TJcdinC`&Xb_D#tts;LfIH>lrD8Bj*Q]p-Yj]-uo;R+`[)]H,2d?-rJ+'JQsVN$q0WkOAcFjm2uHS?."=q]&4i1$r2BW$Eu%&%gJ22b/HXg.[t%1^8SD3rc&q2WM9/&oDeajf6ot[]@lFt[H`"N6/JSYi*;?R-!`MB?oMu"`cs$q/e$9`$,ketVoa>>(.E=;$62a,g%;\knMmURcL!\.3<ne<b1Urfp]ZuS!C862TQj>[ksa+jsnTVi[KGd)m16j&oQk.":2=c.uec'?7gHF,]?=gXcjH<\LCAb=rc/4u1d%\='!dRfH$KFC`n'=E#:H81bn(Fu_*9lAqH[`E1#_"@s?-71LPPX3nC=PC`iScH\Zc3<HQTe'uO6fF5Y'aRR'K'b-7+:&:6!"ZR6_%6g$N3TF!Pqfc`GW%Mo3C@dlN"irqdkTn#Fk(0G;CoJReDVgKLqdEPDV.L18:Np"k,4O^#KdgAY`+aU,EZ,Ar0ZSY3I.>KY(0&<82%>nS=D@'mH*aSBEr!j6;gHQ3q0M1A>%h4_k;)g3?fS/2i;7\%*u_>nK"ej(u7Zu_gSn\F$3R(LGs,!b,kVnI8`PFRXL'E[D>G<J;i%KLl[sKsBU9"9^<ZD,V!;7]"06R>o,U;fVZYcjA3BjSU]aL40`,QO7bHXp1:s!OQiY?!<8C$j7?fV4mSRYX4N7`>YS(/-.fF*1Ke*%M-AlYU_!k;mG#da-`>m!8Wo*3bi)b]\>AW!<<HDUL%qer$#U^X,XPeQ[t4G/3lj]2PHRb5T<)3YO@NPb@!A98iV02M70o%ZM*N@"%!$5gT$=P'>e6i^gKr1V77cAWNGdN>D5_UrOGWplqB][#ZoF3,BJUfuqfG[OTTP%t)k6)J;.YlV@,$7MBo#%"b[a?YE$A'hHZo%;_%Ocq(c/U5PIA2FIn%F^=X>Csqs*_(N-1(POoB@o8`$j04)>3'oucVdEH1-q#2kb(l%N-#hZ9hk#&.`$4P<!NF1f/F645c,A$/-g`k%ZQ0hYMkTG`iH>ieJW)culOjL%%8=XEnRs/e@sjUs.)BCJj4H.jWr^J.7cGaWPB;JG82(n,ej1p2m'$s-K+$bG9j<kfjKN^q\/8-(%B^s#40CZ>h/o=;7\8l2W-&aP4[7mtB#Qi6:=/u[B7"F-)=:@PK_O$e?b0T1COh3)67..'?(:d(5HjsmL,T#c*eFW1:'r.#rX&hNu%&3!N.>7]NnJdtVWaiIbC-S3E]>mI.R]MO[E'eDaBmRiRsgm'!.EjpZoe`)/@'M,SL,7I;^"@!P2_9VPOM9sU:Hni1XZlPF&iNX&f%)LI4#d#Z,:=dW+L\rOqY8E-&>E[f=uhKcr^i4BS7-gMt4\mcsE;aH#)WBeH44<=qW\J4bTNJ*lH&7hiDQ,BQ!d+2rQBS*q?bXc%[%48Osm-'+SW'7l7)$^I-*O`3.-TH^Mkqk3u*JlJ-hH..j0`/L+pJW(aa9Zm$AZED3k>]f9f9:2'`"2:92":Phk`;!2*#detTe^Y7B%O<%OfGfMO]O@c3@frG0fdth$>7*jg:%@FZ23/G7_HU5"Ym2\uRU7fl?3a21cO"-:Q9F1]-;DaN@6Ig1'6kIAVT\G"0l>b!ASA+1G%2N)'65_3VtV9%Gb,&F=!4Np6,-`Mcdp.mr^`tVUmAaIX9HXK70%7<c=#0Y@>$t"UN88&;<.'_A\@#2kDg$E:E@\?*FE(pZ@*pQ9-%)Zt%L7kNnu:Y0*a3Fj%)dp_bm/j6iLn`K\(,j^=U`dl0hW3.;"=K;R8nj)N&-\!8HdaRiBW)Q&6E*IoJ+ufiPYBkFWQpYL$:hUFP%ahFD]:#&Ye6s^$1h/XaZ."lGLC(Lt-Y.u$#)D7EN*m'fU#a_:tbhsjNZsAI%8<u!QH4(7,+Wu(H%ViGD*sE7aR_?jo-8hk1Lb)[1%$9^l)X8rN7YIaZ0<ETgaVChNRPbl/qCkc28L`'&baN6\fQGj.Z8.;rC?F;qb.k$_m!Y&VCH6tfC7g3$HOb/3F7?d3[[2:3&"GL8$%!>3LC>71Hn=h,:K=r?7oX9I^=A'kqoip3!Z]Sgg?((<^H4TWSFMKg;97>8jr(_\5`$ONf\I4ChS8[**:\5%(3*iCYP41MEX.TD58%""/'u+D3^7A;R3[KT<*r-,r/0-DONO)NFsb`2/cpBj57S>+FI%k,aLO-:$W7kauu[<Xa'k\q^YFZ/1Wt!.bNtTg8ZV`TdE,oe&89%j33\E$I0]5fR8>NK($am<mX+*Hi=%+MDM=8CA0;9F!k6*1!1/qPWjpJl#61LBnG?k*_(oR7IL[GQ/`5t;kp!K>:;tSd`s"_?9MR2%kO0/Rk$&5?W+UQ:RfHH$Gn(pG3_>Cd6R7PU6LR]-.*//iB'P">9*gD4oX$Hu^&OGKZG'Yuf?dlrj7T6d6Q=1U^=@)a&M,_eN>qS%%VJZY"B\NPDAK/*^3U4sf+hCD%dC#$!(WHnWVRjA4"3LQ[F`$?2l'3,\/Tn_L1GM>X:Po;;VV_TDF%7hr\g'MiriSD6rJEne0$D?d%Jtd\0UM4*!W7kf#,BltlOb#:FeT>BeJu`XQrSNARpScg,+YPQ0<LDh;p'?3?H[Okb#<:FPho<q=p)HKakh6V*A[NkIBa,Rrgsm^!%dpEK=Hf$kE1L0d8G:Uk87\[1o]WK@SRL@()qMsY4$>Yn^XC99m`M<4)Ca0P,bjk(/X!/lVfg];RP6%&nSG+<K4N]R<SU5i8gCI8(%*;;_ICBT9uSYq=8:g5r>N9+g/(CGJ,"ARX2OD3+@<EW0"[nD\t1QKr5?#:MhepW#Ie`C!&dC/YPlM%>rkA=j<e@#`WO=a2PFCq>F%0+5ra<;ubk5p'sUFQ]m@j.PSg4u.7"%-EKg7WfXm1EWg7IE*@Vqa*U+^0o<s06m-ViX45dUJ^!ggm+gV(RML;*-dFb#l=6N-+3Gb%$9-*K=rL8scDZ9[1Fh/jUoN4KE+?k!k9c;-*?e@k0,,,g#b&ViC($=7?;2?q3gk?S.,<`<G@&f]cCgqQ8*K0l&N$>R/EpjRV&Mio%_b6V,l-@@r1)IAJh%-kbSPeX3cr%A-Ga*)2bUg9Ho_j?6FQ65_0lb7MrL?77:=p.Ul,EtOGt4_.I-I\RUUFode%*fE\XG>J#jEdF%OB<g(c:sm[Y@T]R[&1%T*MK6M?SEna&N$>rK^p'\VXL8_V7Y*1H&jJ:`bE,u9^^qH]=7BPV&RUMfeHRm`nF\S$EX)moB'"BkIr%Y%FmcTqNm\r1UNKr5W82)p??I0%V"LBh^R&"A2huP%0XVj]4*6P;NRN"g]t<ObJ@l2Wl.llG7PRd/L0Rmt>Va"iJSM;MlJ3%5H?TKd%;[,'0B?Tr3,P\"iI@fja:+u=PRs%l_]?bS*^&+<c=7:k`8[6Fa:<8WI,qU&NIAuWn,)%3(h9\>t*H/V1]gpe(l.lMW)=?N?LJg"E%1K:$t7iq,=8;)0t]G0f?h(CVeoO^)>2rNuNkYtGh535GPH]?4fWu%UZ6\/L.GBn<!!a<l.70V2lnof+B\K,Y\7c!rT]N=pCd*]Q\%'\)Rn9(gg)TN<H-/S9VBHM^36A#=5Kft0OmnBac-9eq9N$KYFe%Xe6m>tXR*&@sof(Xa!-4nnq(gPW9Si1mV:j]3sP[f`?0f+O)V%+G=(,b.piT"H*3d;]mfW@9'.+<-X]VmrkD#1_X3\+P=(KPBsa^-QqK`&'KrJ8/XXR4n,45N7YS5c?L);kK(;o)LK%B!3P&CdcW3F%IWUb)pED"hj^V],Ob*.,_+Fn0`37UU2bZ4C]^K!+OQYALbWY(^V>capIL#n4n0W9uI]j%<2Wea=1_K!S`9Ko\49m?Wqt=G5+RL2b%0q-Q'+Q3LN<9a,unr=gUUVnbt6\KI&]"_4c/H!6g2210WIj19!8tfKo.,^@^f?82[Bh_PTG+PW=L9QMKnHL%:!mL0;e5EV`;tb`%%OM*,l)0+G4R0W2h[XHq;l6\@!&]<H'Kgm8o]tWPeC[=;G(d(%TqZm#p*=NoZMf/]e(%c0h?XQ_<=+E?[`Q@&bQ0`cs.ScM`V5BhQ%:5F$SfH$Dp18mHJ!*"hi%*92\JD"VFT%3D1Qk,EL.n%IeWBn1=.oI,&D07f<6jA/X16Q^c"RqhrU0lOtknbDK1#$d=q`896b9hUV%>Z[tgGdf"Oks2lqnT2uR;R%bj1<=q@L'im^"7ag6UjtE7dOhTjX&s^ZVMYnC>r@CC9!;#MJ%`[sns)MZG9Ase#ASJ"399J#[]>"4%Xc=;C:c;L:pqabW3EYs-lLnqI3Qn)58ILqs$R13c[ns#>/H\0A[I8tsEB=74KSh1->!\8I>_EXsX;\;#6YS)t3mu(mgU(eeHH1js%/8:VQ\G;J2aM&)+]Ag=DT#5f^XjXuZX!H5Hi>ophjpT_$JD@PPTH6e,!)?\/Bo=h\:d=#,0Spfqm?p%NC#9LgOYbTKP:8!1jSd6(%_[?](bH_C"PW[oTH#._0phVWf2sS]/@<g0KZF1@g#7.%Ioa$\8hG9I+#M%Gp+J]ct<-&R/p`%'@6NQbu+ckopFQ6:%)e2M\-0%V!%MJcg2P/QuX`T#OR\H5jlgfus*Vh""-3>52Sa5'5_4=!]*J`ge_Bm&j1IR1[l!pD.ijG^g+D=up<OR)gJr<VEtIdT:8W4q`'C-Z=3%N2n$C44]()A6S6$]<PqdSF9g]F#T03\13h_G_ZZ\GE&9?$1`Lc$0rK8S4%@?5por>r!"r-h(X4)2T]+5P;gkhM(tbVr:#tDf!'mc%GO]<XI.mPV)&Ws7>\s_WCXSo\pb*I"IfNbH?c]'#*tBIo.&?sMj5H9OpUuTOc:e`8D^h6TEUmHcc&CbQU\"_s=+*a+qjkX7._G1@%kni>Wq?<=@o8e3N0-=]5[ue=>n;]R\ogmHAU4]8T.mK!arGh;WQg<Vh=8S-s4cZ#+J.?d]d!=.IC.8d0L"7?C%?6$1q)5qMR$1n"%&iMb.9u=q;$;<?0l[74F1ntRBI!il]8q/K+['eTagJ[SeoWC/D_Ql:c/`4lmL\03e+:e$UC&JV6A73<+N],+#UK%SDQuO[MIH9di%9"_$$p6+DAq?M'\n^F>5[g!S49&9n/'iKW,ECS(T\7#^Z]Sc)c6nh23_#03[Xk^@rM,^@%Wj123"kOo&$Dp$/bcc#fY+]/JMVJ:W%WMa=BP%X&?3PH]IX5(*J&dfhc?j8%pIHiJZ"K&3UK7]2K0n-hJjtk%V'DuZ[*"YS>OY-,$V;jL"W)_/5ZkYj?*H+EaK5g*CAH3Uo%900j>)!O0n)<#-r=`Zc"PY'g1l#57/[W&jlmZrX&J?N>)o4iM6DMlXg]L.@t]3b!N$)u-T_Yi9j:2_1>=4!luHG(Gc5i]DT/pnG4%/]sgMBJb\b.o<OM$a;ToV>h^.Erq8uR27%$+TO.sdsTi/ZeE6Nj$V?>n,jnhSK#'IUQVB&n2Lhq^Y7d_KD"%1eOQ[;4IKj?m,f]u%>M#isjL`K4$DmC%1'g.Y:e]26/cc#mncm*RT`%X^IY/ue7@IC.fp1o0<6<V6cr7`[dnD"**0,96O(OGslc'1.qK2G48p,[(_UXbO%?!aFL0.q\5l!7QnhJm3[<b5!gkNiX`OV'j-375Lm[s3iBEWfBpG0lunRm!6'#V)X6QQ@EGI4m%g@3#'3hS37QV;(tIX))h6a(sIn%s"?q<#b?1!TZp&6Z6I31Ja=Ycq4;$C,d#Z,\*P=1I'7/C=Kh2i]GO#hFR\hlT2c>0s0@VBLM7TjD>s*7H?fn$YM[0Gft#CW)7r3e%-4bdCPM+2U/f.&(o^ua-"`kft]8K7l9o_^:+o%,mftd20VZ@JTWs@_'Y$^7u\tdW6GHYHCaeaGb9qIj9LC!hFcY5g\.NEc9Z`S78%cF"mK185tur.@.u]S&4KX'f4b/tD0V7A2.n/3>9]n\\s%-0K+T7(#Z,fgO2n$]7!fFAqsk?r!SW!Zs:WZC*1kQ]5GreVK4OnT/F0%7"^oGp[tCO5VguX/)jLcoDk&O+j'X'^bTLAA<:&40_4E8=C%or5XrXI3V$&A8NP&S-mk,K:3f68W"H$^'8EAi"Y1;c#t?h./3hrZ%]%XQ>rk'q-!:6NKEksT_,dV@hm[tPUN\!-$2L@6cc;9:?f1KVB)J/B!BLJRp1!>eDH"b1'-B>6gPXcEFbpq;4K4n]%:1<C^i'PRb%P+<>4jB(9$WgEgQ=EbE;8NK))6W-;-B0uSZaT6`22%VU-5mN0c!<3/Y)1BEh9:=9<bnTi2KH]g1-7u$1-"O7[&Ld4#'Ij3kLkP7?%+*JnZ8E%+Si._5uN>uh?lXs)%,,.nKH[YUJ>^+,lJ<VWRHtaDEZ!s%36B7qn3FAjj+7P1N+r%s+CnQ[BobI9G6\3=b?D_9f!I6R(%I!KBt<]<*h13Ebo)EJp(ljHED_TKU7>h<6jm=CLVPD$K.33aL?F\Vg[_l+noC`q0I,;QPkL(Vo!O*jNj2r;?6:U'#p#d0Z>.(H$[%5uG&,SIk<YK"&U#!^:@0$d,e;`cT%9)jIJtrVA7Y%JHB5PVl@MNu\g^\VOr,cAF[3"P3X=UbJ400gbXhN3^0`pTq*/8:H'$d6t*l%:Ma<^>uI5)E"K[nW-Z3O\?Fe_7hVP(OnqA"8R0KAb(I4c$*hVq@B`NLX>bn'gl-++!uZ"BP-](fQV#D9`0]SE`\[&Nf9^^nedFu"%U[9!LYYeWkGK6A;JEo')PPW/uWY-!nr#@e,7o]o]0ZD6V23aL?maOWG*[;5pOeo8X-uY1'dp)j,BIO(d&$0RUUtnm>`Luu"W\nUL%cWO[rg3!`cJ4bb-aGD;fDh%mL"<L+YmImeS)4=ktXR$t"b,K*;Ar&kl_GJU?kX%UMY:9Mm_&7)UW.90aV^"ip"<]N/%\i:1TCj+6%:PHOE6VgJ2Xk3#!PnIKH1?e?Pn1sU.3"]R1,Z@o8V^^ANaJ\6%.\8P+[=/D_Z0i2/_07SjdkGOCW*9$B$oTf=p12W]Bq*Z*Dt,St%STI=1A*+<Cp$j#\Z8GS-7')$/pHQ"sVN+bn'-K!Y+XB;`cIBcoVMJiB\"TCFm#5h;-P\\e;ZR=L&(JmJ2H)&W4Q*/)(],1p)A+a-%"0VnNaeMlA).j5jOA[[GENl9<'*u_?J?Xka^*f+^%ta*g<GljJ_C.duqH%fd(Kk'?mMNT@POXm2Y'bIY\i##B%$smOXaa,*D`;cL%7Rt(rlks,AY3#b^Wg._W_>7+kO/^jsd^8C&]<`Z,b.K,icR?$YHg$pan>pYkDeh8mb"#EM1!Aa-:GD5ncErl%"lq]AFkZUsGi!=N%Lc(QZH@gd"oq@*p>-;DsHB#5L3oh?0+\W/tbM8X??Z5:V_%N(0M'AL'E't(^.@>'D_/S9nKGT`RUe%9:>B@c:G@3I*1MZ>c&Bpi,%I1LUrC<.$_rA3dk7]*ej8C]L@+r929>'@t`>UjcuAOkH]'e``aduh.ji[B!-`gp3m#D=[XK:<3.Qc7spR>t49P,ZQJP7`PN?Nr%U%r['ZqQBSZ9`aW<`@NQ-07EhU+lOIN2Z&&l.Li$lC99/3Zm?,[BJ!55WA!tIiV5_t_d3^@%=?19=!h#3=-lA9gS`b-4Jua"&kj1D5%4SV=6O^O`l5>)aZSb7l"ZgZb0nNo3mg:+j<bJQsi"Jqd8(pgrt%GF6E0g"0(Q/MFjq,HO":e/LiN*2mq]tR@J78V)3^2?aL=5.2)%M1ai=@e"94#@XgV(p#gAjb_Mn`'\YP$'De@WpA9?fV@LOVZ@YD0r/6Ke8ISS%TkWKnULfV>;;0^S<:X\%MtT>1Q^CMPOO5\*ak_@%/-I_qYQ%^R-]EW:!VO,R3.Z4>T'6P)MuojN\NGn?IF]@O35>i,4NM"=[hu\9O9I7%$sS%mhZuf=D>*`J+)%cScf_Lb`;fd_jAj'S%H&g.&U5Lh%W3bo3b?s0emj"VN%*73!ZaRjs>1S!GN?F8q*<?Y'jqTq7Cu:f*^)O>=#<%>lO$;%P04g<WfD&"[k3]L/0sF5M\^)2q%H`%8)HY;%EGH1(:IHlp?rFe>!.A2*-m;=e'-KqkX+9XaFo[IdbU,4`"3'smc&V\_lF0O[A<ANZm4s2W4Ym`ehJ8Pdc.$$LOUfAJq%%`o^+-g6*Ifjn6?ME.3_(.&L-UQS?)73%J%>2DM22Eto72kVhAgi6;uYks88*$>A'+NO@0eDSCS1_c.o2pP5g$2Sg8/&=27)'3:_%LPWfsSnVt]#,aG`K0QfgpS^7!@;k#pJ/kJ6^b!2RbY]"i$hjt1TAL-U4"=Obcsd4$<1.-)DV@K=N)HC!%X3M73kp.SBu"Mto(EVA%*&00#+t!UL@%)c.`oG/fUb,YTZWY1ER\`eA4,<8+Q#p47Kn$d-MP,!"$"pN7:kGs(a$@KPC%:jHL.Y&PaIk*n[6p<naQQ%["bV:a%F(+6[WKsoX-9\Z`.S&H2l9(Dje"$q++8b4HdsY1f\fc^B]%&>JMgh8r;??#FD+)I$XW#]Z04Hl8>oSPV[6=W0b.S)Jj7^20.3?I#%@Vl89h@IsmD51F1&V^F!%5&b=_lepMiuX3)LY6cS71ZYaC)L*$poL#?n58T2nO&RN8/am!h(13nnYge/fgZ5E&idqQn`&_&HBr]1%5I%?_+?mrSiadGo8$6Mk>?<fL#k]q/d8kcYDSrtnq'/(i5k7P/2<=i&^1Shph0:"I:4Q?P]&jAdJj1e&?5Z"WHpYt47d`2uNdt5Q%F<LHX<g1LBi755'/.a$;iGej.=Xl;E<k=k3^!DM=D%R>&*0!l"K#'4gm&m%AQ"BG/ofH*L>.-nO,g'`<ED+_e!HVZ+^&&PKR.tp1%PG%<aaj4:,D:.8/:k4V_:nqN:\VK2,B.qg^]c<c^*iW(j8$jgJ%E0Qr^d=OT>C&1OKQW8mj2OV5n`tn!UH*pLJn(K^iSIM)e:1S9%;&CkE6&jp)4F\Ms)L9R`-=ZSpWX?NqNYI60Q0Ski7#U&Z7Q@,jYK/Vpr/QuUT_#/qe;U&<G/"+5J4BPSfZ',>[,9oZ>1lRH=OTgY%h]LB@39.JDZ4Z('_%T,"I]Xk31O$Yq&f0S[Y#FhfJGT*_KJ5bq+Dj-P-IfcE0/-P?9Bd/<o^4X6,FWaMQd'$4#<<.q[Qq0BAu(?[%G,in.gE_DNNcAH^khrT*B=d,*^G^Cop7^VSdE>iBP!;u8=c:d7PGtWqSVf'M&pb]\-HiAn2/F^[p+(_O7*"V:/4!5khPEh*)R\_b%@Q@gLmXeVCVcu[]@(H.4_A"iubH"bQ'YN\pi[f``2!E<CQ4Qe^i>dVtBsS(C(tU$UBU&!_IR3jSP;[6U_F6ETgoo;SF,YWsXDC+l%4>.0paci]YK"J&Yc*^pBUS?Y8nSI6WFl2e:h$p(A2;Z**4sd8BIhee)2U5Xf6MF2!AeTb+-`uerD8f\l^SVg%H5j'PKi9G.f>h@"%]TiJeO,>X5Y+Eb]9oM9.a\%8OOU*A;oPH&):g7qY*TSbE7st!Ll_*A#D2"X;+nVj;pZFjq]AA=V4g;W!/)-<5CjNEi9bA&k<Mu8_%-X^l:*lmkM5>jn8g>f\tGY$DbkM[=)hplJH)(S'eWnGN1`"C=rT/6f^b6NNiR8.QWJ715UnBTaAcICj(l1AP?0@9E8D:rO@g!hP^%_qa:.&CN%ch];[9HAfrKSZ>duE=oV;8mPP8Xh4.Ja*$!acI.]6YOII@NI[MCg>d?B5H]07*4Ds\H<pKWkE,m%EfZ\hBm'*^R1\!g%mpV87S'#M"G;<lupQ*/l;-P"uP,0ng2n74_d>6J'i*Q;/;Bh+!mJWV^/9cuV3tCACID!!D'#K'?cR6]WB_9]BXkZ^se(Mn%1TQbG%@3HY2H5G@jcE]Q/gs&(%o@NHh^QP7cG-3)E?F!3W=PQPV_.no>K[u6UZE\]WU-m_ToJOA'/Tjt,h3b/]TlfsX"+odLY_&j+JtOP^%[9#.F=O^_#KNC)'rIeVY$K5US?hO$FqgY(NKJM&O0jr6EX57!q3`,21b_eck=UF-dD,H*>(@MVGER_X5"jnITaPC!Mf$2F>1FnKu%AgIjIYAeFRm7fg[]Y2blo2%2P"%*`d&u>E"h>IJ[5g?<5B-KEY_],&.o$kAbf[818o5#Ng@F,ZFjVr+H4tsB*/L8h.56,9IX*Bga%,9UIPker(>Y4GP4m'C+Q@i>TH^TSP1IMfO^4qD<Qp4i[H'3jEV7*f#A:-`5m;rp%.[TLG+Y;=eC&20U*7ja1!es8bH;tV*ZFusu[%#Gd8FS`d;l.mgL/R.op&rT<^rAfN\0nGiUk6TredB'hUB\*)G><uS^H_?XhHmAd>)N*B@lZn)CV&3a,^[r#FYqZPt:8;rrfp:/K=%%L<=!AF93,P^uMn;d:lAAA8[4bVJj-U9r5=6u:QH(=CK`CjIE*f4q)rBe04A]lM5bJH[pE`>mGT+nhj5"#t<;Z)4<9`'V6A]d>k#%RrGP=ndOd`,s-h_Lm[tG`do(HB0a],,Gb$bl)+=5,oFWJUJO<`G.33VU-gZRQF$FJSPbc!ZG#+!5mnr&>PuSJHp<D_(pc*M^"G]g%HUcBEK<.$!2/<^J>-p9$GS7Hd%c`ut\D^Y;_"[Lj6&231n.3hj##OO=ePW2$#`Pei[KHDfSAfZ5]-8o(L&8FmEO@\VZ>`'P?*q'-%cV4TeL-YBIA6O#p-;L*?fMBm3"CMq+Oj-0LUIWQ?ImV+c#SaO6JNjL:-!T1^)DVAWl=#u6EuUi[Wa3b7M>]#q_S]$920mErP$h+V%_XK[b1NeE`n1XKd_1u]I,iR3`>D8.2XV5&I?g^facW=[:L:H;B<iGnG?^;6sd][^H3#\Z2)XX;Xggq<W>D4LTgs";K)0AGAlg2"d%'*P5HQ8PJ3T/C=&Z^FWl7C<F->p1<?Bo*T9Mbl;*Bj(`aKODg*&iHs]ATKGQ<"GcGS_<["<_QMbMob,Ej8KV9TAO0;7<s<A\EE0:%/K@a]s,A.'U6'Eg5fh[anL4lo.!)d72-7si.G+'jJnK%Q76F:;1p<]gj0"u>)MW8_XuJdfiH*aI2UF7;41XY?@Nb2l*j_hb:<Ls?%iQNla^;^dc`n1K.a=be3_5/RSV*dd@/*=N-fG%uO<s64`-:4XBbX*.tV8.0,F0j\W<0<<21popNe0I4:rJcU5OHgboG'Nc^X^O_`%38W?Dca7F9Zb(R[T.`,U`(N0b:Yruelag5eAFbUS0:&@M61nEWcPo9b,-^/J%+TSCLf[>]902,&'gt'=RhbFl0jq9[74^FG]=ie,%o=f/%Alo.C3"J5W'ALI?L+PFJmgHcNJ'f(2#m!H!Eb5bOhPIn4(D$)hMWH]*Z.30tVZK7]i:'2*<bgKB0+[6WJg<='Tf7,5/(!"%%^Nl.X^^>,1Ze>K?9CbE`FC/*YMkg40lNJK`OkN%Yfg'aA'Hs4$?+IZ;PE=NrB=Y#LCIVtAq\t)pLom,j,N&i'!W7#X;5M?t#=L28%$?9"K&Qm((q-9%A4.9,0.\ZC&5nB(`'VfB_Ka/$5q1<hM0''?CPNW$R++]Z^4bp^Ud=[h'%[k(cRFH0V<n!)TQ\W>:NPFl_.7<bf%@2U5rO#4Rj\\TqTMN%;>KWZY1m7-<@nHdiTTFOI\rTop2r?:1?!r!R8md@TBB"^:o;J?#bHG4PYe7`@s`Gq*!:Uh5;/CjQ51Uj1"%!F](gZ$Th#6K^c^BG5uebnaq$/^"_sGg.j=iFdXWAi,CF\]/QA0&YX\EZMH6_Hquq<:Xf\5=0GYokcK,8U?`X6111`-uS/hK)+_V%O=:@SgSFe,`\^-tL"I9'<OC\a,YJ;F<TWZXj_Z`d4Xa1lXYn*sOJd&T93*gVg/Yrg%E[qHP#Z)!;?!=:%=;eTBNoQca_2!d%4>t'%/guT):`=Bto-+[Q$4GmeCK>.lmXTECq:3qB$&<f?o(aeFE#:5gN0cEY4J.b\I7R'QKe[lRJR^*a<2Kquq$e8+3WB`3kU?)[^haD@%)tR2jq]"%OjdATbh9&I2NBnO?(UAK'a"2ro0<rda6S%TKqe<nW/kgu@oek%L']-HEj6M*k.R!.eVaFGgAhgqcK[.2!d,oub*TK#p%pBSPDZTMdJf/S$'lr$cRi&-q2@op"H0h^s0Y(s-Ld=e6(51(I5IisXfCFL8bqlGYYW0g9ErK?K8M0k5hVJ=kI5UfcFr^!uldgh2.%iN$pP?8TYi\U&%m;8f]h'[ssP/EItD9oT[HL'<5R+]?'F+sZ@;m=7ODak@O&M3S?%kbA7]G\c<C-+gRiq8$/dW9?tC8s4e7CkhK3%$S7_pV'%TN@X'p_)doAe&F?$+m+FH>d63=1<$_P$7WaZ4Z4920"<<5a<lNMI32B;,+uC'Ba=51jf[?i68Yp>])0m.WV_EpF^ZE'9%j1n>]Y8CObe^?MjfKRAHa7=+^^P5a1&SU]HF'D`#pnOK]CThA<CY!&4Ze.hN'OEVJ2BUl(->i"<2"[oB-,1fD:K$Ohfsla'=kW=D%Xn(B;OZ?cj25N2#b:dFJpkjgsW"P6u,0;.>&]l%X^WEX^ha'.D^e`s7F[>g^K%FDBO;i"4hT-cY%6!nrQoc4&AEKdc(t+U1iJ8bc%D-)r6a<>_.XIV@JhHm(2#b^d8+(2%PaR=bA]^@5K1b\&0C_8LV%<n"oq&I72H[8ZS4po<0_r_tp"Dme^\jnsd['Kt9_%8k//l`lM%'Q9%VKBIWBpTN/MZGJS=>;M68%M:bj)F9jV#HG>LKPTD`P9"9QEKZX-CRfTS^7Pd+BUC\sN`YF`1fLQjNmc!:dI3MFTJXDd%#D0)%7NKdC]?"-B#7?pV"nC]9!V,gadqN:W&3Q%SZ+-ql@X0HXGmRLje"]Lceb`[pBZ0]FC(*K(W40=)f(]TtQgPs(f((kA;$46(r:\%g%I-WJ(b@7AfXlVK^%]k;RF7"A*Hhu\M&>=LmP%PYeEP>QDOa@jd4IXUU^Z3TT\T^E!%/0LV^P]u*QH*cG[>'n(D?gNP)F9i)Gc3l!%)Q!t(]J@2q0-5h\+2YO]6C72Hi83>QJ34qH1fh./+08\&",8+"[`&F0;E>'I?#g1]$hH]nJ3Uf>eR-(Ds8Kj:fte[t9ZY$HqhHM?%%F@H77FCqUm_K\f@S?b!\Id'SnIG[nXVOhu*s3,J9I]o<q#e()@JW#.]K7JP`Om5A;[3:'+cDC6PTFTKkrsP4J(bu_o_J<GG]Ru;%fQ?JM2_Vgj^(AJNGpM(4?f8TmL%OL9eX5LCf.,Go:$:'[_d_a9;2n<C^A8#YX'`qSrS6Ksme9fZr-V-b1e1:K_OWAE2uH'n+/i(6%*!hKDm%FX*N;SPp6HR'i6fn@1B`WsgOq8.S9$1IV8>O)4%g&m8eNX%KqWA[bh:2;ODYsZ+SW!$mW.MO04WW>I"\[!hcd.sSq@.Ik%B394R6)=o!)nbW1OripM\c:.";Hq$C7\^N@>CGge:q/dai2`i.M@&qcpW2"2(b2_Q"Un=Y-Msa(d=CIrO:h$#lsbE]j%RWPS;T)T%l1PJ)-Z`V69=%':`#2P;s(&^\o'=4`0T4s%a<'\*SC\l@Ai%7"F/62o6(pg0V1aUfJ"IMbLgj0HYoDh!R_`bPMtOu/jB4P-U"+bb%K$"um2#.`Gk'Ra\_FfRo)!^8h7dWroQUY`&r(gq2p3N&6cBbPJ"QgH)P<8acRO8(Z^GBt`AnNr9]FjMj.HUVk"=DG8k_l9LaK7Z<%3k2OKJ2<&r!8a>Xo31Z(XT<dR00l;!H;2:5`[-ldRtW/J;I=SMpE^8h#o`j=3%1kgJ<Fq+@`nn.a.n=,`93ZdXoVQVp+_2""q@c*%K?Aa.gWM?_:<O%q#pT,CKH":VXKDj!%1q8a6/>gQ6cX1K?MDKgb]u=?QjOq-c'0)WF>tiIjcTS&U3*!VN$1ApiV$gkbN!44E!]]$%6G\W;AX#aGQVemElFnSgFR17'[kdinZ!ZFa!G:DOjPX_p@:9KaM@WHq;m^sHYtr/)U=e<N^Oe%tZE'sTo8hr&lW4Ll,!CZ`.7K2L%O>hY>R2V7PYl^;"S]&R#2dD]i>EG8,puMlaeZF_L>Q1V^:ZS43fA#bIL"FNbB?!Fs%[LLsV"$%na%OI^L``=J*:[DR7HjO!,%u]H%K09*D[ZQaF]4We7;`J)Q,sGa40t[a)QM/RqaRIS-Ekn8]d]os3R`&:u2GpgR1(*'!>/^Vo@YE%=7aV'i`<]G;R169+I1)Z2^T*k[%@9c^eI"9RnB9i!F(?#^4!^IQm4u;d^6gZiIZ<M#3Gu(dA&@0k^oIq:h5bo/**)bTWB$7atEHEV^BQb!Ik.j[;KMci`?bm.#rPhYb%Urr<f/ko&!\8fU;J8Q:JFXtI?p7I:m9??9dgtXphclmr#EK.dIB%t*u`;X#E:d%Vf3Bah/YkCrX2m@Xgq[HA2^Y\#JbTJdB<N80f%F*QrZ%L[]O4H93r%2GbfKWbeBC=sV9>h,V,IIr,=D7r4%,<ulAB;OThq^ug%4<E/1.<h;eI,4`%87+(;,Ku]6*U^Fk,eFq<0=iL;%e@tl2BF!->:_%/^o:4Gp7*(oO0<hYm+!A!_#Vu](`OWb.n9pN_c</.3A@-W%*s#m]^id5AGD0eNNt\4N&UD2D=0(btq5[Y0&VT))%J^KXQYN/?Dr%F$<'[3A(6Pq1:\LhhMi[H%7(Q&,&/76/EluUNR<HS`1^G!qCkR/CeS*];7RlO4bFHH6%Z^kpsD+DoI7UsrYhO^8H%3kLiUB.&mqDN1\t&6^BpII;B,Hdt2q-IFn[8&bpW)^0ap/=I]aH+@)!JWFt8d8%IZP=R6b)kQeJmcM016(*)8Anc><U1!lWnf:UE%mpK^g6%5s3)OI6MKO8:dVto_2d6#"N?\m2oV"njC^Z>,:<Uk.:!.@6p4*g7KEE:$uTk<PlDF*d?VUCs<,S3NuN6HD.l>PnIp0J<n%<6kNV+j39&+O,^0G3RB=N8lH,f@-r(.4t>fX)MP2ERR+m?VDM4LaSJJJk(-]%Ejlr+(IZ5<UhA=nXO$R1.J4"mdWOaOmfWP.#]Am%DV&Kp^KB;W^kdLG?7mV=70oVpX8i^imSRttlN=cWUO9t&qg)]%.>Z>9KeK)h+Xr!M49%?P00t@Y(l.r*)Srp&W.7H[h3em^D[f9U%`jcG=JRKeJk1u768#0bpBXstq,k#>C/t<`qfC4@D0d8q_a6EKLGt==#Ac72\CPdQ]g&^o66bIMEhW/J-JX2Hn04YUa^=7E<85r@K%9I$JNXh!W4:!McT]nVPn4RciVeXVS9>A"8@dj^(siYCPU**1_o86NmPe]uD^]>$Z*]W"6*%caFrp[Jp`LE8?A(!Wu-0=*J)\.$s.%mgRs=.B)_T12j-M'qBdQKRJKCn]I#FmLbcnYs1Z\(U?J(T'l>4>LUjkre7p=Y$_(B_X1^f0\/FArG^9Mq]s!)j/--7-<u_2*DO[o%ZmJ^/B^>YJ9q@_7Z;Ad]^Ts*[e.nCb-1m:HfiJtSNRD"i,34J.hiM);6+W_'_dQ\3s/=K!(7171YGDt(Z,9l-U+!HDMaolmD1Uk"%K:ZqZm49FB^E]SKBhK@%N),-Jd`_%1M09)VfY6HZ*k\-d(tB&uV^Q=C:g1q`kAK#ZM<Bs`Y<CY]kO0/Rk53<-(46c9rHmg\rU`+i%@rC_/F?Q"l-s=Rd<OKY+550LlXt<$n*I?Hh/*be'oG!^?d(e!.]<5fK6Ofbsm:@r$[em2;KCcCWQf]?_UU`nAXdS?iCV=S[AGXBj%2KJKYNW\T=ld93n=0Pi=;/dpoCu0LY+B2Q\J*fHsenARLB^+&l4^&a8O-X*#6q`$pe6ftCO8b.:$O0;L2L`%%a'_`1FuParI?c"!%<%2EmoZ6La\I@u0(XqhMkeNAt%H9n!TXDO?VoLZLFJH%3ergHi<CA3JDI)V5p3_Zr6sDrkJ.MIg*nk*^I,%2W2)+K',mC=4'!dW%%K'b;2`UDG6Kbc1Kou305MFu)Mp-nK36TeXu'^TY-HJkj>/V,b?CYc0T;5pc7j+=jp<uuejnK9*/7Y3bH[S//SfM`(r)a+sfW;a_B%L6K[SM"#^uC.F,1(hLgGNL`X1Mo\$t%sChQcf[H7Da\u:780T\3*_7+3ZTr]HN(uK'$pI2;*IiiUOu3min_p@I0MR7moFF]?B(e9%ZnAGQS_#sNCK[(k*<cM6g12Ko\pOei[<AsJ^DI<R+iM2O`?^d_/M7T^@Rgm0c7E^0X]T-:pptoT/;Rh6EWcPKCqLEO-,U22(mkhs%f/\dB#&;)PGFg894D6=>GY#&jc7>MaTN.P[geW*U`p9<Q)XNY3eI,>'i!#fdcXmY!dD!?9'"?``\uh_:aC\<a];)^k6*gVR7m?:=%Tj#u+8tVK1^u9oUa%o'-7GPn^O/EVuj_"7Dc$<bbE'WcD5CW`HC&#<tlF/5!4mTt3iXr[O>6X7_`-%BLF)$.g=[,+]>FrVXQS]t(%*UFd<(GT@FNNP>a0&7FA>\+F`f4O#4\QU\8QGp[G8:`XY8Vos'FnRtZrnVI_^nY-;VaH?I'$.%XOc59UT+Va"`5\@fbFK-.]Y0"`%$,9tZ0=io$)F?Q(q?XW1VM"N7*\;LL'^?SeG0ij8k$7ht_0W8_P-Cd:V[W15,N>mC0hoN8GO=MS"4:i_(<V/"<F1drYRm'7F0aHV%V7]a4fR%\[N%FT_Oakh[%+rPZRt^qZ7qV"U20FGUll6>s`PI.LEA;[i*T["]qDL9HE7_ogfe)>pSX2@^3cL83]O/CaOi7EJ?$2oU%riZRP)nJF-h>*jd<$*bP>sqGsLkE6jl[6M.Hc$N@rUtK,Km#qV`H]%.B?:?*gKE0QPV<#WVe==(3"^TMmYS5Yi`3=F8G>jq\aL=h%blZCWf&M-eQ/llTM.[Y]c6q2p.n5L3LRf^NpOc7r^AIMe&]LCmITM+Y5^9CI56gSVEoaC9K3U@aO$iX,=,[Hm^/9cXE,="ukjCp5%n>M*6B1(:S953p4!6s6qT`]Qa4lS\H`@=[?W>>dIq,E-3Ps=a[o`&?BVH^6782fDR4GYg4g]uf?np4aE6)-ipJ0)u*KeNja\N&6)%_s]goA=GRm'OA:@P>?naX^c\"IZ+Om%Id';<7Zus3U:ouG7oqT$?t%)b^16uOHtqn336rfE8-]PNXS&m,d$f\O+bib"850"O8^WB%>in13GA$<,)pS'b/RLf;-O%[+*=GA[Hk:S)Jq=;uU[/^c<HF%fg%4'mEK8GrUj,Kb[HpE\SC5Z+bpEA6gm??ZK@h![ht#O;oeEJL%C!HQ*7!)GcCVE:fCTL6EX8cVS\0V/QVeYN>b`!r[q$5>MZjG>M2:cr?Oe`bTRS!A5TO?*+?rB(>,Aq"qLhqfoL1&H:\oQ\h?NH)<%^]uq]Q]Bk>bUL-&=8jNj6+b/ocR#%RO:/Ygalb$R:&!_t3<t$%eAD$;-3oes=u\7qjt<iJ<Y0A^<t91;r.MeO9:uOS/]XRn4M_m'%A2<9ML4h4')<`s?P0j7Io-JpE+*i([A+IhVZdPL]n%E$l7h11j*t"-o*6UMI'#J#WZY8%e/ui&W1rjAmT4a87o8[!Di,GH9nCl0s%!eG16A5d:d3F?jK('<\Y<dub=(Cq\Df8u*\lU]7mr?bRZI`;<b"$,#$L3hq,U[2ORG[9hq:gMPnOZp[h/m\72-,0:"HN;==UZeE#%NJ3[]4D=OG;S++VnPAYj"hB7T>pVh1aNCnrW=o:G3YsQ>K3m@?q493Z/oXS'$e^X[!DX9!AZZ`e%0NF=3j7p@pc.V,kF<V*_'Oo+%6+3V5jTRO:oF`u4fLR?%cl^6UW<k_f78$\O_Ah*E8[\<5CIQEs+:W,"eL@5I/lm(9,n,t3kGYR=o\?(\6;E"cnS&Yo2CrVJl%4R'%*Si&K,%1!'6M<:i\g?Mi3C%16>)D78.L#E$AtVlU&M@mkAII!u$O[GZ^S1mO-W]fKA@W@n":JfP%/<>q+:,AI]j_/9<11dQV$`q`%9N\timm'sO>f_*^!IXKK8g^i_mg4O]/lA2s[\IX4Ud<(1)dp\u86q^Mp@6?n=I:VpO#;TXR@nQG^1LWcG77aYm@L!`nC67rH$8YO%#E5%E$$R2s3.t5D_;-%d4(4ZNq!g-\*e[C*'Hu:.XY[uL=moX^D3"KdB\9h@a>0S<]AkObi4N!AptdiN=-tO^I4R8$*r7aE$git"%Nmnb97?FTIGDY2`qhET1r[hPG<6J5#fC%3W,-6TAUALrNJ?Q!]*.dWI%"/!XWCDCpD5pT%k%,.V*$sAqN9j,tfBs'IBU;"s*#4PZ%gTqj`)u(dom)!Jl)(7h_j((-OOB+Fe8bLk^V*Ms^4%&5)e)aW0Vh7=XVT.67BE?@:#(rUng^oHC,=C('-7Zur8IB=$3\(mSU=G6p%9&*9'Lha*M+D1S$,0(BATT[Fu/'>WX0,.'o1Hr:cM$77Ua,.rX-+D6Gq1fYgU`Xt2rL]](lLW3>_e8qOs7ti-rn7>L?iTjbs53kR%kJ.#J+%4=&)pZ7&!p[qCJ!dDrX<!(BWN_@degQp2%&'AO%;;W@@3=K:,Ge)>=/LX_[*F>\"RC14bqTcA(5'r!4=I_B1<j/X=7Ltu%$BAcSr4/9D[)Nc(/*5g%#_KffmO^#>7`iTmDR<G/hsL$Yqm%8R'`3Su3?=K@NZKUaT'&SM%3b[2NFX.2qcSn]'UrM/_TgJPR8iuf%I&dNYNkldY6ZP5_,:_.'5p&^5r8GsX1ECI-r6\Aq6jA,8mr9#<S</D'Yps.&,n]X1\.V$OU(@t,O$S:G)egYLHo4#Dgh;UW"p9T:%gCU'_pA(>JUrcYXb;L6"<DfO!MK<Jdf8]`B&0&IaEHa;*RF\h+kJVguR;A1!,uc=0Q1L)fkjO.8o+_usO7+KAE#Td0c=BY&QPVqt%=%rlQp+^-'UTmXi,130C<=9N3R6?G:JcqA^Q.9P6fKu5VUU>6\3=M([n[p%qrg?bf^s6Z595pmsB>U6.C]T>e\mj+Ws8516iunHP%b92+pViKrC)Q/3E-_7kOb,!;ZMGR2I!bmtHeq6_LhPdM("%<JW8PSmKeUq&_VlI5Z$mdcHj"Q#mgPjlJ^0k-+RF]lgKPdkHGq%^`%2:X,g'/aFO,-jt$ppo4<0\/E2;j@m=;2DGa<[a>TVoOHsG$WXsY0"s74CEZ7-?4hhVhP[lAS]Q?U^Qb)g%dBS.q@?+nf0_^lqV%o%gD.!I.K/"-DrD:YX@I-X$R5`\/!3+l+='P,Fb=N]Y`fY-`SJL1]V\:YO:]/"[_7rB3[Y;gpmCc%nF77,9S;W,6um6a03&bHZ6bep%5RjUk*h[2l6&4uh7WNk-GH#DOoALa*:i38:59RS4E!;fL5sP7:4k<DEF\ONlX!7G>9K5N_,KR`"eeu7+VZ4P2X>aRgH>jSW?FfPV%/*^N.Ou,N+fo)Do'Ci,-<1Rao>UsmK!K1kc$@R$$?W/H^m@F$+PLB!*ba/emo^p)QbM%mTfH"4$La>*t&3Bm-qP!bEApZRVTYeDj%aZ68M4UPHS'<qBBoA&_q(kCS,?M2sQg-\VbQ*%HGF%%$]:A)?\$,n3NQCaHD9FBFbLbL,QPE^>3%`-XY4'=LKC,^g,U8+1'M!9'`%LK"!jA4N[L)\NOcE)DNkEn02hY43AOj&$(?*7bD;oCt.(q`^tcrK!ff0QD5Vnu)/C`&jn\*L\IKDnYjDf2[uZE5Ue6[b4?;`>[.P%6<$13>S(i.2V\$Bl-4HF[50CRT%:+inS>[W]1dV\d!m"#-5Rdq>1aW&NSq84:69EB;3PMg<D*.n9^3hMbQ_'D/?j8:jp^ZC>\?P:%8d276h6L)dO>6Q)8c:knoP^(SaWrF+K9FCuP9L-dAOGoq_<8JTI,k*HT'@[&fZ<eIdWg:Wb6."`(*Mokq(?K3#6pKnNl2ceZ_U:m%fJpnaVJ1"5+GgG0$1n+/Djg@A=H\ASHV6#9Y!XF#cI8$A_.V/`53t8FEmfga^*N>1f(:ASI@E$.7glbaNpa`2'VF_YObOYBl3#]:%^01E#YQ33=EMP*$QG6SNlJg2c7;Z/VP/h*EVh-03V[]VPor4_hI(!Yk8i%gYlCEAl"hgsE2X-#=?c[**c2rWdHp5er-Zl%"<P+tS%PleoaRU'Z4\kH!%;.ODn.,s0?lhcM$Fo#)VJImi:3]uoiChq!'Lc+mN(&;2jWcDT5#-#O%n&-hD`a_@*%-."'\1ZIt4eq-N5q+-V%-NfNt3qSPS'cD,`8bVLEdYHs<^%^<=71a:\F+8+%48/(j"F?BjO"q05B?p4M9%p-cDlt3J0X?5i<qUN\'$7-p#%Ha*ol!HS51S"!%LjD0mJl2)1m@3F%/ctp`DO%,%Mc_Mi''?Xb(T>o;+g^=8=g>.aZRJXG_mpXm8,5WM,!Y>[f=A6cf1]u!)Ik^L=uI;L<&$a/S&[=.%<Du7aC]QH!6YT!,,/Yp-[7=d3FCj*#lE)n'Nl:s1()X,e%P%0m,U^gR4-Ljoe"8CbftcC]+qm6L&\_\>A\mA)G!tQf$'qt7Sa_lq%bdi+[@bD/872Jk&g0L1[L#"VgnMs/Y\5FTGP-b8D.,15VGL8-QILpS>N(\*TbE!aojABA1M%,Zoe.K3BQ[NoFrt7n/'1LLS&BW"B%LmKm&/r"L3@cN0dreB)9,kNDb1+ACV'sh851K6AV"jHlObr,V=&*TSRQt$pa*d4g;F_7_ed=cW.$/(3^J^boTC267no9Kikgn9G?%":1RVgup`bE2Vm_d-C-1g\`jL=+CkALB^am+[Y'Qn=FuA=Nb)HVchg*[ro*RD&/])>eboKGeSMJajip.N!CJ;IoXsDTZ(Mfi=K9[%CXhtOMOb;Wm3[tP/-CKPVOk8,@hsrG=VQ+k0(rqZ.'3pI>-Qa-g`>keAG'W%?:=>k9r?`nR+;eW4N0-]^I+OMF"YqGQ.gq'_"/K@%*Oqa3d+LHp:]U"*k14Bs5pP>oC;Ne:)BPAAOR-+GPHjqH6TV4?*?rQ#Z!he]R1Z^oTpDHKM(.bnKQd#-@Mt$h(SeX`6Zq']8[h*f%\'D]f>ZYE4&be9o>**4Q:0AVP40niE7hmpW7f"9nFgcj"='JFUfb`I'M0+1?_*!O"%^2SkqoigNC$'3ZPgR>$bRi;<(UjdM0A7Z^%479K*I$pu%M,-'@FCM-?$;EVOs)<Qf1)&-^cXIoE@=lssldH=jp2.:(h9b"@ZTX/Z2R]j!3l+!VE?Ug39GqXZ%bAXEX-mK^!Nj;!%o,#hsR-6S>AZ.&o=2Ym+,S&16PnhjOD)f&O;rY+9gc`V75`I%'*)nJb!S7OU__Hml3RUgM%o0A2F+tN3-SSCQ1]o*3"O/`nS1=D%%M%q/6<r9Qj%@MMD&p*8e)+KrYel472L_V&nBjq5bBm#>r("tZ6%LCQrEAsT$OI7u!1e%K'S>\"0Waqm@EnM!.(ra-lesJ]S_OWRl%Bj#YrTGMrBkhKb&+!M\`l17/+8d?b5:i->YakWs81s3U:R>pNiO[$4KIeQ*>=`U_+@)7iB,(QXp\h)%KD=#f.*Rg1""b[g,lO*tl%:]!/mL+.t,9`!`c/?O(RP&#Y->P0"(B6&XHMLuT"L!Ins2O(07bep'pOUqDTb)ABVVFQE'MiFYs1eOqK7hLkZ7XCu(!R:mKfKqmm%iATK][D./!8^)/_N,rZd%<A@*=g<VOXgFh7)kZ'%HEa(jUCG0jnMKr9fLmE*6'L_>FWF_dE&0fn/_XOcgnEAMi2d1#Nj`fsqg7)m%5=SQZ"X$7/Y`SUV#Csj%)[IicYsP/RMkORtc_&[eTFb&oo?\GJ%igZ<#&SCF>V%Ul)o/4l<(1"'8%]@m@ai1\7UVI989sAn,(BiT%JWO@unD$Qu(2[#LQrQpRV%8h,9ICsWjbp@R,A?g:51c+^3EUISpkBpS#6Y_PIPeW-)AZ8p+tM5GYW-XN1N55gG8]c8OoP7AVZ-MQ%\n4We%bMru/0:[<M()'>$m+)'@Tl'6Sf8WoA2:!DEc<$hW`99ZkY2jl\(\VD=4sgilsX^=TQJ1OXR$0uj`<u*%D4ic*UN;h;X,Ib%/E]=A=IofrU[pf!RqU6tQ:h/>kF6mKH!APpgmI.(7ts91>\,/0eodFel3DZOf;@T@<dFN.AkhI#*&O/fd,X&S"L,3-fZD):,W".[%[T=Pl'U_\B9+#eKpbaAOU%XeH$$Ld_HGLqF%?K"`FQ3YH5n.`P>gP%hI0Ak#5@<jMb6r)($E^5Gr_mlZ(5cr8?tII;P]kKRM&ZYE%D&=u4P4_s\O"f'BK8E<m(arpn'Zmo,#=@O1<Mp60E^hM/.MBJSMJ#`6V"MRh1-/@\!0!tP/R;ur3&!guJC"B!KMMh@RK(@7=E=AH%\T>#Q)iJ;E94:,@8[T[-_<2$ngf!a8'f+]'+N9=8[oW0$4&<EGP_fL<Mp_kJ8aX@6A=&-($/9,rXFmqoX1PB4/N^Mtgo\ieMNMdV%.X_X<]ft<9kP*JT?R?:K.tp"\9?/,s6&b0kp"O0'MfT-TU)o-:Q)c(?g"V<7)j_jgO_g0q3Q6i;N6GULppFG(^*@1+1CYk.5i:3c%]tSH78[Rqs>r>I%m$!e6k$8_]F;GBrX(NJ)hF&>\iV/X,Kn1tJ'm$V4WMZ-Mm,tHtI[MY1+5.Bl-dg,VrXr_J&Qia(bRneD&if5^%7g0L`7&GJDp/)$kH&#M=PQ6iOM'Oqqd6PVrLWl3%b,:@J@PqQ@dd:HP"5%N1a<7;sC2Klc^:6,T]Z:ZAVEO%&1]n?J5C,D'\"Wdp%M@#I9LWM[0m?5LVEiLj6=U5oCnU"E^UNba,DoPA#;31Q`M;?XBpM>;-R:4A;e@oCp<`'&$ld;aGUm=HO`E>pOT;B5*]&%W'J8R(s%X9!r<pPW/$NR7Wajh52Ba4CBl(PCVu1UnudM_Y]qH""d;#*Q:of.9m;ZpPZkZ<8TfQm][K=nDOK9t&o(.\27lY!/;NOHng;a0l]%%!obRgJ;UJ/%YgdOoCViimZ^Gm/@:?sok+]>#s9DjM1D[^iPp\;<2Uof='>53l.2.lQ:oYQP?'n(Q]`"X:=VqSAtk4/5d%?5_n9,0%!qRWRIn%F;%L"'*F=.tHEjjCKAa>5jn'`!ke-[2o-8gTt9"sU5n,2i/p<:gX[tZP8+#O1b"!=KABV0].",,+:("MN0$7\nTCumib%iWsZrUdq.H"to3UC<3pj6U#B>foC0Kfs\Fr`Ror>b?ZJ)$&Q\-l-kaTG9YM'RE',Q!fJMX@HOhc/"f_^qMO&=GkQmi9AYS0D7#@Y%P%D_RW&NiF%fiXBP?RT6h^7X[F7(lY;"1D1/0.rEs+i!PB9O,k85T&<4:rS(<)G?h<"Si@p;t96@M=-3R*mP]3u!%loMtkHU[Cmh%memQ$^LI66n>]Gq@$9N*qb)kX8uh&fIKP8n0hrq%4"K@"OA]7?T+*@q*i`%&^?B3.8fgY6N;K=MDk!\@&HE]_X^m#MQa$'mT_YhY%IOQ0p9er7O&BlJ^HDs6R[XDFUfjZ%]-%fB`LMkfZOgO=aT]_6K>5gGRj9QQ6\L5m5%1)oBaLNm''1!X7fBLX,FkYuWbC=g[1/':_%=JMnkFXR`afiu;;jTet[>If9'0Amfab:`,!nG+L6ahX4g:1VM4d1rRuRkOSX+YX\lq*9&f)e&'pVkfj9<KCjdH+C8bq]rs4WU@h>%!A<JSQV1*\T$9-`mY%$jb5Q\ucq>"<WIdN[#,4RIC$E;Iki\:$X/-5)Gj:59kdU&Jh]=V[VR%)L&OecbO%_4HJdS?ce8;oDdgN4b%2I39;[c4&/GC%Y,*R`bWUW\?@RhZ7f0T2BR-qTOW+M0(qWDeEVC+T6B;Zg=A@lKjUI9u*ddUn@We[p2q!eV/Bf9;p0_+a06WPG'B%08e%I!o%G(`sP^P]9:u,h*[S%!d%sk4+udB3uJLk49]=W+Cf=5bQR#E.37(:gODtH=^$s4b87$9N)>ch)\E@Y(fh2JHTfXlYQ7[!%A3EY^>,,\[(<?,qoMoZ717s7O&YN(_#-WdRc1Uj[[=!F+6!RKN>a,!u1r94kO^fBC%TWWq%t'5e,U.X[$t#+[[q3,-jI0_9(S?ZK%RaDPb.VkWX>qKMp?MW1F72MCVE73u]_)K[9`0+eVWlIg2<Y.9>9j>GG[.#oM.pmX3aNl/Vi.QHLNN1BZMHj95B;uiT5A0'Kb:IAq%/H/(f&?'aN&t@;r/17"fGj/O?TmH8=H#>C41AV0l^b"+F8't+!I1M0&Ggt]+!uAR<V/#QRQB4"3IhWDBH3C5t?[VD('l2aa!+Mg!%e']H5P\P!6)(DYciPMTE^>mDXm>FZfh>d:2$(kQO7ancXaWe<2PGa*^#Sg%S`+D)WW/[=(+.`SPb"ZJ(,s!PUV4*XJ;25OoK%,R=%=QLh71F<XMM>SCo!08E:;;IesgZ7LZ)8pSo3X:C\[ch@ZV[AoY@MXbg)&3;$OSLqO+dlA0=Qd&C,fKtK,)U"UX5@<Moc9SW=EsN`%X\024`]l\coCL->]BkV)l6N'hm!sGD:M,hC["$WSDs9rl'MWBa!(X4*EFG\Ad:/\>XVSW_RF+i!O`Huc!+XSln%&[]TLWLi+3$mA%TNPF09KdrknD3Y]BU#gdL33ku6IX)3g6jYY+PWo9HW#rPqboZ88Z1Wr(-]LWN,0t[.[Fab[Qs\iW-tt="Nrl@QnV_\2BLD[iSqO(%mf<X!`"\=cVH]3aDOXVfO96))2e`BJYj2pRfF?eY*(r&,aI.WmU"o]66'7n)"\-OGnKJ$HCCi^$)1jj$BY(@q3D8CiemL<0n'@`o%(o/EXL*"/4d^X=AAuBa7Lkr:O5=K<88d8D]h1@*0jN(Q*7G75<JOI-l8JdXh_WX<EhE*ucs/6q@^PR!Mq+.)R!lL>E-J@Z^Z0ToY%XYVCqED2tG=P6MCr\k'RQbb_k@&K-R%l%2MpN`C)*5W46^fj-$YqKiiW`o!(("@1KBH%j#'.8ghoY+Dmeu+1@/qlBN<d%5:aR.Hb%g<H\-Ap.'CR5&)a18BBt4UO6K9\D1%Wn3>DEI26YdnJ0'9DEWc&U7]Oq2";>Fj/,$V@2(W=(C$9f556i4Sa,fI>03Q:*?FE@rl8R%QmD,YR\^X9(Kd:kH4>GH%h44uR4$`o`H$*H[S[[*!F>VU?5qHNi4J`jPW/6gfq4n+rR>LWd001I4?5G(,Q]Z8):O+pY$sp&4Z-MH%$l7kFLe6(1Ud`Nl,$:^aecDHSNJF;Z_b-6RcQp&Z?_A#7KY\XEousP0PY)*i2/0e?R&c:MhI-6>mQ)P"EYQ'ie0e\ONj['oS-$W.%I69ZX,+L?5Z(g"^,086_HBQ[.KiQgoKH<*&RB491H4g6]Nl5m>53=7IRc%G5>FmnK"rYE(s7;_-Ieca%GGmG$Y8O3Z'm&edrrK"-%6=QnT!IT7LUEggO3ia>sq.*:s6+,e7)jY>+B4I(6dt5ON-uL=p!`&fl3:3[kX&p<QCDB3M?R+_eS!_uC.)8bAr46X$N/-#GfDGJn%@kH\WAUIT9+R_2V(NmB!DC+F6C<(8e%Q1.LSGN*O\MQMQNb?@[4IFh/[l;C[).S6$\Q/CoL]M3lXt=^OX)nGTj0LKg9>)QkQb6pE%o:`&,gFm#X<)R4WGnNS4m90"/),80&)#:G$iP7i5X78g:"GF?*h&>X.]o8m%kE8X@/Q!;a(<51RK$`5/3(^DU%?`T)4Tp4qT-*4e%bK#dXXXg$7Sm3sMr$<\6)qdF>5O?uX>UsI_+B'KKo-[r%]SAaO'b11Y;fXHa'Y;00E-E694fJ:>r7L.L;r;/2I$=A"X/bTW$o,?f%<+=\Fe^M2_k(%B`VCfP.cT5dJ\O+qdUD`1(Xu"PfOi^7KF?I?qSs]!#/1JTP'VAa0n*=$`'0W.K,+Bn%]>@fK[WI5G$]>FLr%213%;tEGcPF`J6DJ/]Opb4?:P*&77reu5OBHo4Uf8sOjI"-aOh]P$qEAn[*ot5-C9,=c)n^J2<]YIaSV&V&.#.d"Z4G8Xe=?<$2Co.*_%D%P)NgWA.?an`e0:gh([a'pfE/XfGOk"P]3c)n1Xr%t?-.'OGPD>nC;mg=A8X4U@Pa#q?&&j[pp9]u;9UQ-%k5Nh/"b?X::oK#'Y%DP2*M$oKce$q;(;<\mgEec4!LQpWkrFTCh[dA2Vb5O8+spM<qL4O)3Pl[#tJhJGtgM<VOJm8Kf=2ck^KM.F[_hM!C31e8[Xe%p.9%C$nQ]5V(TQ&(se0S5%)q0@gf-Cq7c3hq$b!1I&f6RVAM4hknb\0b[NM5+ZZ24(Ur2*2gd?gkP*<OK^5#\170?l0.70B#-#3c%g\b%FB[?tng$U!%uX(3l^-E$/Ff[a2hYi>fj$t%Eq6b^EPn7Q`V6S8q.1k^9?c++_g'AX>[lhAG](0W*2Kl>ER;0D0;B0Q@.Xn^`d2fF%TufJqe=\PRK8.o]k3>_tO<1)K:Zn1gFK9LgrJHW.C1,-eU$Rq.DKDd2'#@CGQDl(t3-7_RR3rOcdYk"/A:D8`kEfnEDO$2=@<D1!%0g@LeT"/^\CSZMFbf>rZiA;kHg#3%*\ZAW;)7$p=VDKmD&*T'eCHGXIg['RW$5)jNHSJ<JEh*aGbhYAf9!j4F4R"20P'`Qp"l?g<%&e2O*"ZZ.4-sMBflJ=j(2YjQ_Mcn6jqM,o:Ut)O`:ZCmFRh!_=I:St\<BO.U4e#fn@`heLf]q-%/8tQ8$71f&aF8$NA>JpT'R"(#%O(Php,AtDN&aPGYB@YEY-%WpfVDi?qb9aKq:Z<LQ,JOr0APsZ",Iai"$u[?2#Y,aB7-\=C7]jZa?Q$buG5Oo>6ld.<;rCg*>+S5;%UnLHA`NfhQos*um+h<tU6!^R,VFJs:L0;?FA[p3Cab\`*k$J1aVXCN2>Fm%?M!M;Cq(L!=j'&ko$H9+_!M.?Z>3UV";7nJ&6@$8C%DsKqcB#VsC)n4ef)iPkK7s(T06ZJEE"$H3*UAqJ6I`Gt#2#\sg=`t1'*diFA8_It<#0`$(XJU02a!RJ\K!G^k?kb&:;f>1TJQb7f%)1#;OMu#br&lP/>rQL8c#t#n`0p-2Zn]FF695m/mXX-h_2YE/Qo7i)NObXe_2OVm$QQZf/%0C0?1>ND!4$EEfK[^TIQEt8j#!ecB%o:I+gq"ZqRd`e.+\dg5aQ*RQrLH]]X]&5<YfH_2&OU>N>8"'VOf<@LK:/@m)9a=?rh)6ijnQ;8r]?<lTO-3K$fl7GHXY6]@Sm%&p%f>(GG=Wd>UAqVYi?kGuZ]Vf9ADIn6c\]bn>cC/1fc?pTQZQuo.,r!Op6,$E8r<s7DA8h@&;'+#ee4Q0sHYE/QFQpg[It!f/Xo'gJ%!M7'>.5.QdUCR%Ia$r*u(1R(k`Nu)H%LAUH/@m!*Mrt1ZHSQlZCs/#oGKt6pl/SbsiMgEL83@IrFhMD?P,,t?5%U^n$\=ji1p4*6%8/D:M40q#*(&Ylh96hEb8(AY2Fib6jSqkWFF5sedPq!$%-IFRHYI94\@oYP2<<'IO.^T">WXlBuNLFCGe#BWb9qG<QJ>]\2.8-V3%+mZ?\<JGm?<KTNCZ!drXB_@tP\L^\%86\f[.@Rn;NMm1YM]lj4^qi`pH:?pfon&OI_llg.SAV_ckp_=]"D8GNJ(=I'hU<)dKhU`^%qOidKLr6&E:<RRH;Jp;20Kb4pBAn!TR$SAtDU;VHlJtH#;Gg6X'9WNRe0@H9O)#Jm<-KX*,ps^MEN=VXZ\%4A*[mLP*Y(RTK!$X>%15RAc4i4DH%Htu?Ih/8%Gb;Ek)746-VW@Hd'C_+J-b"L#AN9OPSsjA9\kZthN"RXbdBZhM8RI^9WFQ%J^e]'j.@uMAkY)P6hu6m'%T3mnnNeshq7a+/MD>'<`qEcqjWCk9o(S5=UdP5:FW$@@M;/J<NcemNDF,@SnX"sY;@q3Z$Z;d?k![2_8Ju&<BXIb[l824_(S+]pM%=+S"lX=)H9@g0<cVS)n1j`JZcAJo8GgZMO:%p!VW!)54[[16p?FJh$nE@_mWr0XG/09bQZSh4)+Hd.ju2*C;uT]TBD&@F@%Vk*\R%/4i4.QYW+I!)T2:c?+0WiL)lgK`8h&M.Te/7>Xk6<1in0I/Ss$b6gn#fbGfJs&DW)O':9"Weds4UhB=/X]&5O/Gts4K)DjG;'%j6%///S)MNQ[.:=I?XWog`,-_Hau)i0Y7fIUc0KVbooI8j/[[='eNRWhs'XH?E^WSS1:WYLd(^>JAMb8Y4<W^h0.>(QT_M3j)@\?^+S%2'[mN]nF9F.EBjK]!t<qS3GCS\qQ'p+0J/kckPD2ZhZ=l*!nEcn0CqFQsS*j=JeO(W.Q7hHI*h2WTsaM#;M@+ot*%l[9!Sh'PQm&%rduu,iC0R=IY5;i<Q/J-X(4ia,\#YUM7Vj@b;=YGMJ6L9IRGqr=L,h$G8oir/VYo+'*N/(atVPP[PI7o$_BIPZtPi7!ebj)cuN>f%afDd+.#M%J!j;g!5&`-PWQZX<ILW%tU4\%3K('>2jW9&LK<#/;I"q$%@U4gsU<B9bftA/*[32Og0?UFpiYC$2b"=FoB_2ilQ+i!Y%mKOQhD<dgI6hSYs2u5_/T3nJJ*>D*MKXQb+P.s%Qq#eu*CU:$GDGAbF,qH-n:suH1A,NT:;6ukKSk:1<)\ulnm::DN)/.idiF9n7%8C,OR'tE=hU/>0sW`(8G^1jd"Sb+oT#W.O(`]^Z=I(mAOkEe,.M+Fn)jg+!9r(F=,7B`b[`hX,B%^&6%J7Pj7nKd7^?'g(c(C/m@%?7nVqD;@cqEG\;Te9/*".4NR]+BB]:/6@'2oA-+3bd7H@/#acsSg9[tCd+&90HH9l8BZ[%Z^Lkl/_RJ.@Wsb2-)niVkIc1kR4HNi%[W")2nmF-Mj[bT5_br*QrPW1I$56A>(>a&;e/LnGJ[hXgMq+LRA$f1WkYr_Lp:uH]gTXU4!sMtuaK/q3);N:`Kb@rr(,9s*i?'t6%V@_2ql!Ik[TB]"1MT115O+$\_(0O4B2(aQCQ_?a'U-Vc]G:1uf%o!qi%[8lU4F%bMhd3d)M4(;uf4CP/X9OBt^+/g,VI"O5be.VX%<r4ol(2,G$YF:_-VOq'ZhV[VibP1W)3(q41I'C@8+Og6S#Rjb3WO.rp+:nb3NV$hreN^(Kit4g[#1>Ku)rB:F*C+_B$9$u)V;^K*%Mg9[U]/>o!ilgr]<?X#%V^_jJ#MN`ieRL&c5\)/b?aN'NCsT=n[=N>.D+eh5++Oe"a^0.H29VF9R2fLaa@o?(!G>t-eN><0Dc@Ti%1"@7dI5DDee['hk3\l>'<:6&A]9)C$fi0\(<oKONS+IobAQYV4]rE,,>Z;K<,9"&BA<L4jTcrL\<Y=@p[JI>C$ug_OGmg)3>#$b`%#2rGb"4gS$]T4KtCu=+*nen;&j31M%-<!8:9!C<YL@s!27m]!jZlY\ks'sQ'F:c>47$B!\j]QmcXsX=J'RIqGe^$sm<bt!`""*Vi%H;,EPRjM*GI;cU(Wu0-A`QB+gpZ5l)oBnM4$mep&G;YkiQt#`,UOIiLYcS7sMc7Q0=YhU9k,f]\.K]Ne=,H2YFrMs^JC$**]]a65%Vm^$6.+(66TQW"IKb7G4=fi%1OZ;pd*rc)mf$<ld1eO8XK4TMMWgue:];Srd$R,o2'bI@c[CQm)giob_[,jk?6CsJ+LPAE;<926G%>cc8=^:V8,A[)t"JBgPX=>3lb<,-SNl>EKFDJ@K()K:G?gKMqYmA3fgWnEOfW;2^\KU+cXF<h<Pf??k>mCn^_/3s0(<R<Z&/ib=[%JS^T'Ur];eX4jEeDkl<73+:ck_)*V+;U$?Zq$fO&Hl%2_O8a^a[*\i+2+h'J;AH:R)'Hs,W1h>6KplOeP[L62IPP]F'k?\WTk.)n%3Z4*-M/SDj*-:r@=,nc1]LhI@a^R#O@Je-G=m'qQ`h?O:@6Ku9@&.j13U?I]eb6,m@jC-Gr'Zm\Xr($i4la^b:J.m.iX@<fXART3%L5#<bH"dgQgSKfWqSuiiISR):Ia7Rlc%5JQ=EctL.H*$b-ak!GI?8=!>lW#BYcR<XR7c-$96h_+fcgA2FX,8Y;)*Vd!YXPV'7>7S%.Y$%/"WC_430+KNnnA/&8k(&UOFG"QA6GOC5@Bb&?0-cb0\%5LnrTg^bM6)OB^N*R94k#SJte[R0oC@G8i6K+#*D;Kfre995)qX(%Rbp2,20.j*D3Ob](&6b[R@Gh"XYjC.a<LEY3@g_/B$0;_MG_4N+_lOA6pQQY5I*r>qII0qL^WO"Ii@JR!3*W%_'59Lb\Dk)9NOG9%_W>Kk?*=?N#:`SmN0==)jjB$@1e7n8:f[bMRF(XN+b`7F_lHCqGIgU/jeUaJZ.5Xki^7_m#0cEpnL;Yd#HJpW_Wqn'ak-<T[c9h3%.if$8o&CO_Ul`R7_t.dEJo3#AQ8@RL,f,kiP9r#L+Orqr.ZePn9N8t%oO'3qWKNhnE0-)_6pa/U6/L:\eBS]R9(f!%/acoCU)tUC%-jpQJN1!DBX(IMLC*X>0DV%LaM+p6+cp2l3W->)degsgV']Db;&f*"AWk6aYQh%YMqF'lj(%FO.gb'3E,sZ]1]ke:WpqUq\s5Xu/%<;.cnjNN@@-jpl/H@@O/gh3o`%eCS^;o@tseP0"e'7O&@<7$IQde)+K'R>%kd1Xn1`):#A<-HGNAC\^UH9H9$fIB*C"fl:`VTSUa%drRDj@a79\f=pJ>!`Kd5VCCZcPP:Ro\QH/;:RM.AAsKh\l-5_4?q/n:\\Y-URI!Gpk,"G:3k]![7@N9R9bsX:!XHHh_Fg%?PT6k*%F0?RSA[Q5Gr[-C>ndH=Q?_Zl1SX.O2!G%hX.D*mratd2&In0Q3ju@N0*`[.!C^6P&Ruuh"H/;BCV#pQSm(RqfroHaR2@T3P#9?8V%o*4@e.0PWI]6IG>9e9uuCi*^J<F39I)nE6A$@:2u@VuqXf9aGT$(@/'6c0md7>0e[:UXi3Yh6jXo4GPn9\A(BcR%/UMBc8<(!))q%IsG7R,9EghqjYN3s!VldM/UPB,Dq)31<3o;%^LH)r0'tdNuq$&Ia$U1Qe@U<=6.D39Gf\@?Y\(L`_F^&QrZ1?RXc[*QK\&3ZH/8t%abF!5dQ#CT(`2?=2d.,O?shC')&AD=?,i]=eW%(G_$M:,P*Kn7&lOG%0NG1,q:V[k"<a"J[sW)pZ\=?#n5YFF3;`6/\hP7EaYdj0%!DIea3AANmm-0T?*&f&0\bu@\^RFgo0F65ARrotcGC(LI[!/Po+39s?P]22+W(M=<M-%"<7n26aR$kBg<F&4,LC//T$i#jc^Z,Hp%,jDR5)[K`4LaU&]>G:muQ3iqHHNHI6>$]6gi?MDE]VO'JK91j<&1bLon&^'.:<D[cC!u'"(Go,[I",_r'WX:=8K5>;H@UW\)s)LV%E^c9Ue$.F*m0[@H/i:*ngiQ0Ne7'Sm>X0c/R*+W4+&F`g"(i&b6du2\UP90k.u)rZoG9+]VJAP\<c`F@(Tg<*JmkF_?W1d?Ae=JO%F8hD;"QM`$CmDZXM!ltc(c>Z4#P!Mu+H.f!Y\_lf.6>*,T%7TG3XqL*I)s$^gj&O\,ddq\FNYjC:pJkPXFGF1Z4/9eG]Z)i.AH$E%&#8:1?B926cW2V_&T(F5`XejoSsKrDlm)i_Ha`uhNHdVKTrhpcN:DVT["_-*7l=.iFZ6U"+KG(P&PQ7\!eOWR6P_fJ3lOt-n]2>?%!A'bN7G9TXaT.i;E\VmAg(#kg!+F&*NH/U!Z3Lc`\e?X*B,WcL`;2'k-`hnS`%l7r]HhWhVUUG'&r1%-Y6h,[6`C^!DLa,u&@EJ>%=`jm[=HaHiId)fY@\(,'/(p5I6*/2NB2bsI3\*5"+=n#kQmGrWLJtOh.8.Lg7ePm)883qU9W%p7R*=734m+VZI$Hn>AG'9'OP8aG%-dHOg1"<^6PL;!QJW-I][%!hQDN8PP\7@.P,aZ:lEN'k84B'cUAX`EYAOM\Bdk$2iHK@\Ho6hnqU\iZ,%*QkB1s(O_.?1C`><,j*%CYt?j`A1Wno&(YpQ9#%AYqN>n#Mjjb[,.EflfXW+eqjj<)'P6XjMZeMKI=1<kGIp@N^W0=UF8&:LmeCFYWc=eMgD2(Irs_nJ?C=R%a2[8\AqDQ.5f*WS#LZT7YULd*0<2!`E?bZ;8t,/Hc`Pc))CEcZ9))h$;-,.D)Uc!$?h6;2-*JD?TE8*1FPa/6c[%>jj``:<'iRqn%4lTouAM-nY1R"i?L\rm?T3nJNfbJ(>is!&nPd&s)1YJ)!\#U!'I0cW.JPqR.Eq0ZM-f.dAoAQSkGMQ58$MLe%=D0?4e6QY!>KI#j%'ks!F:QutT]U`#"&P,NTgMX&X)68Y::>)g1b^8[L3$Pnb<%kPQjhug`Un/@@_DirURGBH/Ze&<4-p]8rIlAuVSj1>T'r4Il\B/L'%`W-'9)bpXmL^kS0[o!kh%\RBE(Y32uRtV>$1_;e((1`cFW/T)?#s?.l#V\sS_"X;Zc8XPh@Jf>&NN(+O&ebh():lUrR3ba*6Y?sk%'_oXj[;`r3N8lJN?gQlT(MM)29`)Pi5/40PD1=4L""VB4IWG<]bNAj[eL8W=861)W,snFogE4)^h$mG$ho^9+B$IH48,cDm*FYX$%Yd5'%W\@F%JUMm5@!b,if<<iAiNR>4)27%/[qCU0<i:K<EB^QM2kgJ<Rks<WnkI+-fas)'Fc+p"3RW2!0Ug@GF3X]3L9FshIrF3l%q%q11+8hgV,5(<eW?_A^PXcJ;p:rJS7:a9[=09N$I-4>T8fn`M<Xig1BG(H*9#DsCm5et$A-d!UYntq+DQCR'g_n+td^$`*MCmkQ%DH1"`[aYn/@J4Zsku(ks6/A3+10*DH2bLK7?Zg"-Wl(-</SZf38\lW/$b[st*-jMj**I+>9UQ,G<,CfB8;Xd(3U^nUq;o55GY>a.%8.K+fXW\mu_r4,/a_Nc+j&1''R"jS4n&]4U3sjVC-FOX'6Mf9)C.q[h&P$01`?N#\_q2*E^W['!^Llk:%tBk]j,'$nMa4,1;\IQs%NhaS(@i5XNLo"Ip3*=4*oKSW_ai7+c>Z.#c2=f.+RVNK%1,M_R1nu"%"tuBnPZeIH\alSZT;4jV@+_#H+c8_K8<X3Fq[W?9Gtp.G%Ts=Z=rpt18rqA(PnoiQil0G;1W[A5\e],mBb-5Et@>q<R,c?`sQe)Nf'[(uIcRQdc9LiOU3HJl#HZqa.ZOEhqF`,[nGF-_Wd)Etm%f]bt0c29uYePp/XBeJO'5$[0"Z"MD6.8Mn0KXnW3iF&_ZBPbq,#bFOaq@H([&QT3(opZ$&[MF_6Vcf^c'\orKSh/=Q+7oC*A^:6I%BGVd-]m'JhKDo+VmW?^=Fq:nIQlj?a)HJE.$m]nFErD]QAJZe4o)5oi+j"=ph3B_#aOF/'!E<>\g^]Ib9HdA9OBQ.:$W!N5m$``g%8H>]"62E!V1/ce9D+Bm!-2.EJ7]+pr$88\3]nn+AcBmK1/J3S;<iSY^2E,3(-o-Kq:Ud&Ko!*L63rfu@AoCTUB75siOt@bEH66ne%MlYAbBmjN7I:qY>QEU--AB;9I_>$[k:,]80.@2KQnhJEE-%_s@,^o3XIp7gleQ$FFOrFcHXDAgYDh=jg]@m*lnU1:mrQ@3&BF8$M%i0+_G1]=Dj[X.fc;m5@\"&#Y<1_rp=?;>i-$&dJr8drro)0J@oH<nrQ=i-,?AlW/-T1-<BaOM7l[d[B!`'b#<A]&h^5Zsu1GuBX1%ljUJDR'_[:/2V2*0;IZGRnq10!Ei-1<n'%>+89CMOL<RrLF^%kc^QH=1<]BVVfm^'Jk"9I7O9nL8S"In5/3^sk1gCdaW&I\?GgI;%<I?U7P0I]Sdltg2p+C&4!k6jQrCJV(HttjsB!Oudnm=M-.^H&ha<P%YpS8DE74$]HEf?q+WdBh1m+`m4_,)?>hSotT!]Q9tCa[]l%p)\8P.>imS</Ulr0DrgU0s#/al=j*]:\/UR#C%4TG,fK4`+N"g$n%+PpBMk&`m<oIr%c7>Au[M?U'BW*Ao*fN\PMFjSX+9@1ikX%%/UJ=+O4gq(l*8lDjL1E?M-TU+e_nk"1H6`9BrOB_,51/?GGXq.M+-*_>U@t@NJ4BA8.+5^C*?S'-OXBra=MQ8qt3.f]WtSrp;7)0%TWq/sB-11jkj_L)hX/6c,BM`uCqO<%fMTFX-<+\j94Z7QS#rL_mHbNn@;=EAC7j(NPXr+QB"fTfraQ&2jOU21j_u%nlgZM"*gpZH%Sss2T"9?]YeCne4Ea)E"V=K2CS]4X!jh<UIT_nri'<eks]1J:3.'n&'f5!-+^J(l/h70dNJ(ZSEP=O8enrOR%QX?.&@e6\+J@>]Z%F<E#O9>\!BCt-n5ak]j3.Fc%[:7"Zk`[lCE`knr`Au/`R2gUj6A0+Q#a+;EK_<%eYTRANO*(R%tJ!/&g8$M8=[oM!'h:QL3n_]t&%o(cjk>_8s3(.GdUo$+dnH\YVe*"P8+.7n$*p1&uT*X>Ya[EenAlD\R\il/7,4&\2F$`=al,6_"J:XiV&J*['!qZWF<X<fJ?;d0t7%`:Ur["Z<8]q0"!njH#Z)r:7^nL1GQ_bM#n;hH-`R68ka3GOu;!YJ.!DY;QA[`-M1iX.gR'ofT<9$N7E_E/PnBC7kXKiY6=YEdC.;%fJuN+'9`mTn1K,a:/0sD.Ml@H)[a_>ZS$f*T7LHFZ<aj(AG1n'ma[B?^CAA]Fu_n%dFC)14h_8UNjs@1k(dKa%\@&XN=IRtD4'Mq%O_Z(Mb@U9dH9]/<\NY[._k=UfF1c`R"(8fU-H%5tbG&dq8Xs`n[XFkY?Rgt$.ZOegQ8P20MT'XFZ<=#<7_8?$82W4$l"O[7gpF4D%N3uEE_)_dB+N&#pVAXf3S):K#6bddk_MRrDSYIu*dUMfeC_]sB$k$>lVmDoefhGU=('Lum;IN8^IUU:Y/7VJO>\"KZf`Ld4RKUMb%UNB-VT^P53IIOMH4e^F)0.T-#@oI)q9r2lY`-%Q.7eulXeWe$.l-$lGZ45u;`dKu(Y[S?$VWL!$S'.A:=H`$\N+7Wu2V7i7nq>Uo%IX[\kq)4c2D-B/';;8,9D:0K0lDmAHH'gbL]c)9%[f&]:i0^]4/K@K6B;qNPaEpKO2slM]]b-cS.VTg,Yn72,dQ"lK8[n>"E`D/<%kcWVfbMa1uD3EIBB/eWl,k48#eBk&m-;e-P/R>^,L.9TMrLN>URBsM5h@oST/,$/0=48eS7IDA<8=@iE"#-]6\2E"CD&:`%/"^7T%N0ga3r/nK_9H2a=b3!a8*n[DqLkUpdq(=jk?`*NeF,4.Y^W-+hbcqc*+U?F[%dVPF6I"_jo7aG`9=HRZQ]VF^,Oq6K52umlU7sUf%BtdBckEh%r_Ii>I0;G'mre"radqGJ^i%@ZsbUm:)'c#&!]*)&82C?;@,(N&&S\Ec2#-\]@.CtH:2_4LEg?E'E=.>3qS!IUs5cho+%M_+h%G04pD@4AP).N@=nrLR25Z1DmR.3h\"DjK\]Q;_l@e,(:e7Q,-WSRGP8s09`E/M[+#94E&B5(UIY,$@d/'(]R$bqkpQGn-,6%O\UP&TP;(@aMk(g=-Z)C;6(1Kimh@cKRbDh$GB%*]9p2I0&hkVZOX\kiTjQ=grB3<UA!r'NBEA@.,jY4<[5n2!m0_$8cW"6Z:8GC%(N4h6:=,f^BhiT_"SU)BRO1b`#[-h:5;1#N+PO$&#Q"@G7Xo@bOampH</C=WD-c:%1:dj'1apY>lKe#ONhu@id26M3HDth&qLbMj%-56@2@soc)T/h1#?Ri@``npRbbB*WBrG0D@dBA-TaQs;3Qa(eK91=qO`;5(Z/m?^S%_TV27aW#WS;nM3U'Y#36?1LYkTM>sdSK:Q%;&'YC*epgr,!XeN%]0FVdiV4EPf%/S9=H/bULnK[0U-<0%Lg7)W<u-1%7h?#MM\?\@B+d1ahM@L7R9D*<7jt7=HN@d#<N"/Cthsi%)@c:-Wc<QZhQE6f<VTsL/F$0@*D0<\1&?CIhgqd4F'5%LL'='1\usZ"@?-OTVnKgpkND$G2uTr[q<*8+q60hk-i`d&rhP&C^]3Im%60cp(l;c,`oJ^16X#_k2eK#\:4kl5N9_9eWHHhc.$H*_jWnWVgo'M#67kC<reWG"d0\QS.iNiHAJf0E;6Ri.:$6YCmHN(oa<r*]R%%(3&818%gaOJ\b?(WI`p6N,FG-KF^l+ik.fVe!*c*Q9p_77\:p#RUMAnluFc'=L[RA]0A_:.)+:nb9Jgm"\FDkG?e$!oiYb1!Kc)%@=,q\@Sp%HYPEjDA(^\3W%NenI[:;u(6)Z3Slr:WhJ\@;HE?AC%^9<eUG4;8,Y04J^7m7>X6q+E2WJq9W,*MT!CKU#12;AjDkQZK%h*OY[EY(AprQSd###E(H852ZN3o7KrrDQQ"fp\L`Vc&3n%OQ+*ji$bF5aWaTT(,0b3e=]`?LsH!#!b[X[^'uW4lCnLJ-D)l:Q9m9%EKsSENjB9K3$d#!H3%7TMQ7f=3)IPl*<H.c]Vr(#48q]I6tQ<eSHMcLaJSE@Bb..NJqg!8pj9g,<9]FAq2NVJrKduu8dtjCq5Nuk%l71XlJ*IYGZbuljfL^rq9Z#YEIiFLkB*oP:0IA@R@;Q(;G;n<;WND44X!B4_R_0o\"u42J/.E55^6":!]n:!Dg+l$>7T*o>0uC\N%YcqMPis,^B;(AcG/pmN(dcZp4/JL<983pdNO+?pY#LVj:&G2OZ^:9%<>p]c$aSCI$(-fk\a;N$AJ8*W\8&/27=9pEP23e\+`$6#u%-N<3I6!^94pZ'T&-L=!b\o\KgL)b;_co\8,Kd6&>$6C>Nr8u>%mai1+"=UUTCB[&95eIuQ4Fi/5blANc<<,2Yk6&OP"-tYaF8u=*%*PsEQX4)870M@N46FR>aJtnS)7ZQ_!F<*C1?_d7:pJ,Zl@TMF@ciMJ7"DcM4L9p\#TJaIITCtX1qE1u2ku#AP:5"f"a=eWf<L=JG%4*U_!Uh>NAZ#(,CXX!uMZ8!mW7jNF!EdWijhs>X:(W&bqFU*7-MSW.hl\VD\KS6`<M)rKo2<ENn;W'Zk>\B%EV+Yj@-H!DBClLsK%9AQ;:s)'V8GQmMpV2YDK-;Dr("4C2j)\fHO<//^P9%_b!fY>a6"H=+]#]e9.;eRZH(`jsGX]Wt)*RRMPjMFiC-s>b)Ei]Le)H5M1%??hbY]!dX"!<Ag=)>"&>,^B`lTQ`VIk\(qh`6&Nr)"fN:.3m1&BK/7JBb9nZ]FCDt@2*1PH!`]?Zbl3Pd(:c3_P\8@jfF2GpJ.,^%hd:[GYe?eipo*k+=PP9bLqd<81^gk:qf?E8\MmZnj*]u5>Q/$Vd@@=a6b"n0)8%^P#RgDM4Xm*(o-[pK`CrN8RLZslFXP!AO<0s"%L?u0%JcXiR^bl6VV.R.p'!Suud^]nuH1$=MFi_%EI1_[-3EHu3W^DI&/;iPg4nYZ=L3jBSm!68t@KUaJ^h=Yf@Hl`RfKeY2Lf98<%F&[e]dkojQJ/Z@mljq$6kng3CFIqbA;[)/nET"FQ%=&^c/bTc#Z<(tJKnm#cb4[oshW:Jc(D1#!&_"?kUURq[VcK&k`EA&D@&(S[%l:@jV.61XVFmD'mn>Eu%qX[Z)qG8<e]b3P.QLk?^12HU#\`<3H5:(EnJeK4*?uM))g`UMI[8s/VBHq0.:FYmTMN,VQ'hlE.$"_Jl%14mCE^h'O=G`?.co$n*<P)bN/1Tl>%#OL'GfY<LCr'10g(QbAn_LhpMk:\P*FWLqsK@3$;h=EMdH/E3ES=o"E0PmScK4$/"Z,.HX%.uhRIKeUl$Y1$.A^\HSk4->!\q\0XiP8<cY+6<%:4+@-crCa%TXldBsXHi3mHNe46GSUk#4m!s*gisfE9JHD6]'!;@O<cC^O91L4%0fCQX=Nel5"ibl0HRaQ>jsA(uRpF\'5!&f\Kk%ed0q#d7bEdDsB*SXbp*n:`3oaPdfi?%=a%o]$hGJ+6*;g$Ai;ARdXVios(fV1q%%ej[L+GO5JLLJ,Od($\H\q%P"J2@;"ru/^2KAVjB&8%*-h-Zn;Xkh5ZU2PXjG3#:908F/o4E&O>AOkc8_AWDg=Mebn<XRJ*:bR+G%dm\Z/?,TcU]FNdsG!!4C%o?9"1fc^:r:jula?coQS9-TlcW+NY1E(3II5#?<T9BoLo=!j4Pt)UBR/h<uJaPcU;Y6XorlI6ZL692q%LS!haJglCBpI.bVlb*p[8cM5.on`BUO-m9l[dAs(Q#;6QD%!$V:oeRD_4?V#6N#%JZ?',m]!A8jQ(+&hTM;//2kC+EdA8XmQosN8%=*>RGn\ntkVO;iBUrN)LAk/->[/Alp^6'`HF001u5+'@r^TtnO4BM>Tpp?3485Yr&^SkCdCa_.?s17'07COST%X`m,%d/m<19K!9%`NB$(7(Y`mkXN"bs-[?.8f$JbM,L;l^O<:?`k4`PQCuUHZ"(b^<lBq7o02uVN"j&B`e]bHg"BY4)"1$Y2H9PYfY+eiE1`cN$bE9^%)Dc=8c^=mGN']KDQ2@Ga\/SmG/IL(jTqncD)B5B8-^>E0SJ=HdaYBf`,p6j+%.c`k/.@ssUM_CDPaO/'@,(-Ub.9'tO9O$$SLKZk%I0CQHe$4=TXg"qWV>fHg-+^#gGtoaE_8H^($r>p/*-4K=&7$b4p&a*'go['."hKeW$3an4('YseW`Xk2=d76;"hZJ*dI@7&gT[OK%-`0;uULHroQR^"r1^Gppi;TW`_aM/_pMAh]nWSoM3;!nr*ASoU*:JX75fm\q/YU`;V0cQG+D*nH`6qZOU*Id:kI6J7fe\Go,1Fbn%M)d#XcuD!R'Y->lBiBj<DSmIU2eL?W(fMnPN4X:7)NO,D-A$be\$>nec+<eYNadlfrOG>eo.$V+aI.FL:sGFUU9^:4Uu\IlG=YOf%"JEXje@.)aWM"?t<PQ)<Nrm?NQ;Q7/C'dH`81G3!]0MlGIsrUIIXI(PrWg^MlW."'3\Ze?J3+4+;MKU]/^mP;BKl"F;[&0<?QI_#%nj^fqDQ:[.(`"5FPtDP&[r;Jr%F[CJe?jgn5h:J)'/<$ZT4qtaT:8j_KR+-rQCG:Rkji1NkUHk^pIe!*`:>km(@+"aVt2HT&#7iM%_c1F`m;.t.g//@?p40A0c)gR0b`*V#BACUb%^%N9ZHPR4aDW][\Eg(`9ZIIM,#7Q_q4X0KiD+Z;n-19M<KEITG,pX<c?3TnVL"0n%1p\[JfLF\7"-/ep:_DaNX>o?#L^*Z1;'=ul$>,1r.VY18+c:uF^q-%t@FnXPU%Xb>`c[^^EI+3lhnIi=)KD3C[-9<RcFO9LW,`S]%Z,0h$U9&0!TfP]dBhg4<Obp>"_rLklf(;`$G]Q8ths+@Y3"n\nr,=_tKnJ6Ab@H'9['6.M7I(4S..X"T*b;#u<R\IGM2jZB=LE*?%"3g2Jfu",_!<gAo3qtP$B![*]M%jM`Yrn\1`DS#AbK4Wu@p=">b;Y/''HtuH[X"snrTV$:<^f/C"2QniqLl'u<@+VQSY`em;ag#k%=V3%?`152,S&SkR7gaQkA<=NIZmt@WcaDT35T[N^rICUub#Qb86<_smk.-@fa+*JUH'C)L1r!JE'M*[Y`O#h0PHPYs,@>4jc#*h6%AX'5pEBr%t[r8n!?8ks!DNXH:@GVMCErbt#2D2_>W'Gt"ikinAqW/@gp_Nc*O,"IA+WL4*^D>%CUEK7O&'M[b)Y04@KNu$K,bK$2%q,b=HTEtL*d<i_ZlYH@DP?Xi,!5Sh5)g]Bk<C[4*<0NE$f[^k_#_XuSohs`V>Yh1QI*9skE_9iLg0)K6a?cG,+`*H-418#B"g+0V%0i))KCt)Ut.gG(/QC0N4P*B6,;0L7G1lFn[<c;h<BDQJ(C1^*Hb!ru!B0Cdu:j0+#Z5HDH9!AFi"Kt@:$-G^OMF88YlpRAL""BHT%=:lelF5p">D?+.Of6(tCU3Q>b-6_rW*@6"8#U9DO=UL9F4Nq6H6KsAS<API*Niofn6Xkmne0?nbg=%P2esD9Y^..\A3NF05=Z*3o%!Q'2$D?YF4QtCM'kH3!,W(F6R+ec&EeIi-3Q9ZFGPBrZA*sTd@`Kl0E_rC&<4&4@8<^+4t*^_]i\IagUXD/G>laFT!,N"%%J'LI=%k>#e`Q(uW'.:=n-'<X-8Ic<ApD!3Y/WG=,VDN[>(AQ3M;>?&O"N%mpifHlUpO8#c+.<?H&pKWXfb#)ia[k-7t>(]B@i@#H)3CtJ%%WCI"A&//F3^3^T/MgK-8>)hLG_\F?\"oL(=:hu`6:/kA@mXeD]R\N!&#u,(VjZP0o4n!.9,hMd73^?8^=h%nC+NnQ:ID'kh^;\qZ%l9]39+m"\MgNuBF.!*e4kKqTL5)jUG'!Yk?H"iJ5)Q$f=Ch\kQGEY/0qX4u1dUu,Z++fdm=pot2A>VeEl/OY>FnHT'M%GnuY'ng%%(m`W/U*>o4?a*0u>.17em+[n?;37[K]m@u.Y0(N!nh-cP_7^2MkK[Me%i`KHhd=6o`nD.5WWg6`1-`1Va&0!(p&OD*TBdQ3X]fDK%rgn2@H(]M-"L)Z@gWFTGEWJLQI(;0SccthtcJ(7Sb6e7-0rq%;8Y*?0DE=Mi%Q>B\W(YBAF6Uun8LG;k(nHtS0.,T@<3Z_W%oi94%@Gq>Nm_We(P:7XQq6Dq5dG9o,?Krpp08#2=6;.NsUb6NQH0J.kYIU_8@72?EF62YEBnqDimnYndEI9+d%79(B-P+o-(gMZ'<.5ZK%$C5mV_<aoLLu$0<,Tc*=N4Sf.:Q@LSLbTEMiBUqmF<:RUH^W\HV`p[%5f3PpUlZ8c0@*;pbHM\(Z],<IRSr,q@X%Btl"3#Z.W=+N%I"Tm#/\@5:mS'Q3UMflPimPJ98oD7C01K$m+oP>M$r\1lFmd#P1+(^E/MdUm9Ejs)X-cofkn)CgLS%eLHrS$'?j]TP;8Xq>/h!tZ%^hn;(M,R3gBXlF^7"e#B5r0CPP)A-)8Pjs@d01.h^9@:Qa1']Jo=tb$;99S[`QJ5HGgc$#:4s#c%0FLS5[Er;!%[`5n=Xn:-sE$T%Sl.?#@h6Li?da9CFW:3uBAA7:-<<eCM?Y5*FV;^m=D3H7lY"^5_mhtY%!uc]pI:ljdn*JfN'd!1edM/WSGsA`of`U&`FurF]$(Bq%04#7j]S^D8kf>`@FNoP'mS3B9I&ud+@.36Q=!q"THkIfnIl"[Ys3B8s5V03u*K(c'l(V=.IR[@$iJYe(.X"?\8<sE\YnmPF59;$Q%`8Va\\r,$JakeeaMRCS%EUdR!_E>DeaR\gQ79?1'*q.JbY%$YMDG`QP'mQ!?&8,-WqK?VMO5$B9(k'>;`n1!,LrED3R)m>*.=nWG%O@<)6XWnk+TH<12?,tZ]KdoTXlM?e)*]E<[jE]VoVn.cMA)R%:iZC2To5&mFm2^"BGu([IQlCfE`F>lI>2*<BN#5BD$B'IDCmE^4%2T7_EK9C"?cJl*/XB'c(FjJ\i<.:$k<@fjQ4u^a*,uO.totr5sl66^L!LM^o<l\gF@3*nRiQLF7+QDr0?1jJtIXI&&\r,=_-o@c5%Lu#bi)RIBQLo;""ED>1)1[+CHA-%PN.UZ]^55"!@YlBS/jtNR2*ql6h9(\EEi]YU#j0^%V;c\a($M*eXDuBAG;fi`^&^"a<#0N/(%'-^4_KenZ62u3CXBh%ooJjfN^_(HJEi_23!Yt*`G@am/G4//o[Y[3>NB]Q^,$#;[CE;H"`A<GM)9tp>aO8Jat#P4BR5Ru?6Z4%>"%'_<Kh@p&65Q6DAqL;\HW4C0;I0B.K(.Qgb<[>]G-XS[:M$l/;T8B_koB$(qir-:NAq.))\X%`3#C!%u_na)]"^6cjDd$.D$pUF+"%SsN?<MPa)9c!6a<N(#dcVTaLS<A=^KoQ+*!kN*3K1.ninW6,ip<B2d8Q*K&p;cVpI;Njbtot?5R$(dL(l(k><.P5^i)KiG+I&c0@%IFj`enY?@90JRq+G`cRt%+990p3lDAY"Y`YNMU&d5c._>Y"ZmWgi[2H=e.u]<it__"G<*rri`9C.'_U.qTRg<ZWC-EaC/sZ?XU5m%@XMU_b&$V)X/]D:=-XG?<>f7,A!KCf7d>/tC9a@/N,p!c_el?plljf#<B8sc<TX,s=-^V+YIePlkWC'+G?#Md:"lHo,D)g8];ggq%7.TN:Se5(%PnS5@,n\aFi"<WqGZ^4S]Lk:;9*_V7m8SL$'9c^%7\iGj`(T_&O-ipIAi6N6=-ZoFiLKeDiu(isY"/gm"Z+P@QmXQ+%Y@79/("/sN'etTb.#UVU:AGK[*WcP_c,r>5b3G4*HE'sD@rsJ-N27&fWqI.B5HR2qlNk$j,rlJ@n32%>H!!<'19-ar."lB%95ku*%.EZ&DB<R1J_TeZT'kNKoFmk3.>RNhmM)`U'P)Agslf@)1N-XLapga9nQ[e\OJ,?Fj-V'JiA=O#[nIsH[R/),5k.FlW/B_C51IRJA%]%t.1e!$f&+UMhe9`^41"$:j9ek[:]84Xh^U`$ZT/GY/Xl(BbuZ/s:mS%<V?OUC_)']&r.F(U<b7P3sc&:(bu5nGpN'YLo+'i7@5%k/B)#M6VpkDSaeJo<=i5A&ll'Q-Iqe>4G*(qp2"QNME@nCo`A7J2Ka@9e4n4K9f[BTb0/a@g/7Gnq7?9Ns,SgWWW?kF$8n5&:JG[%d5ONP7AA1=6$HaRJKrkahOnGEfA+H8%T.BI]jn#MG)i:iaF6o<Sk+<9`O#b5:uF03.H`<VH'n%Ef+O>ND<mGa$qp%t?,UZ>%<Y=E%C3i-iJ<?9bBC/\"1tB=MRjEtUPeQ(S3R4I#&'ICok=^"ErfJ.KZ>B?-l(ARX?)AP<_XlH^p^#'?i7t;b+_jZVF]=l+]XQ<pJ]65<%`Out[V-P/rQ2D8?Sq3gMK)-POW2WD9<W]m5jRNLfXSfk;WQ0+WVI5HYg-AU`LTQJ2h])e&;:$D@aZ@N9<8ANR(W#Ai"GO+0-$#C9%+b\eiJ`+(N@U1!sNCO6pCE#Ta\t0:'m84a-eqGfPH[>i=b!2Hk50@VNO@c"<jF[Z2]hrM,(ptush]=T$a\Nhthg7)dW[jj5YogXS%karFd^5?V>i,A&WSm!Rt/6#$Pa-uC,Pi]L>cCbA[48/V?P7;[p`@f(!Pr+ESl->_0VpnYlM^_G/DjcZ)Z/7?[Di"'jjl'R'aV'2A%Cm6?Z@:ikmNE=\/r_l%@r&gPQ\Q#KGLe+[f#=X"u&2mQ=MZ\o8e_;L@0Y,EOK<GRBBK[0!''=.;hR5R>+1SsVF)F1I-mdm8W$\-N%OO8JZJ#bnPbaA#ad7-h\]:C`P'i!A1Dm?!DN`iI->[BLCppPil!>^ZDAW>8ZZiO_]Vj5JIm"6/:Vt/c-^`7I)+Y:'_\H5,3'<#5Z%=b&X[rL*J\nb#@4Lh8j36\VH*BEpoql&fl#0#l;6()&5_$kqQ(0;>Mf&^7ZLY'95bQnI0AE`iiA+H.j@o*n_nL3N/g>mL#YAVEkY%6mXOdC*-&j0Qn@K#Lj]`W[#ii0!f1o"VY:@^iTK8`0eT"M15#t!kD;c-&;ZLF[(m]5mZ2q<Wlk\'UA)/6]:d;-l>U\13j%nnd8p"%Z4q2I'Eg"c+4n4TjTTI"]VMlda4jc@LeOA+Dm\\0*m"%/rk'cZQs4\e(Df@@n)#?&W3L;P/8t_jijcT,VspI4g*6M<r6B%60QR4[%i%2(^3=8e=8mU"]j`VG?+F9&V%:tbJ+#))YaJag=lD/ZUdV9E>^+e0"D_]Ft7D:I=I,KO`J4#ibFYW7&0Ha'R!O?Z7QSFQV,C!Y*%CU#?n8s,rCMoDqtZeSlTofEh#P.(9;92?]1nB"=L6@"9:fP=[96m+_/q7r&00h[W$bWYepRr0S&&Y_=-5qf.X%RIr]nHG5dBLcAa%cVgB=bfO($:;c?=lmkG>)YW"oA1qgo@#;73BeDtI(X,U_&@E$m6utqsM,D0:gi0->DMV;Y="&&rCcWK.b:KY@^M=rb718`m?ja*<%8:R#dI2I<S`86\(87Rkh<9K*'?,FcigWr"TS/FsJRa]W>XpXr#,3Q)TjkEN5!MtE'QQ`So+-D)>&&R<hmhGY;GKJ>n5WbR\l4:2N%-FjG0+'eRhQFRiA=b2CD=O9DQ`<_$"41Jg+61ktiK;0rE@*)0nmGNSN*p,!ij:sb21$cWbb<Vq,"h]Gb&4O]$U>KGf8Ju)7(X@-Z%6>l<QM!%[Yo0&SC8=$G64U28kAh<NISB]X6W.13/j]PV2(M?B$];H(uES?ZQa<m!g.R+8pn=$N$e%ee#jJ"4YOS:>eTaXbDQYA"\%'mY\<:`1XB1H/nBCV'LMphYq$<-aI*,pW7ST;(O'Vg+UT[dG<W'LtNTOJu8#Fd/?7ZM!YY$&Mll@!7f=`bW,%+)>OemUTFbG`h'c%WD43X"0`0o;imVFqc.]h(r^Nn<RaIn<#;>.kPC_NG`8@q]hDB:s1F5'&No;#mrp$_5(+7/nIF`eNImLLfA2uh#P@e3q`J!^2Y^5*%VpZ;62L!nPd/hJ^MP<dZM)unp.M8Sj5b'lbIWMuGI#G]7&M9aEg+ML&Ni?nF8;j5r#OcY=e!tPsBS6FjO-8qhmi%o<[c<9n/;DMY%93H8358^,R0X6?L'l@$61iU:sLFVE,X9b(c6/8#ogp$?(ke1qp@P8._WQ_%[S-:J^;Ekf*XLTn_e@6[F5mpVOJ8(DfDEC"m?fnG6%3S.i;Zq(IXJftl&dZ57(PcGkO/Z%S2S&\EcXNDnlj;+LL6rC9G]@BbP+sm\1=/A;cp_bTZk)btp3m2*T2dd\\,C3./ONf<'U\jXp%6dRr@:q76&d(G<(';%>_]l$8,D81;V/ZD%&1r>b1!W0B[C]ufAPA>id&bfKFP!;\WQ%Nth#>C9bZML*g`jophgY52S]E\`k%Ge>k%2F;+M4>#W)knSp3*-&:6F+utJ<N9>6#J7S=V8T0a<=)$\g5GeeY/fX>H]$K=C'/S,fOXh&/Rcl,4S*K&:7C,m`]WOU!TXst'd.JK%%;2ROmEhY:Fg2gg$FLgB]ro7F'FH9%I:@IW",hk*`"s(-(3D0LaiC]q;/nKk^TEoD8=PAqF7>sV/bW/g,`QLYa>UtN`@2-?q9N*^%>ZNr=aYJAlh#`GGSU8?Wn2/O=8e<PhqX6.2SaEGMME5kB;imWqCM'E=19+K<XIP.7nocWNVp@Nk-tL#.JoO6WlOre8aI.F@?K?e.%Yq@=C>u.Z!*i&3aS8?niI*[!HmUs[+Z+mBhDW5!PLfe!!3@MkM\tl5hK')'Mbes8<gAL^]6^lhq>;EAE?OQ"_GX:\j#P,5rFp)oh%PSj0S4!;%4!A5LeHcdDF:5O\6B>&FJR6uk*Y0JXa.I6K'B=$2NMY0h6C>'5_XYrkIqhp-XS5L9_JAde[*8WKQHQ%#JMYRQ]%LBt6%MWb>iIO7Ni$7RM^4m(oV^B^G4l#L?7;iXJ<W?D1g("4Y&8E<mlL^&OTD-]r`CFGr!]*;bXkV68qp;-)C8_c8XP7!HaWaF84`Uf^b%U(X_CLl$X?YGZ<b_-,l6)[.0W;'N?'['#@HbKTU=@'6Z:\9Lat+H0e]Et..t5[^f"_D("p#L$a:g1V+OGEu\3Ztb4gfS\0Gm$[V/%klJ7r9+R?biOL#SoI[IW7Ie0:oVulXbiUa_*)d\*egq.>;ir=i,uqe/Fj*2<8l*$125AX\Mj2XP,8G2jX-b<[bP*:l_4/*j^\&*&%fgf=["\Aj%C$&.]Dl04F8sc75r)!L4nBOF(58LS.$pRqS+h[Reb#Ni%Xs8b`T^h2!;%cAaooZd:]\H7t?A3fAP04>nnOhk/DefQe%-J"i6%/o3@`9>N5q:e!e?.M;E=X%i[T$$aDf'+g*i3Oj6^0H2Ll<fi3LTOd:e%pP)\kUJ86FV$F'Y4mpeXu6\5bkZ(U3TDdNQkFa%&Foo2<?Pl\FeO(-7StY*a60Dhej$caWEtQi;"C*s03c#.%rK.G2U(%4or?7ecEGrRfMu-.bID<%?D&Ct@MUF5X:!NVYe=Cflm8Ep%fip`ca])PV'^M%+".gV>k^u6j3[+JD9\g;#.[k9b:cS%$$<iN)h?\*@`t7dG\5AP\"?tP"gYD`=$I1!aJUWT@ihTm?Z3lApNl4`3%SiEJ1Lh2@aW6<s;\/D2)VMqE3ob.&qUN$40'(4k)BIpo)J8Q+V^M_68[oc*Y1YaEQhS0\eG;;_>o,q_tU^a]%aqYCS;9E@rFVK05%1J=_]3J)Wm),tj`=dFft*D4tG._T?D`<3U!+-C!ui[^A7>i"7(&^9QMWu,6<.A#.jC`=%0c!n4,cGpPbJJ$8W4^8@PZNCl+r)C/5%4Q'O6&^*\ja1-<2"Q\VTpTeQn7kLS0LZQ#gerWDJ"X^s;RFJmfH!A!KE^9E1FGn)9VX0@!PP]KciR0ef\ak/Oj@%:7W7(S:CPOYS%EYSFWW#D$Z<Q)X)YulXrS=$i^LPiT[Wu:@;UJ?_l$@WpQF5=N&C#b.hi,+<tIi6!6#P'/(Y_t#5l/m>=>g3NFTNJ!HK%b`/(aof3%5_^QQ0[iJI<>fqEE!4Er#u$Et,":R4!Gm#QrNZEWlVPF#LILfZ'AO5iEH$\U!CtfQUlTsYlf[-A*InPVU5QMO>)Dq.&_]co>ognc%29tiuU&/8H>)u/Wl]q,f+"L#$e(T;oOrI:+RTmj6A=bIYYd+fK::KoiT'iNH*UHF53-;+!r@`L::V1U7%4Gep.`%'Brp)mN.%;r_%I116g0K;Ic<T(6Oh?&PZ'k3X[JOPfpc2>A$^<S2aZ1:bmnd4#pKGhUdV[*$`;*E/GbPJ0/le]T(R.o;&2FlS@m>6Z,ilAB7=oc!>%>?)Z;_7tjk$H#qUAWCM;PaSE."^jfA4lqcCR\UNpEaoN,F&Phdq3j-s%q_X9KnXD-,5!*BFq8Fk+O>"nH_K3,K>(TWhdaG$_/=Oo%0:/kk/QbPPM7B@I`j1il]RX'U8"T[@2j#DM<7);W(!jlJ4h7=10[Wq$a)e_YXDFZ!DO3\.+t4F39GE[H3E7d;Ui#g=G%&$5J\pGe%NCnN@j>[Ku@l4i==3gsM_^c%g>0_;GnC1t<UcI]p^6\@)`'5k/?NR%@8>ll-d*+IG3CYfa[#Pc)-0ONA?Uqm:Ri(k)^M%$m:(Rd3%0Jr',9M0m1Ls`4g:Ph'U"]?WG`)?.:/50^CH?rQ>)1/ueCGUaM(MbNZ'Dn#uWZZqKhMkukJ]1Fjcj_g&@17YNoDnkdJSM`d3U/=l%8>u(oEJ;/:dOA\tikiSP*.)q0P?<ib+q-h>OD6M?"[U0WVtl]n>3L),Z2#g&\r:sj(Dmf#`':D6=p!8$CrMm$hp^CY()-/@g!XhE%-R+Ih><MeaDP!c;jVFV\%Kl-N#hUPm)k<-*gb7k?&Z<2#UZ$:mb$.*E`Ek10\o4T?,;0jfcV]^D_\u`:g$176^#>RnZfG;;=_"c^%L_GkRd+PhC("5it@3:tjR,JS%3TbmI%:YVs*+l$mel)$aBU!S;Uf"WbcPbuRE:Au6:nD/`aB<?.X?n!9G"Vs8$B/7>Qs4H/P@#b!%baN^d*Po@[hAXeG#1>J8:=QA*>iA#"bQWS`T(gK\0]OtK9t1CJSKJK%?"AfVEj42o>Ue:fYR>V_Kn]j!Q>*"NZE*1dO4o1fN0ZUS%bX;m-Z!X9U2@:(@_1qL"B^BTdm@nCigj.c\dJ)l^jf$q;kWgbeBFmFP0A?ZZ(6Qd^02el3k7B8c>q\t6AK'o]gaj)5%bGU6gip]"%RdaQin"G%u)j`s$,fDAAC\=n)MD_1\^/TMJ,Pg8e91sg>@U>8UVq_T7?G.-tK?ajZ@%>O2D-f\.\X%2jqh9$Z&Y/Ce=0JAoO"YqJ%)I@'2)I)N*I';WD%/%3c&@S)Ya:,o!@Lm6V`6*?f#7ttD)PZD^5/*"SS0?,@a@+bo$J'OK/EObh,KM91a:BJA_:0)`?#V)b-Y@?o%7-M(%0$a3-2-LgB?.NTDq'&jA):YA9IGqCp^Yuc^`=:rcj\l:8DIG%*?Hb;Wp)`5404C%('NU1V1RaMZ'uQ3`/[ST\30@ajJH[Rt%RQ&'?>Bi&h'fVF=@Ot0Vi`G2"pOfg3FuK*[)CmF2Yi:6p#DHI_3%C,G`iDA>AB!/;8op#=<')sM6@>Edm:=5pGDu)%Adm@3f&/b8%"*klO)$?(2h3i8a<NoWg0oU]tDf3_.Fd+Mo@)e$K1JZ/^0m<B`6:bY,M'Om[R$]Ti7_*6JflLfE`>CCCVlAA8W+Hin,#9t1B>u&a%e)nW-dF-(Q$-6ZsCM2>M`f!,8ej8%\L%!N:EC#0m(X.,D4&KI#X^oF2=mC:)bdaoUes[O:L:]uj&C-9m%oa[:F5m6-2bqT,0j6#a%LDlf()m"*[ArI7LT&Zf&DO.m@?49*PG0,[4]b\%g]QcfbM[L01Gf.U\F6/q82HG!*"jqCP,eYsj"Xep=Di!pm@$[Ws]XZ@Bs4k_S%$PL+^@)e+][!!fMk'OOZ<F3mTVZ[`^na("?PJ$JpL].#Xf-N(>3N`2C2,kbSQb<c9np+_DVq.m_&'S9W-L1aGMi2LA[KK2`(Td_*%Khn+D[,'&HWc&u/Z^Z-<.*\m?Fj-t4:XaGE`&+1tUUg]+.WYISF)E&]k/ACbW-?LY/e*Y?M(cUtcUOeb[.$DlQI_/85gNb*,)"Uu%`.jL%:UAHIkHJpH6r'"bO#M<Uo?pY7T$PS]/U2p1il2OR$S`fVa-LJ^Pu10X>nTH<TL8TgR=p)346tU<jMgErMiHiU(@#0:3rE.u%U#3c*N\R&g0fTC$U$MM2k-P+NB(#_-H`d-CbV?[S3l:mR+rD>7Np"%6=Gu@H'Nd9C`FCmH(2l]aHLi=<"aSm>*@>uHLC#Xh$GjJm%'fP6G:U\k;9XtNh(Sb=!gs@"M+JJWIX>)^&@u#"6[;\R)RT:?Hg$O3!Aj8^1k9Y$jfCS5V52kouXc"GVpObB$7Z<Y,^0&_!_^C5E%\Ob(60)FL1"_+Gp)e-'")ocLA5WAf1CEie<qtF>k,'m"8<csY^laV,Z?7N5pH!)i-&N?oH`TSO+-\/G]%@jLRLl'97)]@=bT:&/\%Cr6@.btAC!]aXLedIRc70k9E&32R7VH[=p7^;A:c3bhiG#RUh/Td.k"@e<Tgd"peZjGsqYn-G9gKsfWXSV9XkS;dD[m-$n&!O<#l%lq9j+[BIZPjfV!0ngpO;Bo!eeOK#D!M5>iN_^#ct@=+YU^4RZ!CL*6A@\]BZQofN`o?t*5\u$(\?\+Gc>Asr`!HX)p)mk[!4@OJ2%XD&Us>4b4O%C(#E%:`:2dNYK+E'nNTP10mP$&N&1'G;`73>%W,7%SUjK@8js\,q^;N(HN-'N72[5KFdp_Et-a!+Y2B0M[hNL(jEn%gQ&dk>qsLI5U%n;eN5b"40".iH[;K7N3]Xl`3QZQ.@8)coi/-U,pCT]Xh!F\+SiX3KM`,eRb(EMhJI>+gN*ceR+nQGie([IU=_3o%\DiiS/=._S_4CL?1DRj)nANNO;._T8!e0Uj]P9lEb!@VSo'(X;?Ga95O&E"La<SiVh>COM5W!)q*dpsG6Y:EN6p]$!;5DP-5^\hf%5JG*Cfi;%]0H6k.=*!tKOANSmT!@skDA1,Fa'lmkk!.N"Z(_0C\n!"X0r^iWrFOOn)NK>1jLd/^.\a(k]sX(+@4,.Ufqn92D5,2O%-jZD3f_7E";6hIYDnI3S2U9L;CTEM$duTAHG75#!2'm^d,%s#DI:$Vc:U6c$-6HKbO>2g@O4@jO:r=:'eRg(3^DgVliXO?[7+I<m%`hG:jp8BTY4SPfRF;Yh=90XaVZA7/o\MM`V)g&#5@nnkX8&"04+guk.88O+L?^n=/,5uj&ditHgflInsBph&LF1@Pu7p3iF*m;A^%;f/.\/`?5\gUMd`:,lUF.qBf'7)W`%qnq<%Z83R)"X+9A.(791Ks_cJ9k#*/KrMrAKk.Q7-EeqS_oC\8305>50*f?=g@g&eAu/QR%0EOKb3AI/7H-*T^TEQlnb;q,c]"1uVR@`$&(qfV.bZZ\nc=u.C1MR+NFpU<TF/,(ONKd6^-MG%mar[@b+F*<[cZOURolNj\A7#1g%\@,QqnX%fYD^mTVq?F++AqZ2*o$W,h5I0ofeM4HhbH#l%d/1E^:QC8Q4/1j"O@&us0^\UT[_j/$G")?#.],Yuc/")f:mh+sf=%2o%#Hs8!UHE9;2MOqJc.hU>LJ!/Z3AIq`kX0LL/"(]nYGu0fB%NIHFO>J`K=oeJqX2G3OCi@>o401%XM^1_l9<HO*?+TRhm4PD\Cot2%X*/.H7_@-L?'):*-g"HHbTt66>I?P5'3u2hX7lFV]&JWJRr*?tc+6o%U!_Ak<p`<'Wh#O3U7&:=WkE^1b:HAg2HJcrb+K6HRJ3RS%"@T_28f>G2Xtuh2&CrfO&K?X92b4dnM7$?Bg::1#Y3t8P9qsU#Q#iq"/FguDg'%ek>;3[c\]L`q:=?(HO:_+DN7So.%+&b_ghu9*%F-b`&URk7nmTr&?-9RJ/S&M2NWXXQ>jAO^45shk9(99>K/ftb3A_!ZUn>]OV7+/*+Qs6td9Z`#+DUi?KWO<\PiT0&oRRZZSk+e_g%1MV-FOY'c@!c%jOe1R,IgA#&eZ%]k0%X8/dUfDcL/4F'DcoC6jp7?CU8?c4(?c[(eZM"tt2XLLmUg5*GZt%YG`b)p)Had[ldu3m`%;.93b7Csa]d9``?"5T]b:/`%JU7FhYZkILr09Be[=]r-%SmKX`/_Uf#&/K-$,UfG./_XR!ld'Jd0%b+J0lKo0^]*HkC"4\b%3qJ?%9_l<8)?qK'+BDaH;lcld`&dRQ?8?bO`.iWW/=mgGM]P`t*Kf9HV%8aW2T3pX`OK9BajS5,b$'!I`4-/Kh_PL1).bP7&-O%Aj<H(f%2lt0+a#2lRqD::KGV6QMdqK)"BV4IRGH7RiRHZPM'GsGo4^`WW5i0O`2JpuAE"&^J(@2(r<KInN'8,cH]mJU5Snrt2-:gQgHsDKF%DWEAD^%8a+J4`>)o<:<2FPW'3_HM2Er$8DCH;ohqAU:;L=D&SP;sr31SoneQW,epDPgk:_G6>K7O\5j_oNYe:<kGh#@ET^Z@Bib.%&f=Mj]oFj<oVFn74gPdDml:P[3>T@_&?@en`*s^]\dN6B*$rK18>mgKPr=:.Kq8[2l:dVfDnc,b6aSI,O`'=FZr^@g%%!`ab\13b%<M.Q=Ie0bWO"F5(heCR[Yj[pJ<D:0k/3inDr;oq5apVR1PUHDDQ$fRVFLH?RF,;uC-J_$f"c!J;qHOXY&jqp$'!Y.FV\galAKEaQ%O2=P9r.2Ig5h'QaDYKFrrVVBtP#J*PQ%C,&1-%(ud1jN8%\8lgNb=QnH>$q,R1*VNeL=(3Ye54*K39Ao35*Ok.>XOWp$388OZ\n"%?t0Sm#I6r[?MpA"<$IL$0ZR*9OSR@6]p([Qf-4<8eVAItk!TK_T4^Ho+L%O]UQ0*OSBmVk%,UR4$b[iV?!i&a+T?A;q#YY:KlW$s%.sKN/Ac5s42!W0c73,M&dqt^8XuARkG1;)1S_));5ibP>K[P=UH6oF8q@.`(JLn-3+]_24fH@abo!^)(b2;YMm>s-RTasI(Xl:f(%/Udq,,Ff,2'gE=gcNq<Ne/bK!/HDmcc/4p'=-]H&Y03)#hkBou(8K_=:OO[J]U39.Oe0qNVbuK[1cE`T,"YoP'E.#d:8<&d]-;RI%j4MXYH:WF\oV:KhTqAMQF]@u-VO6V1bH_&<GNgNNDUXA^VLnU;-0D7i1\jX+pQm^"^;K;M*VDft&fhteS'GmBSo+at3&^#En7.)s%Dq?@"(DYhf?4TdTcD^n;CO3h6Eh8Z=G8/!T4+PDPSFIWqmdBQLEmqtkn_X%M1S7'_#?S_d`>LatKpj':+itW?CL2J4bWNGOF]?:J%0ZITibcJ0[1d:TVLGK#IOM-N:&m:676?I9NP&&dqP,Mki&:VjQU'sTlhMXP'g?=("cdq!SLjr^LZj,`_/,@rO$-e,eeJ@+*>amX(%r]ZZ;k@e4)S^2K3GE8R7>M3IRBTsV]En,LeKFuE]a=2X@Uq5q:Z-Z-FBB?.ar>.[Vj?ZqFjOUPn*Wj:-%FAZ@aq208F>`i'EI7K!%"h5gl"_',em[X'.!$ET&>WT((CfS:F;24+^3q>EHhI8eJj0?J3lF:l4@G74MR+;rJ#G\2`qXn-Slb&7([^pf)i`&o4SJe6lGn"uF%-f3cF2UcRO2*&e_T:k0TO34F.+Y#s8TG96l,]h;VZ41WrNp5U#1/gL:q^SIC(mdgUYu9VfK$e-mlT<`I[*P,)RiuRrm2iN^b<0FJ%bKH^=3&n"'](V<iBj4cH+.\M.K3P8/*oT@kAbhC*Yug34bJJ;+3r=9d/Xs[OrUgd"A%%nfA?@Z&)Jdgm].%Fq\[T/qSZ,e>-\.4V%X]B4#"0pB38&0kt*YqF+MH$^;,(\CW.5]N@R)YfF\QV.DDM:J]d;2g+4AV#=o9j26)?2_,JB.A1aK;!+S6iiPrco7-+ojV]ie-RG%];kXHdeRUlB-l:/1t<op4T1e]i`HencsAE,cjo,[N^f'rY!H$#a*T;`3\.Q>di*Rep<H(4<RRL#P0k[8AqfrmXt2A<(#"4Q7H6tl%>#-5o$LJi[#/+EG<G:j%Ru9?YZi`tp$bJ!Pl_k\V*PRS;=Y8cNcD8^(fkCKdZ\TP4.jcag[gH[DVQsMj[JW9.%1W5j2PM<USc/I@%Ye-saj'[1u;%.*p&>QoJj0o#68dI%^XqZSFapZjpGY-p$KAH^jKBD$:\Y(UZ\`*%g;&W:i`AQ*RB:`?\S=<2STtRYI/J/bcohnQI%r*+ku@(32[$l]8B\g1U/^!CEj/h=;QG#G:V&65=8X@,.3_\G#Of_rs$5JG*94U6a-CaQ4!!n/ah(_A4JBH`:F9GDU8do1k)7Q]Jr%S;1!'=H^AD#WX;hAJ7Oup?k\2/CI:,Pul&AooaDi*9SuO5l90ZqtLq*'q2rW7XO72`;BZfLg?0/N!I@&$Ht+R?FT_,FOc%Gg44\5%e&=IPHHA^F-N4%Ll?7j^\bmY/_pCW)B-V_:\]D$!EUjHKkHfM.K/gd)"bh!Fa)>_']l>**m;]91jR\oHm,!DlJV@EQSgWtrs"+BK%NjI85E&grBDaXHW.]*qGffl$6X2M;l2:s"s4eG+u+BI^\Gk<t6f0XlJOMKi#-Al&\c*!T:P6Od[cpB+X-WPKJH9k6Q:F&B3JjJQ_%;<VT/&;!Va>%&h`0tu+F,K/1<o2F4C`XErAKe5;JP9-(l__eDJGs*Puo:@IBYm1p,F<<t'2DDB;pR2SX]3;%2!YGdP=C>,ch_6sV%![;f2hC<"D,Zkfo4_Je$).c\H[,7YGM"-FU)=J_8](K0A+=9g-/G;?)!mOUaM[dU2dpfQi'!^(.`a\^.7.;6T39X'tHB#lrY7RH=%/+%kT:A[00+g<>oZ;=[d"P9fmmB[caMiAe%URDr_h:[MufFo*2W^/&q6n!j^5%Ci*ak=7AK^*>Q&Oq7gaA=KY@dr[W[a4'?%JWB6%jmFYAUR623n3'j0lM_o7>GhRq$1"LYah2l/`noCqG$[XS$bb\OabXf-f,J1i'fM#Ef=CJo<"6cVN!R*$(*,MHP]UmU]dBK+abU!!%2Vj_:d-D9M;%L>EZ<X93d-GoGZ]Z0%$m=MpTHSADbeq&$N:6gV?Yi$Yr4V?#4qr<KhQr1+*^X^"Sa!d@hcj5ZH\Z,>JY]J-9YR<G%a_+k+>Z8h@8N8%MZhfnnGqmGo75k5<;YHJD1DAfc[CqJq-$I8i.>XCK$YF#116WT+JIE(F1c'+Y#!&\"58[p1+LVM`.<b7#mDSd(%Vr-m[7+UL+8]f&u`!%kOEKRNC9`.oYqY1j'rJuMmEnB/7B6_bpdR%T>e]=uk&1iPmSg]A,/TaJ%j[T\!@$_r\CS=*h8'+ru!(f*q%_RG&_"#='D!4.A3US^8r_I3V)(-3DSifPJW0<Ds"6))3=L9]1bL9NZJk<:DjkB\+?+*IH/W[so'Sak`p"u"GRN$MsOj=(<:.5SAI%D5#A;50J$4Teg!q7q&Ig,lV;sjVV(c6TO]^0fIDsW5,h-CZn:o'&R?ip;(S4g-fRA8`3]6E-)%k?XmJm`#'sX&EhY\':fR=<aROj%d*8_*DiZ]KO&e0d!G6f2(tG2E`21jEF>1"Hb'V,3'OP@h!kBrLfYT2LSpJ[S;I\2:`%eD6HR656>S0N.m<]M;`6,%h/@;BE>an'k%X7WHWP4+]2=!UG6WL9[T8tSF\OSaK+h\a_nWf:uQG8`m%*X@M#@F7IJ=G-n!W3@O>RAbqB*#4Yu`CeM-7`[OX\R!1bGCRuLUM,<2%3/m,`GBF7417O0o9%n!tdnH_!G^NDf?7b5r;13;r<tYJDMJ3NMC_bt8gC%%McWMrDN&nX8ZR]#$i?k3sWUBH$<rjRGAg7Cn79N1#%YD=I&5_A2>.14UlX6&AGm(J)!DLRLJE?m.ss4a_Cr2gg=]I_I'^/b41aF6:$lh9p/k!h:F&s0ZCV[N^MlSqWs$j>!k7I]*oEbcO=%r?3GD6rNHOQl'nZngY4*8)@0tLmX]b&G>=:J,)Kh2W7%Pm<R4&P4u4>SX7;D3Ri)@a,X9t0fUK2-<.f1)5<J[.>WIY@_Mt*P:pjd%ZOj/F<UIo1ZV`d!+]>_6)/q3+[;ORCfNpH;S$NB#5is,o!mJ+%aXIfL\3PpNQ!!V7^u?afil?ae+)>r3kI\dNCZ1B&d6taTh=D+)%\M$`=QKb?^(Eg?9VCld-($7)fSr,LWWgL;7HTlLX[S0mepMDL@b;Q;GVM6D2!"#-V=ik$mlk<#=okls_V")=1gWBmoU\^+E*PFFm%PZt/h]Y^U"==3:G,Mf51FV7.XSTX"A%Y8Oo*AifCJ#^g6eNYi,0g!h4BZV\g_YNbEB^HOS]fIkuQiP&WF:1/`EuUk:Y&b[pVGKoH%+X5g>eS?8kqZJdj(BKWc-8tX6!#RFn2@EQ+3Eb.!_d@.j\_:'K/duro7u`45TfM8Z)@Hcg2IRtgrasl]Z$ChmCVJ]dQ\1(&a)r$"%#bNc;O)L-S)M7]Z9c!:D$7n/(,0i?gCKPi*Ma``&/gHZe[*V?5K8oB"'qU-mO7)KK-Oe$\7E.5TcgA,ba)%`RMAIY'*4o\>lT(1#%rbto&)Zhm*UI_FT*EgV3Aie^XP4oQO'DLB'e)\fA$&(j@>#H>nfmQ"n<<#[0%oN?"Df`k3J+QOEM1KoD!FJCl0'AV\RYK]giCm#p%&\]GW"RYWEIaS$uKF4Hu9jL49@hllsW@8FW\3S2BPZZd2J]1mt7)Gt]7<g<dL?)VsAtDBG7I`6T)i\N(Ok7tt)'#O>kXD5IN@p[I%NU"]0'RNtQeYYn!Dnh/B&O6#\M^nurI=6..#&2&T+MYE9Jk4(=Ou5sDe=G3Hc.#WDpYVIZW>q\MokZE!`':D6>(@Kq(qrDZh;3$q%4Vq:]NI!.?1U[G^esD`VZ]1GN_RAj&&O#/"0\p_U#UNS[OAd>uElg^J'DTFH5JG*cs't&odS1Y54qm0+g-rpAGr[T5gLm*RMAPER%#A,5tCBGht<C*5\&k$Ti4u6JJQL+dm>\KGjZQWqMh(WI<!&<ld1&uilJ.pU"1S&MsPj*4Sm5*4j[f)d$P?>7(^8?2M>h[aV;@mqI%hY(s>K*KBo9FmkonR)a9M_:=^o9+hY`eFp<N*H]NA[5)URI$-)-i3nKgVo>(`c<\paZa3/,>`RtbiA>9".$q_iG!E:XsNsq<4$a%%$I0(1r30]R/BT9Xd8GCsE2U1qU"qIq`D_0l&udf/``/QJSk`)@iAQPU8#f@&Go^HGVks5$)6</>kN([&4p<[a(_OMmbQ^L&P\&(/%2*f$_buC;EYuI>)j3:Y;12C1kQ:U\jj6/GjN9hCjr*`s(YcZ(ALu%B7a(21\B[L^6ZRS_s[VMpUH^r,RP#Z4C>U-XFVYZDB]VLC\%q@"]?Y*/*,QD_*7Y"q>-f;E#Bl]X.#+Wfhs]'Q"gZHloS>`1FLbSH#gi_,iKIGoZ?^Yt%1PV<lVh.i+?M[fnFnRA@=5D5-?Y2L^`%;HO)8aTWAkAfB_t=In!$:'kC(AC46Vl[_0j6LAD;4VXYbh&!p&h]^2YK]:j9<g!Xj_TCe'?J\1]j%LghN!c>!bg`r[Obp'QG/O3)%Y2[@I9P6)hq!T4L\OWET0>CSMpq"7M"ccOuClQ`!9o>2uF6@"3=J9hMd9e>3W-mcG5CRe2k7bCM-L&cs!u4G=dgKp_FF0I<V91'H%.6eb`3BnI+LrT?/.j@U-[%E12m>'3^IXp[ua-6:W\]n+d9E!NtbPb!`^*jTnCAaYu6`s-%pAG]=rt0[NFG`<d^8nsaQch=mL\L=Q%Vh$6aV!S&.Hn$uUV!X+"OefCBM'@!fVcn%;O,S/6`m8JcF;&l^AqHOU,WO+J\l3(f]k?WTFGQ9U44DA`UWtMW<tPDE`-`/;-=<]n%k3$dE1>^g$5U,;e7gXlmT7-;P1X#VT@Sts%MV)cc2\#fqOiQZ7&Ehi"Us`>K;#1fG$+qB-V=U8'?'^NfGC^idl#*@4i+r(S/0JBP%U3_AJlC2K"8ArE7U69:r7n'@8<LsXS`G!/fpWWtpE#":LYb`o74ZDa^C!cOWUt!okP+H`ZdsTA]+.7E45Bi_[Q]4$jcVtMV]S^D8%0[nSXGD:1J/E_Fl:nN_.Z4r=9bkc->`lEb=a*)]GLJ/J\h(46=bV.'e&<!G:Cc#sG"nMki%:Z&,iS0[A;n.28!0pb2Z@L)'iD8Ta%ij2]SGsDOj7%hKXHP3S_TY)=%'aU0Ag9P63?E<r1VaE-3!A6OE[qN+>1Pn^CqBBctn^YgsNX>lD#cJqBAeicDHBF$E'Z&c<5/iAU%aHNB(/./ZmiMdfl&@$9*/=(J)eD,UVILhi[eUfTj]Wb1qJ,?,iU<c=1im"heg[Q_`6;PR]gHr&BN,;4bqmFVe%1aJ>m1#D9+!J_R%Z4#b+H9;HUN_mgY_6m45&%fqb)?8`$m*u;:!Gtg9l`UJMhak]CUTL^)^:@2bht/*il\"%&+SPfF3p8K3omd8;M4:c]fdF(CrA-C5%2:lYO$PIen0TgMDDU/Ur)P?A>HI#AtNV[CPM$/MBlOnJ5k+8$?\Q29De^`4TS/Em9B-HT%`Mb;.5n&%eb@SDeg"WF[Ukoet\7FN@%H8THh3l<m6a-AYS2X8FZ#UFdR<r<n=Cn<P5ghq5>39gsX30arJ'8_OZceMMVPP(XU38[$R=rGlh3MqT4$$0VShW92bPl[LS3Prsi%@p+b97iCfQY)D<gm\eao0qQJU:C.ifN04Z2.\'O?((/.Pe*X?lbNI:MQD;)$GX:o=-g#!U2[BHE1ZAR5:$ZfJp:fN_V^P#YL]sO5%RfcJ-E%FZc['L6%QLFP:FiL!TOU@_ck;1nF?3e+cQ;=e0<X4#i=9fhed,1qn4i<\V<PU!<WGC$]Ec-14nFF%g!"[$5Insk*kn3)7%$Bmlr3M<:gS'UT:HG"Mh,2R^b=SmH"J(>jdA*/S*kKi%Xa.,=(.t;%Xp*(>W5h6"G]&.'$XmS+Z$/8VW)`qsMn.nM(9$oeeLgTlo%CL2h#N!b6Cm2KMW^D"f%h]'SfT;6#$kah1(FhdaL]j`dfb@/bVn&rT*==K.uf3JX0Esi5ZbAr$;m.UoA\]:9hnTj?UL0/uaL,"Y6%$.*2)BDC[HniS@tNag5=Kf/GiB's8h3sTB++UaD8Z94SCET]adg4BZW3OjK&4p/#fDZDEI7Rc+a:bbFt'6+s,,K`%@1lId@SX6gC%;.kW[1(^mq5ZB?-U["`8A/bGBV#%3X[occM&P*>?Hp:d(iejnb*?G7DUUJN!RN<YXV&1UapW>s:e@"'-.cLYi`8!V?1V)`N@8#c2%HV_^S3GP@h6O&E+9"q*h-sEn(b!sdq9']N8joHI@8eKK\==Fl&.n.UOBr1SKMgg&3rVjiepr=KViST.?b_&2=O,96j!M:I<Rlu3I%8tN^X%Ra;^O;*NQE]9@@9?B6co*6sLrMlXB9-,m_!$dS`jnN3Df%Su"p9=l6KY!X9JZn`EoU,JDjq.V]-H4JQ:@.JhWf0Gn$QpoA%TC2qW]uK@deK4>V]$PS;g6bN[G;016[G4SFq-aeC?t5lO+\EZJ`[6fA#'tJ6Z"F?r^/1Ai<B`]P3lMp#J[6"pZWLf^W[gsZ<>BKV%cTTiq1e2!OYntZR?YtVLSLdkV/TN1K,6MB5CVBfgM`QIQ\qq@d$@03b)9`4E#;Vq78d*J6!;03n>kOIuThY()[bk;fOnq1_e;aGm%GBrdJo(so6<HsXmhph=(BU!m,gNk@&]ri^qDs,X8O`OfM-p?9K#1)<iAC3O94n;>jC/=UGqtC6<*>oCVrdqi,f_@=T/6,"?U)KAk%ZcT^5^=@e/9Ls=JVk48Q51m,cZa2=]C(.boHfa,Z*XLHd4jcMsKFsd3jgD]9biPC4bSReeNSJPt5!ag=<$K'fc_Ps'VDmA<2a#G'%4@-^H5UO*uphnohKSt/:Np).SUXi<@7P.<X"Q"O@3^mP.2lMOlX*6p15-4eQ5WPbR@e=e\fW^_TW5^L@&VHDMjfbA4^>bT+eiL4B%9FV"Xr1roMMMnGV[dQ&`(jjZ<XugVjlmCI@I1c5tqn0A7]*@^l3?Q=h.r]?m2EGKBS/]G.=Y%nG`/RE?%>OH7gp!fa:g&gq$etK_%R0&5/ZXGDBHaC+e.qdjR_?HqWjiP'dW:1jN'^EE(X!5$\)(FkX#669LigcYc3fn].G*GmP7ff;^kinCVqX^2Gl/Q"7pHS'b?$*T.%msL=5<59nongr)\[;Uj\iWYQgm`Xq4Q9Bo2g7="L(B@;8:L+nSjfWBOcTV.h8mPAJ)A6cPXPY_&$d?P\d^cEr\r,(PT@SQN7_u9M%oL_QZQ/;ajT;/O$pH%TJlMW`,=8XP_LV@[#3qlK.o#HY)^qVKE?NRU+lZFdtO-_J7M$gLK[t_TncE*=\f-d9*4ARu$M&;dlY(Fpa%AN)jiX,b$_FFa4/"cRcs>dH'M]r;>/#I4$o&k:+U8AB!U[6Gf!VW#TXfCN+>*QL@"[C]m9==:[a^J#bbj3t-^.-;F[E:@ea>[[Km%P@s;qdj:1q8D-9)oBABDD,9VSQd^8,IZG<NdrU(sL@VGJRFVVTg]?g7'Bq@'DVp@;YV)1ZnXNZ?b#)I_.>Y/O:47upf-#[;oso^4%0K8kLQZ^DoLf*]6c4s/oN]"%>6?ot<YK)'A^4e6.\d@9MC:JgkEt)!qOE@Tqccnpti%Tu7mbIV>p0HT1#abb:h/F79'D?hR8]FJ4%#FHmnaePs9boU0#2\7["eBXP3lL'8^3@g=s#I.^nK^B>[ik=]E6JE<E7)/<FO)Hc'@C]7MR<M(iH0P&2IO1j<H&`JFc$UB.GTYNl%n+Fg"j7[^4"IZ9`!\i.e*5c[b7j7!eD]Urh#TjQJ'UX\PrZUV_9Wq8)]dB7T<*:4:q99.nI#Fs:b7/eR#nN#-%UDn.U(-XqQ]CXH%XVoWH;;o%*!u^/CE]c>(Cp1cQSKT>RQkrCh%sGl:MZH;u2l6rM!)WhmKG27BF/.gJ"d-b9bgie?9-'kkd:5eqh2pf5r`ii?[8B*r%FfuA8<KKkbZ^qP`El*Q))#60N=gTFISh(VEUS'*qqr0jLO69#dm4BW,gt"+\^P@1/L4u.Gg^t:U\]1ONUcO%Tm</.Cq]I6/9KWTc%cJFDD;(rXiR,ne2D**CECgbmD1!(("3.gN3U/LcHkW(Lcc;Bq6hfA*\?WIl*/'OHgL7ONHFkXY8%5"fSMY'i+WFFZES!@\b?58Hc%Y#>TH#_D46jR]=Fe/J`#7<'G\EFX`D&aqa4.W1KS5q%/j/)soe,5g2AP5=>bIZ%2b6\NQH2k3f_K]/irIBIoW69g_W"mb!^RgR.F%c0oJ"5ZqhhaMF`A0FLQ/k`5=_`;Za)!?&HM>mPR3<a#iJVGB?D+2-@VaUh&1D41(9&M+%.I'+(Y..n^8o\[t(.JIAhlo%:3nKnq/%%?>`>lgo@^jIk7b`J5:\*%r0d;?VD&omb1_>t%V3U?U*Jq6f=)G`5hWE?Q\ZLjr]>^'6hJ:](+IVcuVg$@oV*[3Q]FH5PFZQ`A]F%lS1eN8UQK.kD&]OMQ+p)ae2eg]Lj`(73kGbP%5A"GE9\oX6&AGm.W^]$d6uIn4B4aP7'9JK<68pgG"jNq0l/h'm/rd&`\bB.p>.h%m%(8?:bAq2o-@4pL(lB;[_O0_c:F[aWJ%QH6.Fo8&NogE4FJ;/X^B0Q#I=%CJ_[9;[UJ7DSE[VKqssu%g,&qnH'PZTohoYmZVL.g%pgocprKQnUFjt+oNoRQNb?>/4mf<gd/k-^snuJT2p3@Us70#Y[+Vs?T5H9([jlALb6g&K9Bc.^@JP7s^WS;W"]>>AJ?0:Ws82G;E%@8>hu(NR&["\PM8OhN*V1"s8_#VtG"="qR-OW/5k,sq31XGAp*3q@aklpbZKI1XjnE=@X/oNUAo0pc>BXreCb0.Md+23G/I%H!lV%$K<H7OUp$(dLCO^>;G>Ig_8(F7Xs.V(K%DH74,Cn]([kd6C#nGoR@dS:f0ZOeg`#(X>>]JnHMKPnD$jtVB"Ytm[WLGMke?t/8KM)%3pJK6,pk\>ii9bJ^6JAuO#jH,W=p!l^91kP#%],c-a`0-cb>j''eI[.VpiDO,Tp"PlgA'0eAkA5c2+f%n0AU6C[T[RP;ZCQUo?V<%KbqZEI=89>22V,4'1c@p861o_P?1bsHX(6cUhb]M?$c:q[GQooG&'%3ma(-37<-@7?L,qNh8HS:Fd2G&j%`AqDuPVcY$nct-J+n[%0,[3@1n;j3OHX,Z)F:SrY"@eNN&&Q%M,mgWin'LNC4+Ml;UWr\(%JJ#/Cn33n"X-cAHI![9s<HCUSd_5b^Go1)lW12[pERT`@m^T%QS?OSgJqF6`L1+sPTqUL0mBG8&QkYm@IHQaregB_SmRY3UEDNE0\O)`\jj'MNp.J00m,$#(8$"B>.Me/ft5fcahK6d[^+>5d5o_h%i]8*h4;?CLQ=NSUV6;WcZ(]q\?Hm;#krT+1g%HK.\QP`o[3'`+j=goQ'dZakX^F1]X>,)=9#g=f9g<;QKqB@H!g;#UMG\Y`;V9,h%/s,0gW+eBfT3G(!0kdE*d3^?!I9sa+&V-D3=EQX;KOc]J^-W5H0%\.XN8b0;h<V%ifH,8&B]1<Fo!Nf1j[l1W:1K$NUm0E#JJTRg%KWfFra1'^%+bWYKTDl6-rYpF,H_d8ah\KNT=],-e+r7tZ?c7C&[p8gq+OeYZ0l"X&q"nNkO_2.I%h(/GR'ol$ql@*+M<*f#9^RWj%4,jt@7draI>p!XF]A'u8e?IF1+GfK3dK:@fE+#tV#"bEU95R)n,4[7K1P'SQlr>%#=<Fj&iK6^b_rIop39JR/`GtZ@A[p=((]F2i%li38uqF$WI%"bVUl5OcD_.7dun=4,f`3/!qqm5.?)YYVt9JMBt^<")J!dQ=D7#brDYJJuB&NqN5;]R.tQ!;ml*)qIRn%l_qQDa5p%0DdqfDUDBN'a8#66a!2.-m)q/`t6.c9pMu!OpqI!=7,M:kL^VCQT=?<G.<OpA.Z<4<m90k>I<XY/`t>KouHs<#EhS@1"c4)0<)n"%h+d?g]"1/0B*j\9k_S)$n^0@sRsP4X@=<Bsr52,_F\s@>8XD;:kA?>[e8%)\rO*OoWqr9s.GRftA&!`*CKU;#,NiPk?\WY+!c?8+%oj)/Tg*9PQ1T]aTRr(3ZV`HjpeM5S#0QV>",[`j>LE'bc"b;G:7(o=mkt('M5^U8CKk+L5`U^o5+5iokr<UOmh<br^@.XmAXhDeI%rd]M_ZLOI>&A=p)`YaF(QEn]\GHOH*<D*Ol!)*LsPFoiY!o\\s9Huom&3S`j&5f?g7O!4"%rdciXbbQ\O\2Tq<$7&W8-C<NmE\(q%D[^V;R$kXN_BJ)`al=B]d9LaPD3TfV@&A)4S=:,7jq`YD!;:UZ`?"nNa'C;P#U2j#(@u+=a(`oFhA%a!G_Kfr%iU*sL2H(@1jZ;m%6omdc4t=Dngnml#N5U-7H;6%ph*1m-D2%Lk<(\Cn+>)lsW(OS[OGqaB&Ce*HUoU`]L(0rg4AeBZ$L!,g\doPB$q/Fp>Er&o'iD1'%=9G2MNlGA[6HM@fV9%rdFY;giCSY+[lE`jP5-%g?mdBZ$\LdG67h'OPKn0hVaCF?I2aa<+MOYG:lEU?B3E&6!l<,jp7dEa'-QsIH%2[uSlQ(tq&SD5Y$q90A$Rfu11$aUu8WbunV=\\g&D#fJs0I4ao$RXm,kX<:TnPr?_p_J3&g>4.S\EE0Z6K_@=DcGfMmG$H3&(?$R%K"SkOdEqg$p/0F_MF-NW"<r8slocg"dWGj&7J.mskI)nkW=>68hS\W2]_@3'Mq&"+YSuc^\+b48bI19Oin)A#Ypt=ZdOqXb.ZI&%%YpdO$@MU'E1=2$HTN-CSrJ!IMeN?kCqdFi1PZkmgcDfZapYIZ,?BNoJXL3od#q;H`qgq3=b(`K"8$?dP7j7$S%2;O(1-9i7O1UEM%?&Of;)%&)V_>Aq.G]Ss"Gt`iq<&Z]1O!0Nk<pX7ec*O>N)r_s+QnQ;I\=(.!M(o?Y$X3WIm_9Sb15g"+;Rm[RP/Ir:r1)>+'2DKK%2i4=]S/AZ(rl^$M[#0Z="K9u4]m)%cefNE:>6fao9V4"-CQ)I4Sf]f?jL.EZjP:Q%7l[c_DG$-^3FFI-8&#/peP6qJ+o,$3^H;qM%6:5`hmnX-F+Blk=0/eT%>?DQCF]A,"_j[aYm0[BI&#GP8SZauF!PI=6n:M6\1@.uA=nmm[1("tU\J,pDOXr#+&Ib^C:q3?FOC_-J%c;`JQ\-Z4$G"%q0.]+jc9NkdLi/4Veir?)P0.$Dde8oC#2/sn9940b>j0II.*-Hag>20ZR3/LeN(Qd!?[?C\9'\-fjhihH1UJ;,"%#orB'[FN7:/^nu3Vh5r!R:=>iNr":M0o(-<5JLMr+5]BQeMW)N"X9o<@6M@e8HD(E[)o1#Sr?@LW)d:5-4*02Y/>-CiT`Sde&oHH%0ZWAL4">_T,],"GZ[KTjeU$%M4"Y%,)iOudAYL%'Cj"c8&+\LM,HM18!U&:5`K`2!'7DV6^X#4$5PnGNSX0$`04#7j]Yo10+Q[iu%L)(+_nRi=Pri-BCV-YkEV_7L[bCH546mAjX_\d4oUreGVgc&:X!a@+]XY$]@U)g#`/?G+7j"W>JQ(fT#D?R@28;@bCNM+i-#p9)Z%GS!F3G6YGV;:JeS[D#_,=d1\?("bWCJ7)2(&/LO(j6DQDpf#c=`?a"='3M^K.=O^KGuRHoP]%:m='I31IgnK%7R@QEFDXAfVd4O=%HGCHjO6S,<(n5n?N:^<H&+F(Zm+6]]eU;6t[.4\].c/X!!YEJ576!P_J]GDWVY+NObcCAlen;ZIWT+P$6n=U!"sSt=IF&XGR'J-Z%R(`LQ9$IFU3M[OJmP^1j>!c3iaQ"5uXA=/cA!"<r4J3FFM<Y]"qN\gEI#BGHQ*3Tr70^+sH_`:]fFr_\YZ0.-(=7rJ3GC+lJ6$&U%00FdXak28u-m9sJ=s#()JU_3(lP&MNnJ2keS%cs<8L%_K^OG4`\!UW.)nNd5W@hX`heW8J\FKJp@Tj]hFOAV'0s-FilW[&N0s*#Z%4;$&rBY35/'eugBXJR&f$:Kn-O&cE.%6e9*JXNT>7[\DA@Tk_/@Tk^L>dgn<ekh_IFc_2C`8u_./osCYPdP1*PqfCg:YI&YW:q^K%4;1iCL``pY;IC)m8jbmsal073LmBK[Tq"#%g1ll"]>dP.=p8[iN,bH.3!+8tV"!pbDu_d(l]>RM-XeOjlGH5kT+kDG-Rl3oN-_We%EqOr"%E05!F.8<AYr1q@L=N:J/pCAj(9eSm19arp.M9.H=]?oU79`]N>%S`_UYK#g^0W@7nXa1GMm)ZL<j#)FHAu\$H@"3aUKUm3%Jj$+KHdug'9cI>)&POP4Aaj&9BcJRh3VF)*`uYd,=%L@QYkFI1qR/]a?/0acF[Jke1(s\mct_sZ!B3)5\13T\dk!&K("hV^4u#[K%Dd4)-8@^,VB%LbkFPF<G]>aHpMqOR"`i/JW.9_f8J>cL@b+QO\+3m`mR1s_>k2LL^?Fho8-o7++9EjtT9?^Jr%/&)QGZM**PCE9:%G89]g8r,#/p,L/C?I=.;5&2j!<Gug[#frcG8uDc5O&kUB&kcIB5uN7:fd.7@XKRu6a1'^iIl-jIU,+!f=pnqC`.FAQOiT&9<dQ*r%/$,%5f76s]\V9$#Zt4!#$g%MFmgZU;]?r"-`o[;!Ob#?u2C=[=83A#C4N29O+_KTe0QH;;PPG0;6>:jJF##pk[2S;`DQe,I1S'ie%<GmY4oZ!j!jMagb$$kZcr>mG:gbfiXaO/a@B.A^e?cBAZQ^?NcPsV=,[`@C8C7_n31C^W(14^i>2'p(^WTd;s0bQof9A=Tao4>(a%<oe`ZJTq?<W_4URf815CS=#oTo@1aY@IECr@+"2^*9I+OB>b+1j"AugSR^1DF#L,;Nfku'K$FqSN:aZhXSLYo3\$)H@R,bqS#Vk.%E,8c54M8M-p$4b*Z/LX"E4-UZ>1dd*FH1C9c^B)_-iE`,m`K)Y'o^gX.YrR]@_N17'KtG+`O)l*nr;\?qNuD)bE*t9%$G2*/N<qV%e*a9B@4'!Sb(cZ[>G7<iImHn^"N_sQD"nBZrV..Tfe@_'qR3]Cc-(iEr3&?p)3WGmCUi./*K=s_XI%5c>5,\k.Ij>kpW=^F0$Y.:%/D=&+$YJN+bTo+%aTm?dB'Vh#TNc6-_4u8hZ8V1=kuNmV4NJUh2Zm%pGtX0p)%&.3(4'F'0D].;adlK`gr5-tqVQOKa,?(u(q>mc%=m!PX/b:h]$Nal\nh#%gFPqKV-;'a!8V$&t?5u;T99WPX6Es-(\.1onPp:TK\ZBpQpJBoQJJoJ:Y2mP!f&lrqe_I\YIL/tI=%2H>%eW^sRU?VDE7*him=,q$83sT_Jdq?lLgnM1l4NS77D"CPGcq>,jb5DU+r$8+$4NK6,SU6+nSe==^S=r"lYo=i?n")b)g$:qZ-Y[H:%,OVXclbn*UQUSr:#tC%?fUMGG)m^#o?Zc'<ps"A[\\sLcM"r$5W@C>=h--'*Cf/O[h`O$jd7/hnbG(CCCU%2dHWlq.$SRQ21DRi%%!ZPShdl2*uk:/!>rdg&Ii9jN6n=5h-X.reC#Y9G/,OEFQk@?loHfE<O@c=`Wa!q@pI]Qu(71cUY+X"Zh4itV;T$p"IBu%W-Nu-&[%[eOqtNoI/3$\/-N%F6=JL4sK3V;"!bU\NRpo:_k;?b23KCT)U@oc%EUD+m#o-0VbA,1=/&[;0i0b.nQ)^iLoHF^!2nih79R8"/!&%+Sfl1TA>B=_iVYXQes)f*Y=UGF[X!B6WciAMZ#U'35<O/IStY+[S/61f:BeQ=X(a=`f%?N7L.k5>WOhXh5d/0Xe>.]nQn6<1(mZB%NddDFf$.%\Cak+e8)Y/gaQ@hGNuL#W,"mjo4r;j:Gnh;P>\Ha%m>COPXLgJl)sB?$ADZ3B<P5h2E1_ESP=V0[X6uS#:QgXTX8&Xf%Me,,-*sM3$=;M]VL<8E\HFZPNi[).NYf[WA8=(O#`shROQ,_cqV*C>O7HX&0h=`m%k@QRDa_kO3Y.s-FKZ0^jQ\a=OLj5/M>@^k0%$CgBZ@6c(c+N<NVa,Vhf7aDt7>"Hs"=($E6,?bnTaA@M$:N_D(Y_LXA>0)REN[ELZ<tZ`L)P(5:M-[s#RrKkcE=Icpnq+iZ_kPcG%WT[O6?*f3#b@5.@7-2t`9AJIF-C#$ULQP-*DT2?DXK.e&c4oHO:RCTQLcne2d+r2k71A<aRG2?iq"#H5#\MauS0i_WlTr?\O"6%N%H9`0^SDkA>7C0Ms!/SjF0%fhRn:pV/,J\J.7;W5!*&X^sZd=1PLn:r/W\R3>XdiiY`30%JULXO=\F;jS*Cq#l9qC_j?Kn63[c8nV%JH1Ga+2`C)9]a?9<;5)N1"#S=D\1Q=_<<:#]7nXLLjraMZj?#SF;N[>&B6i_jhs5C@iOP'3^:):/8Abn:@C:4-Q\(1UtgJ#A5SL?%j8t:kc6+S@"nj<4m".W#Cr%;CG/G0=S%i&;q.;D9\&23:6Hbm$@+X&nU>>YAF,8qr(+aK8$g(f\Ljq:2mr&$V^qXhh6X1.WBcJE5%n@j*6*3dt>8JCP@Z@0q;Gl"l=0VUY&`L,%&kM6[s[#0\[lV&L*'P$T9:hS)oC:B)&or5;(OEOs*Stf?b*B'p%@AKEmA\Abd_F<pq%*;*hG'Uu'EXrUJ8f2%r/p9b]>MPa-!gd4l[Vq"YhWSd0ZpW]Q.(F/3k"mKWb3M%H<]iR;N)QG/cFC=jXLD;EA2o5`[2E6JL#qd>Z%LP00p/LKhK[jO,s4,<K?N@[+:$dJRN]oCj<raNA65%O"_/]0%aC+j[qgP^XFg=B+:UZMcZ7++b/0q%!$o.V=HGi9+WR]`[bge2Q3%'o#jBBXO5dJta8YWqVoB')u"W9Z#I2AKkV`GFs`:<"Sr@K%VVm-AA&E8ccJ8%J/"hQ@'OE:l_nnnDV><e1S0?bU<O<\B-mD/rU?f%\4DfgP5.+8-/t>f"c6L:Jjh<YL+umi)7O7c-@='DfXqDD(H*q)GVUn9R(X]gYHYed(Ud`N7=f\9CgN3k$eq'WGUo;E\Zi_K&'K"D%.S#iOZ58q2k<"F>p3l8%<FjeZ\F/[]a)tSu;'JSH(#r-md_4M:Lc/`.$YbCCPG;A:$ITFS.?@BJ=>;5q`-e9e(>iat@L$LU>=Pa[%TWEZn>X6")fBq7K^.L&Q[MNL,o*&UQjVkGn8q^*,]gF1Mdfj39+Yd>i:8`.9WEPa5Sg-e`$kS59'GA"Kmt-3Qql@+(nLXsY^lrID%_22OtQ.T)ucEt^ZbcEH?LKE>\'ZSRrm1\>dYqg0/B0+4[*u?d<6kFG`luroW1><8c>RCJR;<A[@!G6M!AF@O_@6aKMG+Vg>e<AZK%K)Z@f,!PHmr1uVKJ*`'al&Fh_*\@n"q1qQ3nb`m(6UAXX61>'-Y;^:5'ELVl.C"+K9\@L.rqpBU5JG*=])3Y"r5F0cS%np^TDm/d%rqWIArklMKp5f7>QiI#<rXt@prpR%>q4%E^Va(1P^\lP6J,+;<pU<A:rqio!n:s7,(.8,eQiHFnGd@e*X![bh5Q'rY+2@a8hu<TN%jmR]tf0B3':VZh`+9)4Grl;des6ia5qSTKTrR\-5fNp$"cOTtN^\du%1`.s-o6_:S5<JSRr8D!?FJ6u.P3`,6d!tiRJ,5cqn,MqW%n&P:d0E:=(s7TfLr27=,nJ?]Pp[,`qa+*n,s67#mlZ[jVlbEGh(OtuTr:Zb3pL!ppgOK4th&h.Ee%bkTs8Cb,^\sLK_.Wf9?f-A/%je)PI]79_,+9)&I?iKGBro*kZnil'Ns5G^2j8](-rV6BnRFV%(~>%AI9_PrivateDataEnd